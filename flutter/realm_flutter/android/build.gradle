group 'io.realm'
version '1.0'

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
		ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
	
	sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', "$buildDir/realm-generated"]
            }
            jniLibs.srcDirs += ["src/main/cpp/lib/"]
        }
    }
	
    lintOptions {
        disable 'InvalidPackage'
    }

    // externalNativeBuild {
    //     // cmake {
    //     //     arguments "COMPILE_DEFINITIONS-DBUNDLE_ID=lubo"
    //     // }

//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//        }
//    }
	
	// externalNativeBuild {
    //     // ndkBuild {
    //     //     path 'src/main/cpp/Android.mk'
    //     // }
    // }
}

def getPaths() {
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
    }

    def flutterRoot = localProperties.getProperty('flutter.sdk')
    def flutterExecutablePath = 'flutter'
    if (flutterRoot != null) {
        flutterExecutablePath = "${flutterRoot}${File.separator}bin${File.separator}flutter"
    }

    //on Windows use flutter.bat instead
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        flutterExecutablePath += '.bat'
    }

    return [flutterRoot, flutterExecutablePath]
}

task runMetrics(type: Exec) {
    outputs.upToDateWhen { false }

    try {
        def appProject = project.rootProject.subprojects.find { p -> p.name == 'app' }
        def (flutterRoot, flutterExecutablePath) = getPaths()

        workingDir "${project.rootProject.projectDir}${File.separator}.."

        String targetOsVersion
        if (appProject != null) {
            def conf = appProject.android.defaultConfig
            targetOsVersion = "API Level ${conf.targetSdkVersion.apiLevel}"
        }
        commandLine flutterExecutablePath, 'pub', 'run', 'realm', 'metrics', '--flutter-root', flutterRoot, '--target-os-type', 'android', '--target-os-version', targetOsVersion
    }
    catch (e) {
        println "Error running metrics command $e"
    }
}

task downloadRealmBinaries(type: Exec) {
    outputs.upToDateWhen { false }

    def (flutterRoot, flutterExecutablePath) = getPaths()
    workingDir "${project.rootProject.projectDir}${File.separator}.."
    commandLine flutterExecutablePath, 'pub', 'run', 'realm', 'install', '--target-os-type', 'android', '--flavor', 'flutter'
}

def getBundleId() {
    try {
        def pubSpecFilePath = "${project.rootProject.projectDir}${File.separator}..${File.separator}pubspec.yaml"
        //println "pubSpecFilePath is ${pubSpecFilePath}"
        def pubspecFile = new File("${project.rootProject.projectDir}${File.separator}..${File.separator}pubspec.yaml")
        if (pubspecFile.exists()) {
            def contents = pubspecFile.text
            //println contents
            def matches = contents =~ /name:[ \r\n\t]*([a-z0-9_]*)/
            def bundleId = matches[0][1]
            //println "bundleId is ${bundleId}"
            return bundleId
        }
    }
    catch (e) {
        println "Error getting bundle id $e"
    }

    //fallback value
    return project.rootProject.name;
}

task generateRealmConfig(type: Copy) {
    outputs.upToDateWhen { false }
    
    def bundleId = getBundleId();
    from 'src/gen'
    into "$buildDir/realm-generated"
    filter { line -> line.replaceAll('realm_bundle_id', "${bundleId}") }
}

//task printProjectTasks {
//    project.getAllTasks(false).each { key, value -> value.each { task -> println("task=${task} dependsOn=${task.dependsOn}") } }
//}

preBuild.dependsOn runMetrics, downloadRealmBinaries, generateRealmConfig