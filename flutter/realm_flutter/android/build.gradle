group 'io.realm'
version '1.0'

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
		ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }
    }
	
	sourceSets {
        main {
            jniLibs.srcDirs += ["src/main/cpp/lib/"]
        }
    }
	
    lintOptions {
        disable 'InvalidPackage'
    }
	
	// externalNativeBuild {
    //     ndkBuild {
    //         path 'src/main/cpp/Android.mk'
    //     }
    // }
}

task prePreBuild(type: Exec) {
    def appProject = project.rootProject.subprojects.find { p -> p.name == 'app' }

    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
    }

    def flutterRoot = localProperties.getProperty('flutter.sdk')
    if (flutterRoot == null) {
        throw new GradleException('flutter.sdk not found in local.properties')
    }

    workingDir "${project.rootProject.projectDir}/.."
    String targetOsVersion
    if (appProject != null) {
        def conf = appProject.android.defaultConfig
        targetOsVersion = "API Level ${conf.targetSdkVersion.apiLevel}"
    }
    commandLine "$flutterRoot/bin/dart", 'run', 'realm', 'metrics', '--verbose', '--flutter-root', flutterRoot, '--target-os-type', 'android', '--target-os-version', targetOsVersion
}

preBuild.dependsOn prePreBuild


