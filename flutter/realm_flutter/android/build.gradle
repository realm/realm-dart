group 'io.realm'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
		ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
	
	sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', "$buildDir/realm-generated"]
            }
            jniLibs.srcDirs += ["src/main/cpp/lib/"]
        }
    }
	
    lintOptions {
        disable 'InvalidPackage'
    }

    //We don't need native build for now. This will enable it.
    //externalNativeBuild {
    //    cmake {
    //        path "src/main/cpp/CMakeLists.txt"
    //    }
    //}
}

def getPaths() {
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
    }

    def flutterRoot = localProperties.getProperty('flutter.sdk')
    def dartExecutable = 'dart'
    if (flutterRoot != null) {
        dartExecutable = "${flutterRoot}${File.separator}bin${File.separator}${dartExecutable}"
    }

    //on Windows use flutter.bat instead
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        dartExecutable += '.bat'
    }

    return [flutterRoot, dartExecutable]
}

tasks.register("runMetrics", Exec) {
    outputs.upToDateWhen { false }

    try {
        def appProject = project.rootProject.subprojects.find { p -> p.name == 'app' }
        def (flutterRoot, dartExecutable) = getPaths()

        workingDir "${project.rootProject.projectDir}${File.separator}.."

        String targetOsVersion
        if (appProject != null) {
            def conf = appProject.android.defaultConfig
            targetOsVersion = "API Level ${conf.targetSdkVersion.apiLevel}"
        }
        commandLine dartExecutable, 'run', 'realm', 'metrics', '--flutter-root', flutterRoot, '--target-os-type', 'android', '--target-os-version', targetOsVersion
    }
    catch (e) {
        logger.error "Error running metrics command $e"
    }
}

tasks.register("downloadRealmBinaries", Exec) {
    outputs.upToDateWhen { false }

    def (flutterRoot, dartExecutable) = getPaths()
    workingDir "${project.rootProject.projectDir}${File.separator}.."
    commandLine dartExecutable, 'run', 'realm', 'install', '--target-os-type', 'android', '--flavor', 'flutter'
}

def getBundleId() {
    try {
        def pubSpecFilePath = "${project.rootProject.projectDir}${File.separator}..${File.separator}pubspec.yaml"
        logger.info "pubSpecFilePath is ${pubSpecFilePath}"
        def pubspecFile = new File("${project.rootProject.projectDir}${File.separator}..${File.separator}pubspec.yaml")
        if (pubspecFile.exists()) {
            def contents = pubspecFile.text
            logger.info contents
            def matches = contents =~ /name:[ \r\n\t]*([a-z0-9_]*)/
            def bundleId = matches[0][1]
            logger.info "bundleId is ${bundleId}"
            return bundleId
        }
    }
    catch (e) {
        logger.error "Error getting bundle id $e"
    }

    //fallback value
    return "realm_bundle_id";
}

tasks.register("generateRealmConfig", Copy) {
    outputs.upToDateWhen { false }
    
    def bundleId = getBundleId();
    from 'src/gen'
    into "$buildDir/realm-generated"
    filter { line -> line.replaceAll('realm_bundle_id', "${bundleId}") }
}

preBuild.dependsOn runMetrics, downloadRealmBinaries, generateRealmConfig