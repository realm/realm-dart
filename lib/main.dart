////////////////////////////////////////////////////////////////////////////////
//
// Copyright 2021 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

import 'dart:io';

import 'dart:ffi';
import 'dart:io' show Platform;

import 'realm.dart';

part 'main.g.dart';

// class My<T> {
//   My() {
//     T.runtimeType
//   }
// }

// class Car extends RealmObject {
//   /**
//    *  Autogenerated. Used from native code
//    */
//   Car._constructor() : super.constructor() {}

//   /**
//    * User supplied constructor for unmanged objects. The user can decide not to provide this constructor
//    */
//   Car() {}

//   @RealmProperty(type: 'string')
//   String get make => super["make"];
//   set make(String value) => super["make"] = value;
// }
class _Car {
  @RealmProperty()
  late String make;
}

//class Person extends RealmObject {}
class _Person {
  @RealmProperty()
  late String name; 
}

String _platformPath(String name, {String? path}) {
  if (path == null) path = "";
  if (Platform.isLinux || Platform.isAndroid)
    return path + "lib" + name + ".so";
  if (Platform.isMacOS) return path + "lib" + name + ".dylib";
  if (Platform.isWindows) return path + name + ".dll";
  throw Exception("Platform not implemented");
}

DynamicLibrary dlopenPlatformSpecific(String name, {String? path}) {
  String fullPath = _platformPath(name, path: path);
  return DynamicLibrary.open(fullPath);
}

void main() {
  if (IsFlutterPlatform) {
    final testLibrary = dlopenPlatformSpecific("realm_flutter");
    
    final initializeApi = testLibrary.lookupFunction<
        IntPtr Function(Pointer<Void>),
        int Function(Pointer<Void>)>("Dart_InitializeApiDL");
    print(initializeApi(NativeApi.initializeApiDLData) == 0);
  }


  //reflectClass(key)
  //var libs = currentMirrorSystem().libraries;
  // var car = Expando<Object>();
  // car.name = ;

  // dynamic car = Car();
  // car.name = "Car";
  // car.properties

  // car.properties = Map<String, dynamic>();
  // car.properties = {
  //     "make": "string",
  //     "model": "string",
  //     "kilometrs" : DynamicObject()
  // };

  // var schema = ObjectSchema(
  //   name: "Car",
  //   properties: SchemaDynamicObject({
  //     make" : "string",
  //     model
  //   })

  // );
  print("Current PID ${pid}");

  var config = new Configuration();
  config.schema.add(Car);

  //config.schema.addAll([Car, Person]);
  // config.schema.define<Car>()..define<Person>()..define<Person>();

  // config.schema.defineAll([Car, Person.]);
  //..define(Person);

  var realm = new Realm(config);

  realm.write(() {
    print("realm write callback");
    var car = realm.create(new Car()..make = "Audi");
    print("The car is ${car.make}");
    // car.make = "VW";
    // print("The car is ${car.make}");
  });

  var objects = realm.objects<Car>();
  var indexedCar = objects[0];
  print("The indexedCar is ${indexedCar.make}");

  print("Exit");
}