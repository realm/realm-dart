////////////////////////////////////////////////////////////////////////////////
//
// Copyright 2022 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
import 'native/realm_core.dart';

/// An enum containing the possible authentication providers. These have to manually be enabled for
/// your app before they can be used.
/// [Authentication Providers Docs](https://docs.mongodb.com/realm/authentication/providers/)
/// {@category Application}
enum AuthProvider {
  /// Mechanism for authenticating without credentials.
  anonymous,

  /// Mechanism for authenticating with an email and a password.
  emailPassword,

  /// Allow users to log in with JWT-based credentials generated by a service external to Realm.
  jwt,

  /// Mechanism for logging in with API keys generated by the client SDK.
  apiKey,

  /// A provider that is not among the well known provider types. This is most likely the result of the server
  /// introducing a new provider type that this version of the SDK doesn't know about.
  unknown,
}

/// A class, representing the credentials used for authenticating a [User]
class ApplicationCredentials {
  late final RealmAppCredentialsHandle _handle;
  late final String _token;
  late final String _additionalInfo;

  final AuthProvider provider;

  ApplicationCredentials(
    this.provider, {
    String token = "",
    String additionalInfo = "",
  })  : _token = token,
        _additionalInfo = additionalInfo,
        _handle = _createHandle(provider);

  static ApplicationCredentials anonymous() => ApplicationCredentials(AuthProvider.anonymous);

  static RealmAppCredentialsHandle _createHandle(AuthProvider provider) {
    RealmAppCredentialsHandle? handle;
    switch (provider) {
      case AuthProvider.anonymous:
        handle = realmCore.createAppCredentialsAnonymous();
        break;
      default:
        throw CredentialsException("Unsupported authentication provider.");
    }
    return handle;
  }
}

/// @nodoc
extension ApplicationCredentialsInternal on ApplicationCredentials {
  ///@nodoc
  RealmAppCredentialsHandle get handle => _handle;

  String get token => _token;
  String get additionalInfo => _additionalInfo;
}

/// An exception being thrown when creating [ApplicationCredentials] fails.
/// {@category Application}
class CredentialsException implements Exception {
  final String message;

  CredentialsException(this.message);

  @override
  String toString() {
    return "CredentialsException: $message";
  }
}
