// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// A Windows config for ffigen Usage: dart run ffigen --config windows.yaml
class RealmLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RealmLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RealmLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Get the VersionID of the current transaction.
  ///
  /// @param out_found True if version information is available. This requires an available Read or Write transaction.
  /// @param out_version The version of the current transaction. If `out_found` returns False, this returns (0,0).
  /// @return True if no exception occurred.
  bool realm_get_version_id(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_version_id_t> out_version,
  ) {
    return _realm_get_version_id(
          arg0,
          out_found,
          out_version,
        ) !=
        0;
  }

  late final _realm_get_version_id_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_version_id>>(
          'realm_get_version_id');
  late final _dart_realm_get_version_id _realm_get_version_id =
      _realm_get_version_id_ptr.asFunction<_dart_realm_get_version_id>();

  /// Get a string representing the version number of the Realm library.
  ///
  /// @return A null-terminated string.
  ffi.Pointer<ffi.Int8> realm_get_library_version() {
    return _realm_get_library_version();
  }

  late final _realm_get_library_version_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_library_version>>(
          'realm_get_library_version');
  late final _dart_realm_get_library_version _realm_get_library_version =
      _realm_get_library_version_ptr
          .asFunction<_dart_realm_get_library_version>();

  /// Get individual components of the version number of the Realm library.
  ///
  /// @param out_major The major version number (X.0.0).
  /// @param out_minor The minor version number (0.X.0).
  /// @param out_patch The patch version number (0.0.X).
  /// @param out_extra The extra version string (0.0.0-X).
  void realm_get_library_version_numbers(
    ffi.Pointer<ffi.Int32> out_major,
    ffi.Pointer<ffi.Int32> out_minor,
    ffi.Pointer<ffi.Int32> out_patch,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out_extra,
  ) {
    return _realm_get_library_version_numbers(
      out_major,
      out_minor,
      out_patch,
      out_extra,
    );
  }

  late final _realm_get_library_version_numbers_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_library_version_numbers>>(
          'realm_get_library_version_numbers');
  late final _dart_realm_get_library_version_numbers
      _realm_get_library_version_numbers =
      _realm_get_library_version_numbers_ptr
          .asFunction<_dart_realm_get_library_version_numbers>();

  /// Get the last error that happened on this thread.
  ///
  /// Errors are thread-local. Getting the error must happen on the same thread as
  /// the call that caused the error to occur. The error is specific to the current
  /// thread, and not the Realm instance for which the error occurred.
  ///
  /// Note: The error message in @a err will only be safe to use until the next API
  /// call is made on the current thread.
  ///
  /// Note: The error is not cleared by subsequent successful calls to this
  /// function, but it will be overwritten by subsequent failing calls to
  /// other library functions.
  ///
  /// Note: Calling this function does not clear the current last error.
  ///
  /// This function does not allocate any memory.
  ///
  /// @param err A pointer to a `realm_error_t` struct that will be populated with
  /// information about the last error, if there is one. May be NULL.
  /// @return True if an error occurred.
  bool realm_get_last_error(
    ffi.Pointer<realm_error_t> err,
  ) {
    return _realm_get_last_error(
          err,
        ) !=
        0;
  }

  late final _realm_get_last_error_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_last_error>>(
          'realm_get_last_error');
  late final _dart_realm_get_last_error _realm_get_last_error =
      _realm_get_last_error_ptr.asFunction<_dart_realm_get_last_error>();

  /// Get information about an async error, potentially coming from another thread.
  ///
  /// This function does not allocate any memory.
  ///
  /// @param err A pointer to a `realm_error_t` struct that will be populated with
  /// information about the error. May not be NULL.
  /// @see realm_get_last_error()
  void realm_get_async_error(
    ffi.Pointer<realm_async_error> err,
    ffi.Pointer<realm_error_t> out_err,
  ) {
    return _realm_get_async_error(
      err,
      out_err,
    );
  }

  late final _realm_get_async_error_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_async_error>>(
          'realm_get_async_error');
  late final _dart_realm_get_async_error _realm_get_async_error =
      _realm_get_async_error_ptr.asFunction<_dart_realm_get_async_error>();

  /// Convert the last error to `realm_async_error_t`, which can safely be passed
  /// between threads.
  ///
  /// Note: This function does not clear the last error.
  ///
  /// @return A non-null pointer if there was an error on this thread.
  /// @see realm_get_last_error()
  /// @see realm_get_async_error()
  /// @see realm_clear_last_error()
  ffi.Pointer<realm_async_error> realm_get_last_error_as_async_error() {
    return _realm_get_last_error_as_async_error();
  }

  late final _realm_get_last_error_as_async_error_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_last_error_as_async_error>>(
          'realm_get_last_error_as_async_error');
  late final _dart_realm_get_last_error_as_async_error
      _realm_get_last_error_as_async_error =
      _realm_get_last_error_as_async_error_ptr
          .asFunction<_dart_realm_get_last_error_as_async_error>();

  /// Clear the last error on the calling thread.
  ///
  /// Use this if the system has recovered from an error, e.g. by closing the
  /// offending Realm and reopening it, freeing up resources, or similar.
  ///
  /// @return True if an error was cleared.
  bool realm_clear_last_error() {
    return _realm_clear_last_error() != 0;
  }

  late final _realm_clear_last_error_ptr =
      _lookup<ffi.NativeFunction<_c_realm_clear_last_error>>(
          'realm_clear_last_error');
  late final _dart_realm_clear_last_error _realm_clear_last_error =
      _realm_clear_last_error_ptr.asFunction<_dart_realm_clear_last_error>();

  /// Free any Realm C Wrapper object.
  ///
  /// Note: Any pointer returned from a library function is owned by the caller.
  /// The caller is responsible for calling `realm_release()`. The only
  /// exception from this is C++ bridge functions that return `void*`, with
  /// the prefix `_realm`.
  ///
  /// Note: C++ destructors are typically `noexcept`, so it is likely that an
  /// exception will crash the process.
  ///
  /// @param ptr A pointer to a Realm C Wrapper object. May be NULL.
  void realm_release(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _realm_release(
      ptr,
    );
  }

  late final _realm_release_ptr =
      _lookup<ffi.NativeFunction<_c_realm_release>>('realm_release');
  late final _dart_realm_release _realm_release =
      _realm_release_ptr.asFunction<_dart_realm_release>();

  /// Clone a Realm C Wrapper object.
  ///
  /// If the object is not clonable, this function fails with RLM_ERR_NOT_CLONABLE.
  ///
  /// @return A pointer to an object of the same type as the input, or NULL if
  /// cloning failed.
  ffi.Pointer<ffi.Void> realm_clone(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_clone(
      arg0,
    );
  }

  late final _realm_clone_ptr =
      _lookup<ffi.NativeFunction<_c_realm_clone>>('realm_clone');
  late final _dart_realm_clone _realm_clone =
      _realm_clone_ptr.asFunction<_dart_realm_clone>();

  /// Return true if two API objects refer to the same underlying data. Objects
  /// with different types are never equal.
  ///
  /// Note: This function cannot be used with types that have value semantics, only
  /// opaque types that have object semantics.
  ///
  /// - `realm_t` objects are identical if they represent the same instance (not
  /// just if they represent the same file).
  /// - `realm_schema_t` objects are equal if the represented schemas are equal.
  /// - `realm_config_t` objects are equal if the configurations are equal.
  /// - `realm_object_t` objects are identical if they belong to the same realm
  /// and class, and have the same object key.
  /// - `realm_list_t` and other collection objects are identical if they come
  /// from the same object and property.
  /// - `realm_query_t` objects are never equal.
  /// - `realm_scheduler_t` objects are equal if they represent the same
  /// scheduler.
  /// - Query descriptor objects are equal if they represent equivalent
  /// descriptors.
  /// - `realm_async_error_t` objects are equal if they represent the same
  /// exception instance.
  ///
  /// This function cannot fail.
  bool realm_equals(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _realm_equals(
          arg0,
          arg1,
        ) !=
        0;
  }

  late final _realm_equals_ptr =
      _lookup<ffi.NativeFunction<_c_realm_equals>>('realm_equals');
  late final _dart_realm_equals _realm_equals =
      _realm_equals_ptr.asFunction<_dart_realm_equals>();

  /// True if a Realm C Wrapper object is "frozen" (immutable).
  ///
  /// Objects, collections, and results can be frozen. For all other types, this
  /// function always returns false.
  bool realm_is_frozen(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_is_frozen(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_frozen_ptr =
      _lookup<ffi.NativeFunction<_c_realm_is_frozen>>('realm_is_frozen');
  late final _dart_realm_is_frozen _realm_is_frozen =
      _realm_is_frozen_ptr.asFunction<_dart_realm_is_frozen>();

  /// Get a thread-safe reference representing the same underlying object as some
  /// API object.
  ///
  /// The thread safe reference can be passed to a different thread and resolved
  /// against a different `realm_t` instance, which succeeds if the underlying
  /// object still exists.
  ///
  /// The following types can produce thread safe references:
  ///
  /// - `realm_object_t`
  /// - `realm_results_t`
  /// - `realm_list_t`
  /// - `realm_t`
  ///
  /// This does not assume ownership of the object, except for `realm_t`, where the
  /// instance is transferred by value, and must be transferred back to the current
  /// thread to be used. Note that the `realm_thread_safe_reference_t` object must
  /// still be destroyed after having been converted into a `realm_t` object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_thread_safe_reference> realm_create_thread_safe_reference(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_create_thread_safe_reference(
      arg0,
    );
  }

  late final _realm_create_thread_safe_reference_ptr =
      _lookup<ffi.NativeFunction<_c_realm_create_thread_safe_reference>>(
          'realm_create_thread_safe_reference');
  late final _dart_realm_create_thread_safe_reference
      _realm_create_thread_safe_reference =
      _realm_create_thread_safe_reference_ptr
          .asFunction<_dart_realm_create_thread_safe_reference>();

  /// Allocate a new configuration with default options.
  ffi.Pointer<realm_config> realm_config_new() {
    return _realm_config_new();
  }

  late final _realm_config_new_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_new>>('realm_config_new');
  late final _dart_realm_config_new _realm_config_new =
      _realm_config_new_ptr.asFunction<_dart_realm_config_new>();

  /// Get the path of the realm being opened.
  ///
  /// This function cannot fail.
  ffi.Pointer<ffi.Int8> realm_config_get_path(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_path(
      arg0,
    );
  }

  late final _realm_config_get_path_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_path>>(
          'realm_config_get_path');
  late final _dart_realm_config_get_path _realm_config_get_path =
      _realm_config_get_path_ptr.asFunction<_dart_realm_config_get_path>();

  /// Set the path of the realm being opened.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_path(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _realm_config_set_path(
      arg0,
      path,
    );
  }

  late final _realm_config_set_path_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_path>>(
          'realm_config_set_path');
  late final _dart_realm_config_set_path _realm_config_set_path =
      _realm_config_set_path_ptr.asFunction<_dart_realm_config_set_path>();

  /// Get the encryption key for the realm.
  ///
  /// The output buffer must be at least 64 bytes.
  ///
  /// @returns The length of the encryption key (0 or 64)
  int realm_config_get_encryption_key(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.Uint8> out_key,
  ) {
    return _realm_config_get_encryption_key(
      arg0,
      out_key,
    );
  }

  late final _realm_config_get_encryption_key_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_encryption_key>>(
          'realm_config_get_encryption_key');
  late final _dart_realm_config_get_encryption_key
      _realm_config_get_encryption_key = _realm_config_get_encryption_key_ptr
          .asFunction<_dart_realm_config_get_encryption_key>();

  /// Set the encryption key for the realm.
  ///
  /// The key must be either 64 bytes long or have length zero (in which case
  /// encryption is disabled).
  ///
  /// This function may fail if the encryption key has the wrong length.
  bool realm_config_set_encryption_key(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.Uint8> key,
    int key_size,
  ) {
    return _realm_config_set_encryption_key(
          arg0,
          key,
          key_size,
        ) !=
        0;
  }

  late final _realm_config_set_encryption_key_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_encryption_key>>(
          'realm_config_set_encryption_key');
  late final _dart_realm_config_set_encryption_key
      _realm_config_set_encryption_key = _realm_config_set_encryption_key_ptr
          .asFunction<_dart_realm_config_set_encryption_key>();

  /// Get the schema for this realm.
  ///
  /// Note: The caller obtains ownership of the returned value, and must manually
  /// free it by calling `realm_release()`.
  ///
  /// @return A schema object, or NULL if the schema is not set (empty).
  ffi.Pointer<realm_schema> realm_config_get_schema(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_schema(
      arg0,
    );
  }

  late final _realm_config_get_schema_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_schema>>(
          'realm_config_get_schema');
  late final _dart_realm_config_get_schema _realm_config_get_schema =
      _realm_config_get_schema_ptr.asFunction<_dart_realm_config_get_schema>();

  /// Set the schema object for this realm.
  ///
  /// This does not take ownership of the schema object, and it should be released
  /// afterwards.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  ///
  /// @param schema The schema object. May be NULL, which means an empty schema.
  void realm_config_set_schema(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<realm_schema> schema,
  ) {
    return _realm_config_set_schema(
      arg0,
      schema,
    );
  }

  late final _realm_config_set_schema_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_schema>>(
          'realm_config_set_schema');
  late final _dart_realm_config_set_schema _realm_config_set_schema =
      _realm_config_set_schema_ptr.asFunction<_dart_realm_config_set_schema>();

  /// Get the schema version of the schema.
  ///
  /// This function cannot fail.
  int realm_config_get_schema_version(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_schema_version(
      arg0,
    );
  }

  late final _realm_config_get_schema_version_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_schema_version>>(
          'realm_config_get_schema_version');
  late final _dart_realm_config_get_schema_version
      _realm_config_get_schema_version = _realm_config_get_schema_version_ptr
          .asFunction<_dart_realm_config_get_schema_version>();

  /// Set the schema version of the schema.
  ///
  /// This function cannot fail.
  void realm_config_set_schema_version(
    ffi.Pointer<realm_config> arg0,
    int version,
  ) {
    return _realm_config_set_schema_version(
      arg0,
      version,
    );
  }

  late final _realm_config_set_schema_version_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_schema_version>>(
          'realm_config_set_schema_version');
  late final _dart_realm_config_set_schema_version
      _realm_config_set_schema_version = _realm_config_set_schema_version_ptr
          .asFunction<_dart_realm_config_set_schema_version>();

  /// Get the schema mode.
  ///
  /// This function cannot fail.
  int realm_config_get_schema_mode(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_schema_mode(
      arg0,
    );
  }

  late final _realm_config_get_schema_mode_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_schema_mode>>(
          'realm_config_get_schema_mode');
  late final _dart_realm_config_get_schema_mode _realm_config_get_schema_mode =
      _realm_config_get_schema_mode_ptr
          .asFunction<_dart_realm_config_get_schema_mode>();

  /// Set the schema mode.
  ///
  /// This function cannot fail.
  void realm_config_set_schema_mode(
    ffi.Pointer<realm_config> arg0,
    int arg1,
  ) {
    return _realm_config_set_schema_mode(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_schema_mode_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_schema_mode>>(
          'realm_config_set_schema_mode');
  late final _dart_realm_config_set_schema_mode _realm_config_set_schema_mode =
      _realm_config_set_schema_mode_ptr
          .asFunction<_dart_realm_config_set_schema_mode>();

  /// Set the migration callback.
  ///
  /// The migration function is called during a migration for schema modes
  /// `RLM_SCHEMA_MODE_AUTOMATIC` and `RLM_SCHEMA_MODE_MANUAL`. The callback is
  /// invoked with a realm instance before the migration and the realm instance
  /// that is currently performing the migration.
  ///
  /// This function cannot fail.
  void realm_config_set_migration_function(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_migration_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_migration_function_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_migration_function>>(
          'realm_config_set_migration_function');
  late final _dart_realm_config_set_migration_function
      _realm_config_set_migration_function =
      _realm_config_set_migration_function_ptr
          .asFunction<_dart_realm_config_set_migration_function>();

  /// Set the data initialization function.
  ///
  /// The callback is invoked the first time the schema is created, such that the
  /// user can perform one-time initialization of the data in the realm.
  ///
  /// The realm instance passed to the callback is in a write transaction.
  ///
  /// This function cannot fail.
  void realm_config_set_data_initialization_function(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>> arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_data_initialization_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_data_initialization_function_ptr = _lookup<
          ffi.NativeFunction<_c_realm_config_set_data_initialization_function>>(
      'realm_config_set_data_initialization_function');
  late final _dart_realm_config_set_data_initialization_function
      _realm_config_set_data_initialization_function =
      _realm_config_set_data_initialization_function_ptr
          .asFunction<_dart_realm_config_set_data_initialization_function>();

  /// Set the should-compact-on-launch callback.
  ///
  /// The callback is invoked the first time a realm file is opened in this process
  /// to decide whether the realm file should be compacted.
  ///
  /// Note: If another process has the realm file open, it will not be compacted.
  ///
  /// This function cannot fail.
  void realm_config_set_should_compact_on_launch_function(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.NativeFunction<realm_should_compact_on_launch_func_t>> arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_should_compact_on_launch_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_should_compact_on_launch_function_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_config_set_should_compact_on_launch_function>>(
      'realm_config_set_should_compact_on_launch_function');
  late final _dart_realm_config_set_should_compact_on_launch_function
      _realm_config_set_should_compact_on_launch_function =
      _realm_config_set_should_compact_on_launch_function_ptr.asFunction<
          _dart_realm_config_set_should_compact_on_launch_function>();

  /// True if file format upgrades on open are disabled.
  ///
  /// This function cannot fail.
  bool realm_config_get_disable_format_upgrade(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_disable_format_upgrade(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_disable_format_upgrade_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_disable_format_upgrade>>(
          'realm_config_get_disable_format_upgrade');
  late final _dart_realm_config_get_disable_format_upgrade
      _realm_config_get_disable_format_upgrade =
      _realm_config_get_disable_format_upgrade_ptr
          .asFunction<_dart_realm_config_get_disable_format_upgrade>();

  /// Disable file format upgrade on open (default: false).
  ///
  /// If a migration is needed to open the realm file with the provided schema, an
  /// error is thrown rather than automatically performing the migration.
  ///
  /// This function cannot fail.
  void realm_config_set_disable_format_upgrade(
    ffi.Pointer<realm_config> arg0,
    bool arg1,
  ) {
    return _realm_config_set_disable_format_upgrade(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_disable_format_upgrade_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_disable_format_upgrade>>(
          'realm_config_set_disable_format_upgrade');
  late final _dart_realm_config_set_disable_format_upgrade
      _realm_config_set_disable_format_upgrade =
      _realm_config_set_disable_format_upgrade_ptr
          .asFunction<_dart_realm_config_set_disable_format_upgrade>();

  /// True if automatic change notifications should be generated.
  ///
  /// This function cannot fail.
  bool realm_config_get_automatic_change_notifications(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_automatic_change_notifications(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_automatic_change_notifications_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_config_get_automatic_change_notifications>>(
      'realm_config_get_automatic_change_notifications');
  late final _dart_realm_config_get_automatic_change_notifications
      _realm_config_get_automatic_change_notifications =
      _realm_config_get_automatic_change_notifications_ptr
          .asFunction<_dart_realm_config_get_automatic_change_notifications>();

  /// Automatically generated change notifications (default: true).
  ///
  /// This function cannot fail.
  void realm_config_set_automatic_change_notifications(
    ffi.Pointer<realm_config> arg0,
    bool arg1,
  ) {
    return _realm_config_set_automatic_change_notifications(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_automatic_change_notifications_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_config_set_automatic_change_notifications>>(
      'realm_config_set_automatic_change_notifications');
  late final _dart_realm_config_set_automatic_change_notifications
      _realm_config_set_automatic_change_notifications =
      _realm_config_set_automatic_change_notifications_ptr
          .asFunction<_dart_realm_config_set_automatic_change_notifications>();

  /// The scheduler which this realm should be bound to (default: NULL).
  ///
  /// If NULL, the realm will be bound to the default scheduler for the current thread.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_scheduler(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<realm_scheduler> arg1,
  ) {
    return _realm_config_set_scheduler(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_scheduler_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_scheduler>>(
          'realm_config_set_scheduler');
  late final _dart_realm_config_set_scheduler _realm_config_set_scheduler =
      _realm_config_set_scheduler_ptr
          .asFunction<_dart_realm_config_set_scheduler>();

  /// Sync configuration for this realm (default: NULL).
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_sync_config(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<realm_sync_config> arg1,
  ) {
    return _realm_config_set_sync_config(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_sync_config_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_sync_config>>(
          'realm_config_set_sync_config');
  late final _dart_realm_config_set_sync_config _realm_config_set_sync_config =
      _realm_config_set_sync_config_ptr
          .asFunction<_dart_realm_config_set_sync_config>();

  /// Get whether the realm file should be forcibly initialized as a synchronized.
  ///
  /// This function cannot fail.
  bool realm_config_get_force_sync_history(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_force_sync_history(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_force_sync_history_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_get_force_sync_history>>(
          'realm_config_get_force_sync_history');
  late final _dart_realm_config_get_force_sync_history
      _realm_config_get_force_sync_history =
      _realm_config_get_force_sync_history_ptr
          .asFunction<_dart_realm_config_get_force_sync_history>();

  /// Force the realm file to be initialized as a synchronized realm, even if no
  /// sync config is provided (default: false).
  ///
  /// This function cannot fail.
  void realm_config_set_force_sync_history(
    ffi.Pointer<realm_config> arg0,
    bool arg1,
  ) {
    return _realm_config_set_force_sync_history(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_force_sync_history_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_force_sync_history>>(
          'realm_config_set_force_sync_history');
  late final _dart_realm_config_set_force_sync_history
      _realm_config_set_force_sync_history =
      _realm_config_set_force_sync_history_ptr
          .asFunction<_dart_realm_config_set_force_sync_history>();

  /// Set the audit interface for the realm (unimplemented).
  bool realm_config_set_audit_factory(
    ffi.Pointer<realm_config> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _realm_config_set_audit_factory(
          arg0,
          arg1,
        ) !=
        0;
  }

  late final _realm_config_set_audit_factory_ptr =
      _lookup<ffi.NativeFunction<_c_realm_config_set_audit_factory>>(
          'realm_config_set_audit_factory');
  late final _dart_realm_config_set_audit_factory
      _realm_config_set_audit_factory = _realm_config_set_audit_factory_ptr
          .asFunction<_dart_realm_config_set_audit_factory>();

  /// Get maximum number of active versions in the realm file allowed before an
  /// exception is thrown.
  ///
  /// This function cannot fail.
  int realm_config_get_max_number_of_active_versions(
    ffi.Pointer<realm_config> arg0,
  ) {
    return _realm_config_get_max_number_of_active_versions(
      arg0,
    );
  }

  late final _realm_config_get_max_number_of_active_versions_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_config_get_max_number_of_active_versions>>(
      'realm_config_get_max_number_of_active_versions');
  late final _dart_realm_config_get_max_number_of_active_versions
      _realm_config_get_max_number_of_active_versions =
      _realm_config_get_max_number_of_active_versions_ptr
          .asFunction<_dart_realm_config_get_max_number_of_active_versions>();

  /// Set maximum number of active versions in the realm file allowed before an
  /// exception is thrown (default: UINT64_MAX).
  ///
  /// This function cannot fail.
  void realm_config_set_max_number_of_active_versions(
    ffi.Pointer<realm_config> arg0,
    int arg1,
  ) {
    return _realm_config_set_max_number_of_active_versions(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_max_number_of_active_versions_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_config_set_max_number_of_active_versions>>(
      'realm_config_set_max_number_of_active_versions');
  late final _dart_realm_config_set_max_number_of_active_versions
      _realm_config_set_max_number_of_active_versions =
      _realm_config_set_max_number_of_active_versions_ptr
          .asFunction<_dart_realm_config_set_max_number_of_active_versions>();

  /// Create a custom scheduler object from callback functions.
  ///
  /// @param userdata Pointer passed to all callbacks.
  /// @param notify Function to trigger a call to the registered callback on the
  /// scheduler's event loop. This function must be thread-safe, or
  /// NULL, in which case the scheduler is considered unable to
  /// deliver notifications.
  /// @param is_on_thread Function to return true if called from the same thread as
  /// the scheduler. This function must be thread-safe.
  /// @param can_deliver_notifications Function to return true if the scheduler can
  /// support `notify()`. This function does not
  /// need to be thread-safe.
  /// @param set_notify_callback Function to accept a callback that will be invoked
  /// by `notify()` on the scheduler's event loop. This
  /// function does not need to be thread-safe.
  ffi.Pointer<realm_scheduler> realm_scheduler_new(
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> notify,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_on_thread_func_t>>
        is_on_thread,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_same_as_func_t>>
        is_same_as,
    ffi.Pointer<
            ffi.NativeFunction<
                realm_scheduler_can_deliver_notifications_func_t>>
        can_deliver_notifications,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_set_notify_callback_func_t>>
        set_notify_callback,
  ) {
    return _realm_scheduler_new(
      userdata,
      arg1,
      notify,
      is_on_thread,
      is_same_as,
      can_deliver_notifications,
      set_notify_callback,
    );
  }

  late final _realm_scheduler_new_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_new>>(
          'realm_scheduler_new');
  late final _dart_realm_scheduler_new _realm_scheduler_new =
      _realm_scheduler_new_ptr.asFunction<_dart_realm_scheduler_new>();

  /// Create an instance of the default scheduler for the current platform,
  /// normally confined to the calling thread.
  ffi.Pointer<realm_scheduler> realm_scheduler_make_default() {
    return _realm_scheduler_make_default();
  }

  late final _realm_scheduler_make_default_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_make_default>>(
          'realm_scheduler_make_default');
  late final _dart_realm_scheduler_make_default _realm_scheduler_make_default =
      _realm_scheduler_make_default_ptr
          .asFunction<_dart_realm_scheduler_make_default>();

  /// Get the scheduler used by frozen realms. This scheduler does not support
  /// notifications, and does not perform any thread checking.
  ///
  /// This function is thread-safe, and cannot fail.
  ffi.Pointer<realm_scheduler> realm_scheduler_get_frozen() {
    return _realm_scheduler_get_frozen();
  }

  late final _realm_scheduler_get_frozen_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_get_frozen>>(
          'realm_scheduler_get_frozen');
  late final _dart_realm_scheduler_get_frozen _realm_scheduler_get_frozen =
      _realm_scheduler_get_frozen_ptr
          .asFunction<_dart_realm_scheduler_get_frozen>();

  /// Returns true if there is a default scheduler implementation for the current
  /// platform, or one has been set with `realm_scheduler_set_default_factory()`.
  ///
  /// If there is no default factory, and no scheduler is provided in the config,
  /// `realm_open()` will fail. Note that `realm_scheduler_get_frozen()` always
  /// returns a valid scheduler.
  ///
  /// This function is thread-safe, and cannot fail.
  bool realm_scheduler_has_default_factory() {
    return _realm_scheduler_has_default_factory() != 0;
  }

  late final _realm_scheduler_has_default_factory_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_has_default_factory>>(
          'realm_scheduler_has_default_factory');
  late final _dart_realm_scheduler_has_default_factory
      _realm_scheduler_has_default_factory =
      _realm_scheduler_has_default_factory_ptr
          .asFunction<_dart_realm_scheduler_has_default_factory>();

  /// For platforms with no default scheduler implementation, register a factory
  /// function which can produce custom schedulers. If there is a platform-specific
  /// scheduler, this function will fail. If a custom scheduler is desired for
  /// platforms that already have a default scheduler implementation, the caller
  /// must call `realm_open()` with a config that indicates the desired scheduler.
  ///
  /// The provided callback may produce a scheduler by calling
  /// `realm_scheduler_new()`.
  ///
  /// This function is thread-safe, but should generally only be called once.
  bool realm_scheduler_set_default_factory(
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_default_factory_func_t>>
        arg2,
  ) {
    return _realm_scheduler_set_default_factory(
          userdata,
          arg1,
          arg2,
        ) !=
        0;
  }

  late final _realm_scheduler_set_default_factory_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_set_default_factory>>(
          'realm_scheduler_set_default_factory');
  late final _dart_realm_scheduler_set_default_factory
      _realm_scheduler_set_default_factory =
      _realm_scheduler_set_default_factory_ptr
          .asFunction<_dart_realm_scheduler_set_default_factory>();

  /// Trigger a call to the registered notifier callback on the scheduler's event loop.
  ///
  /// This function is thread-safe.
  void realm_scheduler_notify(
    ffi.Pointer<realm_scheduler> arg0,
  ) {
    return _realm_scheduler_notify(
      arg0,
    );
  }

  late final _realm_scheduler_notify_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_notify>>(
          'realm_scheduler_notify');
  late final _dart_realm_scheduler_notify _realm_scheduler_notify =
      _realm_scheduler_notify_ptr.asFunction<_dart_realm_scheduler_notify>();

  /// Returns true if the caller is currently running on the scheduler's thread.
  ///
  /// This function is thread-safe.
  bool realm_scheduler_is_on_thread(
    ffi.Pointer<realm_scheduler> arg0,
  ) {
    return _realm_scheduler_is_on_thread(
          arg0,
        ) !=
        0;
  }

  late final _realm_scheduler_is_on_thread_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_is_on_thread>>(
          'realm_scheduler_is_on_thread');
  late final _dart_realm_scheduler_is_on_thread _realm_scheduler_is_on_thread =
      _realm_scheduler_is_on_thread_ptr
          .asFunction<_dart_realm_scheduler_is_on_thread>();

  /// Returns true if the scheduler is able to deliver notifications.
  ///
  /// A false return value may indicate that notifications are not applicable for
  /// the scheduler, not implementable, or a temporary inability to deliver
  /// notifications.
  ///
  /// This function is not thread-safe.
  bool realm_scheduler_can_deliver_notifications(
    ffi.Pointer<realm_scheduler> arg0,
  ) {
    return _realm_scheduler_can_deliver_notifications(
          arg0,
        ) !=
        0;
  }

  late final _realm_scheduler_can_deliver_notifications_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_can_deliver_notifications>>(
          'realm_scheduler_can_deliver_notifications');
  late final _dart_realm_scheduler_can_deliver_notifications
      _realm_scheduler_can_deliver_notifications =
      _realm_scheduler_can_deliver_notifications_ptr
          .asFunction<_dart_realm_scheduler_can_deliver_notifications>();

  /// Set the callback that will be invoked by `realm_scheduler_notify()`.
  ///
  /// This function is not thread-safe.
  bool realm_scheduler_set_notify_callback(
    ffi.Pointer<realm_scheduler> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
    ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> arg3,
  ) {
    return _realm_scheduler_set_notify_callback(
          arg0,
          userdata,
          arg2,
          arg3,
        ) !=
        0;
  }

  late final _realm_scheduler_set_notify_callback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_scheduler_set_notify_callback>>(
          'realm_scheduler_set_notify_callback');
  late final _dart_realm_scheduler_set_notify_callback
      _realm_scheduler_set_notify_callback =
      _realm_scheduler_set_notify_callback_ptr
          .asFunction<_dart_realm_scheduler_set_notify_callback>();

  /// Open a Realm file.
  ///
  /// @param config Realm configuration. If the Realm is already opened on another
  /// thread, validate that the given configuration is compatible
  /// with the existing one.
  /// @return If successful, the Realm object. Otherwise, NULL.
  ffi.Pointer<shared_realm> realm_open(
    ffi.Pointer<realm_config> config,
  ) {
    return _realm_open(
      config,
    );
  }

  late final _realm_open_ptr =
      _lookup<ffi.NativeFunction<_c_realm_open>>('realm_open');
  late final _dart_realm_open _realm_open =
      _realm_open_ptr.asFunction<_dart_realm_open>();

  /// Create a `realm_t` object from a thread-safe reference to the same realm.
  ///
  /// @param tsr Thread-safe reference object created by calling
  /// `realm_get_thread_safe_reference()` with a `realm_t` instance.
  /// @param scheduler The scheduler to use for the new `realm_t` instance. May be
  /// NULL, in which case the default scheduler for the current
  /// thread is used.
  /// @return A non-null pointer if no error occurred.
  ffi.Pointer<shared_realm> realm_from_thread_safe_reference(
    ffi.Pointer<realm_thread_safe_reference> tsr,
    ffi.Pointer<realm_scheduler> scheduler,
  ) {
    return _realm_from_thread_safe_reference(
      tsr,
      scheduler,
    );
  }

  late final _realm_from_thread_safe_reference_ptr =
      _lookup<ffi.NativeFunction<_c_realm_from_thread_safe_reference>>(
          'realm_from_thread_safe_reference');
  late final _dart_realm_from_thread_safe_reference
      _realm_from_thread_safe_reference = _realm_from_thread_safe_reference_ptr
          .asFunction<_dart_realm_from_thread_safe_reference>();

  /// Forcibly close a Realm file.
  ///
  /// Note that this invalidates all Realm instances for the same path.
  ///
  /// The Realm will be automatically closed when the last reference is released,
  /// including references to objects within the Realm.
  ///
  /// @return True if no exception occurred.
  bool realm_close(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_close(
          arg0,
        ) !=
        0;
  }

  late final _realm_close_ptr =
      _lookup<ffi.NativeFunction<_c_realm_close>>('realm_close');
  late final _dart_realm_close _realm_close =
      _realm_close_ptr.asFunction<_dart_realm_close>();

  /// True if the Realm file is closed.
  ///
  /// This function cannot fail.
  bool realm_is_closed(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_is_closed(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_closed_ptr =
      _lookup<ffi.NativeFunction<_c_realm_is_closed>>('realm_is_closed');
  late final _dart_realm_is_closed _realm_is_closed =
      _realm_is_closed_ptr.asFunction<_dart_realm_is_closed>();

  /// Begin a read transaction for the Realm file.
  ///
  /// @return True if no exception occurred.
  bool realm_begin_read(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_begin_read(
          arg0,
        ) !=
        0;
  }

  late final _realm_begin_read_ptr =
      _lookup<ffi.NativeFunction<_c_realm_begin_read>>('realm_begin_read');
  late final _dart_realm_begin_read _realm_begin_read =
      _realm_begin_read_ptr.asFunction<_dart_realm_begin_read>();

  /// Begin a write transaction for the Realm file.
  ///
  /// @return True if no exception occurred.
  bool realm_begin_write(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_begin_write(
          arg0,
        ) !=
        0;
  }

  late final _realm_begin_write_ptr =
      _lookup<ffi.NativeFunction<_c_realm_begin_write>>('realm_begin_write');
  late final _dart_realm_begin_write _realm_begin_write =
      _realm_begin_write_ptr.asFunction<_dart_realm_begin_write>();

  /// Return true if the realm is in a write transaction.
  ///
  /// This function cannot fail.
  bool realm_is_writable(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_is_writable(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_writable_ptr =
      _lookup<ffi.NativeFunction<_c_realm_is_writable>>('realm_is_writable');
  late final _dart_realm_is_writable _realm_is_writable =
      _realm_is_writable_ptr.asFunction<_dart_realm_is_writable>();

  /// Commit a write transaction.
  ///
  /// @return True if the commit succeeded and no exceptions were thrown.
  bool realm_commit(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_commit(
          arg0,
        ) !=
        0;
  }

  late final _realm_commit_ptr =
      _lookup<ffi.NativeFunction<_c_realm_commit>>('realm_commit');
  late final _dart_realm_commit _realm_commit =
      _realm_commit_ptr.asFunction<_dart_realm_commit>();

  /// Roll back a write transaction.
  ///
  /// @return True if the rollback succeeded and no exceptions were thrown.
  bool realm_rollback(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_rollback(
          arg0,
        ) !=
        0;
  }

  late final _realm_rollback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_rollback>>('realm_rollback');
  late final _dart_realm_rollback _realm_rollback =
      _realm_rollback_ptr.asFunction<_dart_realm_rollback>();

  /// Refresh the view of the realm file.
  ///
  /// If another process or thread has made changes to the realm file, this causes
  /// those changes to become visible in this realm instance.
  ///
  /// This calls `advance_read()` at the Core layer.
  ///
  /// @return True if the realm was successfully refreshed and no exceptions were
  /// thrown.
  bool realm_refresh(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_refresh(
          arg0,
        ) !=
        0;
  }

  late final _realm_refresh_ptr =
      _lookup<ffi.NativeFunction<_c_realm_refresh>>('realm_refresh');
  late final _dart_realm_refresh _realm_refresh =
      _realm_refresh_ptr.asFunction<_dart_realm_refresh>();

  /// Produce a frozen view of this realm.
  ///
  /// @return A non-NULL realm instance representing the frozen state.
  ffi.Pointer<shared_realm> realm_freeze(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_freeze(
      arg0,
    );
  }

  late final _realm_freeze_ptr =
      _lookup<ffi.NativeFunction<_c_realm_freeze>>('realm_freeze');
  late final _dart_realm_freeze _realm_freeze =
      _realm_freeze_ptr.asFunction<_dart_realm_freeze>();

  /// Vacuum the free space from the realm file, reducing its file size.
  ///
  /// @return True if compaction was successful and no exceptions were thrown.
  bool realm_compact(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<ffi.Uint8> did_compact,
  ) {
    return _realm_compact(
          arg0,
          did_compact,
        ) !=
        0;
  }

  late final _realm_compact_ptr =
      _lookup<ffi.NativeFunction<_c_realm_compact>>('realm_compact');
  late final _dart_realm_compact _realm_compact =
      _realm_compact_ptr.asFunction<_dart_realm_compact>();

  /// Create a new schema from classes and their properties.
  ///
  /// Note: This function does not validate the schema.
  ///
  /// Note: `realm_class_key_t` and `realm_property_key_t` values inside
  /// `realm_class_info_t` and `realm_property_info_t` are unused when
  /// defining the schema. Call `realm_get_schema()` to obtain the values for
  /// these fields in an open realm.
  ///
  /// @return True if allocation of the schema structure succeeded.
  ffi.Pointer<realm_schema> realm_schema_new(
    ffi.Pointer<realm_class_info_t> classes,
    int num_classes,
    ffi.Pointer<ffi.Pointer<realm_property_info_t>> class_properties,
  ) {
    return _realm_schema_new(
      classes,
      num_classes,
      class_properties,
    );
  }

  late final _realm_schema_new_ptr =
      _lookup<ffi.NativeFunction<_c_realm_schema_new>>('realm_schema_new');
  late final _dart_realm_schema_new _realm_schema_new =
      _realm_schema_new_ptr.asFunction<_dart_realm_schema_new>();

  /// Get the schema for this realm.
  ///
  /// Note: The returned value is allocated by this function, so `realm_release()`
  /// must be called on it.
  ffi.Pointer<realm_schema> realm_get_schema(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_get_schema(
      arg0,
    );
  }

  late final _realm_get_schema_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_schema>>('realm_get_schema');
  late final _dart_realm_get_schema _realm_get_schema =
      _realm_get_schema_ptr.asFunction<_dart_realm_get_schema>();

  /// Update the schema of an open realm.
  ///
  /// This is equivalent to calling `realm_update_schema_advanced(realm, schema, 0,
  /// NULL, NULL, NULL, NULL, false)`.
  bool realm_update_schema(
    ffi.Pointer<shared_realm> realm,
    ffi.Pointer<realm_schema> schema,
  ) {
    return _realm_update_schema(
          realm,
          schema,
        ) !=
        0;
  }

  late final _realm_update_schema_ptr =
      _lookup<ffi.NativeFunction<_c_realm_update_schema>>(
          'realm_update_schema');
  late final _dart_realm_update_schema _realm_update_schema =
      _realm_update_schema_ptr.asFunction<_dart_realm_update_schema>();

  /// Update the schema of an open realm, with options to customize certain steps
  /// of the process.
  ///
  /// @param realm The realm for which the schema should be updated.
  /// @param schema The new schema for the realm. If the schema is the same the
  /// existing schema, this function does nothing.
  /// @param version The version of the new schema.
  /// @param migration_func Callback to perform the migration. Has no effect if the
  /// Realm is opened with `RLM_SCHEMA_MODE_ADDITIVE`.
  /// @param migration_func_userdata Userdata pointer to pass to `migration_func`.
  /// @param data_init_func Callback to perform initialization of the data in the
  /// Realm if it is opened for the first time (i.e., it has
  /// no previous schema version).
  /// @param data_init_func_userdata Userdata pointer to pass to `data_init_func`.
  /// @param is_in_transaction Pass true if the realm is already in a write
  /// transaction. Otherwise, if the migration requires a
  /// write transaction, this function will perform the
  /// migration in its own write transaction.
  bool realm_update_schema_advanced(
    ffi.Pointer<shared_realm> realm,
    ffi.Pointer<realm_schema> schema,
    int version,
    ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> migration_func,
    ffi.Pointer<ffi.Void> migration_func_userdata,
    ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>>
        data_init_func,
    ffi.Pointer<ffi.Void> data_init_func_userdata,
    bool is_in_transaction,
  ) {
    return _realm_update_schema_advanced(
          realm,
          schema,
          version,
          migration_func,
          migration_func_userdata,
          data_init_func,
          data_init_func_userdata,
          is_in_transaction ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_update_schema_advanced_ptr =
      _lookup<ffi.NativeFunction<_c_realm_update_schema_advanced>>(
          'realm_update_schema_advanced');
  late final _dart_realm_update_schema_advanced _realm_update_schema_advanced =
      _realm_update_schema_advanced_ptr
          .asFunction<_dart_realm_update_schema_advanced>();

  /// Validate the schema.
  ///
  /// @param validation_mode A bitwise combination of values from the
  /// enum realm_schema_validation_mode.
  ///
  /// @return True if the schema passed validation. If validation failed,
  /// `realm_get_last_error()` will produce an error describing the
  /// validation failure.
  bool realm_schema_validate(
    ffi.Pointer<realm_schema> arg0,
    int validation_mode,
  ) {
    return _realm_schema_validate(
          arg0,
          validation_mode,
        ) !=
        0;
  }

  late final _realm_schema_validate_ptr =
      _lookup<ffi.NativeFunction<_c_realm_schema_validate>>(
          'realm_schema_validate');
  late final _dart_realm_schema_validate _realm_schema_validate =
      _realm_schema_validate_ptr.asFunction<_dart_realm_schema_validate>();

  /// Return the number of classes in the Realm's schema.
  ///
  /// This cannot fail.
  int realm_get_num_classes(
    ffi.Pointer<shared_realm> arg0,
  ) {
    return _realm_get_num_classes(
      arg0,
    );
  }

  late final _realm_get_num_classes_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_num_classes>>(
          'realm_get_num_classes');
  late final _dart_realm_get_num_classes _realm_get_num_classes =
      _realm_get_num_classes_ptr.asFunction<_dart_realm_get_num_classes>();

  /// Get the table keys for classes in the schema.
  ///
  /// @param out_keys An array that will contain the keys of each class in the
  /// schema. May be NULL, in which case `out_n` can be used to
  /// determine the number of classes in the schema.
  /// @param max The maximum number of keys to write to `out_keys`.
  /// @param out_n The actual number of classes. May be NULL.
  /// @return True if no exception occurred.
  bool realm_get_class_keys(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<ffi.Uint32> out_keys,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_class_keys(
          arg0,
          out_keys,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_class_keys_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_class_keys>>(
          'realm_get_class_keys');
  late final _dart_realm_get_class_keys _realm_get_class_keys =
      _realm_get_class_keys_ptr.asFunction<_dart_realm_get_class_keys>();

  /// Find a by the name of @a name.
  ///
  /// @param name The name of the class.
  /// @param out_found Set to true if the class was found and no error occurred.
  /// Otherwise, false. May not be NULL.
  /// @param out_class_info A pointer to a `realm_class_info_t` that will be
  /// populated with information about the class. May be
  /// NULL.
  /// @return True if no exception occurred.
  bool realm_find_class(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_class_info_t> out_class_info,
  ) {
    return _realm_find_class(
          arg0,
          name,
          out_found,
          out_class_info,
        ) !=
        0;
  }

  late final _realm_find_class_ptr =
      _lookup<ffi.NativeFunction<_c_realm_find_class>>('realm_find_class');
  late final _dart_realm_find_class _realm_find_class =
      _realm_find_class_ptr.asFunction<_dart_realm_find_class>();

  /// Get the class with @a key from the schema.
  ///
  /// Passing an invalid @a key for this schema is considered an error.
  ///
  /// @param key The key of the class, as discovered by `realm_get_class_keys()`.
  /// @param out_class_info A pointer to a `realm_class_info_t` that will be
  /// populated with the information of the class. May be
  /// NULL, though that's kind of pointless.
  /// @return True if no exception occurred.
  bool realm_get_class(
    ffi.Pointer<shared_realm> arg0,
    int key,
    ffi.Pointer<realm_class_info_t> out_class_info,
  ) {
    return _realm_get_class(
          arg0,
          key,
          out_class_info,
        ) !=
        0;
  }

  late final _realm_get_class_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_class>>('realm_get_class');
  late final _dart_realm_get_class _realm_get_class =
      _realm_get_class_ptr.asFunction<_dart_realm_get_class>();

  /// Get the list of properties for the class with this @a key.
  ///
  /// @param out_properties A pointer to an array of `realm_property_info_t`, which
  /// will be populated with the information about the
  /// properties. To see all properties, the length of the
  /// array should be at least the number of properties in
  /// the class, as reported in the sum of persisted and
  /// computed properties for the class. May be NULL, in
  /// which case this function can be used to discover the
  /// number of properties in the class.
  /// @param max The maximum number of entries to write to `out_properties`.
  /// @param out_n The actual number of properties written to `out_properties`.
  /// @return True if no exception occurred.
  bool realm_get_class_properties(
    ffi.Pointer<shared_realm> arg0,
    int key,
    ffi.Pointer<realm_property_info_t> out_properties,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_class_properties(
          arg0,
          key,
          out_properties,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_class_properties_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_class_properties>>(
          'realm_get_class_properties');
  late final _dart_realm_get_class_properties _realm_get_class_properties =
      _realm_get_class_properties_ptr
          .asFunction<_dart_realm_get_class_properties>();

  /// Get the property keys for the class with this @a key.
  ///
  /// @param key The class key.
  /// @param out_col_keys An array of property keys. May be NULL, in which case
  /// this function can be used to discover the number of
  /// properties for this class.
  /// @param max The maximum number of keys to write to `out_col_keys`. Ignored if
  /// `out_col_keys == NULL`.
  /// @param out_n The actual number of properties written to `out_col_keys` (if
  /// non-NULL), or number of properties in the class.
  bool realm_get_property_keys(
    ffi.Pointer<shared_realm> arg0,
    int key,
    ffi.Pointer<ffi.Int64> out_col_keys,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_property_keys(
          arg0,
          key,
          out_col_keys,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_property_keys_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_property_keys>>(
          'realm_get_property_keys');
  late final _dart_realm_get_property_keys _realm_get_property_keys =
      _realm_get_property_keys_ptr.asFunction<_dart_realm_get_property_keys>();

  /// Find a property by its column key.
  ///
  /// It is an error to pass a property @a key that is not present in this class.
  ///
  /// @param class_key The key of the class.
  /// @param key The column key for the property.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property.
  /// @return True if no exception occurred.
  bool realm_get_property(
    ffi.Pointer<shared_realm> arg0,
    int class_key,
    int key,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_get_property(
          arg0,
          class_key,
          key,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_get_property_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_property>>('realm_get_property');
  late final _dart_realm_get_property _realm_get_property =
      _realm_get_property_ptr.asFunction<_dart_realm_get_property>();

  /// Find a property by the internal (non-public) name of @a name.
  ///
  /// @param class_key The table key for the class.
  /// @param name The name of the property.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property. May
  /// be NULL.
  /// @return True if no exception occurred.
  bool realm_find_property(
    ffi.Pointer<shared_realm> arg0,
    int class_key,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_property(
          arg0,
          class_key,
          name,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_property_ptr =
      _lookup<ffi.NativeFunction<_c_realm_find_property>>(
          'realm_find_property');
  late final _dart_realm_find_property _realm_find_property =
      _realm_find_property_ptr.asFunction<_dart_realm_find_property>();

  /// Find a property with the public name of @a name.
  ///
  /// @param class_key The table key for the class.
  /// @param public_name The public name of the property.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property. May
  /// be NULL.
  /// @return True if no exception occurred.
  bool realm_find_property_by_public_name(
    ffi.Pointer<shared_realm> arg0,
    int class_key,
    ffi.Pointer<ffi.Int8> public_name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_property_by_public_name(
          arg0,
          class_key,
          public_name,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_property_by_public_name_ptr =
      _lookup<ffi.NativeFunction<_c_realm_find_property_by_public_name>>(
          'realm_find_property_by_public_name');
  late final _dart_realm_find_property_by_public_name
      _realm_find_property_by_public_name =
      _realm_find_property_by_public_name_ptr
          .asFunction<_dart_realm_find_property_by_public_name>();

  /// Find the primary key property for a class, if it has one.
  ///
  /// @param class_key The table key for this class.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A property to a `realm_property_info_t` that will be
  /// populated with information about the property, if it
  /// was found. May be NULL.
  /// @return True if no exception occurred.
  bool realm_find_primary_key_property(
    ffi.Pointer<shared_realm> arg0,
    int class_key,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_primary_key_property(
          arg0,
          class_key,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_primary_key_property_ptr =
      _lookup<ffi.NativeFunction<_c_realm_find_primary_key_property>>(
          'realm_find_primary_key_property');
  late final _dart_realm_find_primary_key_property
      _realm_find_primary_key_property = _realm_find_primary_key_property_ptr
          .asFunction<_dart_realm_find_primary_key_property>();

  /// Get the number of objects in a table (class).
  ///
  /// @param out_count A pointer to a `size_t` that will contain the number of
  /// objects, if successful.
  /// @return True if the table key was valid for this realm.
  bool realm_get_num_objects(
    ffi.Pointer<shared_realm> arg0,
    int arg1,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_get_num_objects(
          arg0,
          arg1,
          out_count,
        ) !=
        0;
  }

  late final _realm_get_num_objects_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_num_objects>>(
          'realm_get_num_objects');
  late final _dart_realm_get_num_objects _realm_get_num_objects =
      _realm_get_num_objects_ptr.asFunction<_dart_realm_get_num_objects>();

  /// Get the number of versions found in the Realm file.
  ///
  /// @param out_versions_count A pointer to a `size_t` that will contain the number of
  /// versions, if successful.
  /// @return True if no exception occurred.
  bool realm_get_num_versions(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<ffi.Uint64> out_versions_count,
  ) {
    return _realm_get_num_versions(
          arg0,
          out_versions_count,
        ) !=
        0;
  }

  late final _realm_get_num_versions_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_num_versions>>(
          'realm_get_num_versions');
  late final _dart_realm_get_num_versions _realm_get_num_versions =
      _realm_get_num_versions_ptr.asFunction<_dart_realm_get_num_versions>();

  /// Get an object with a particular object key.
  ///
  /// @param class_key The class key.
  /// @param obj_key The key to the object. Passing a non-existent key is
  /// considered an error.
  /// @return A non-NULL pointer if no exception occurred.
  ffi.Pointer<realm_object> realm_get_object(
    ffi.Pointer<shared_realm> arg0,
    int class_key,
    int obj_key,
  ) {
    return _realm_get_object(
      arg0,
      class_key,
      obj_key,
    );
  }

  late final _realm_get_object_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_object>>('realm_get_object');
  late final _dart_realm_get_object _realm_get_object =
      _realm_get_object_ptr.asFunction<_dart_realm_get_object>();

  /// Find an object with a particular primary key value.
  ///
  /// @param out_found A pointer to a boolean that will be set to true or false if
  /// no error occurred.
  /// @return A non-NULL pointer if the object was found and no exception occurred.
  ffi.Pointer<realm_object> realm_object_find_with_primary_key(
    ffi.Pointer<shared_realm> arg0,
    int arg1,
    realm_value_t pk,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_object_find_with_primary_key(
      arg0,
      arg1,
      pk,
      out_found,
    );
  }

  late final _realm_object_find_with_primary_key_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_find_with_primary_key>>(
          'realm_object_find_with_primary_key');
  late final _dart_realm_object_find_with_primary_key
      _realm_object_find_with_primary_key =
      _realm_object_find_with_primary_key_ptr
          .asFunction<_dart_realm_object_find_with_primary_key>();

  /// Find all objects in class.
  ///
  /// Note: This is faster than running a query matching all objects (such as
  /// "TRUEPREDICATE").
  ///
  /// @return A non-NULL pointer if no exception was thrown.
  ffi.Pointer<realm_results> realm_object_find_all(
    ffi.Pointer<shared_realm> arg0,
    int arg1,
  ) {
    return _realm_object_find_all(
      arg0,
      arg1,
    );
  }

  late final _realm_object_find_all_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_find_all>>(
          'realm_object_find_all');
  late final _dart_realm_object_find_all _realm_object_find_all =
      _realm_object_find_all_ptr.asFunction<_dart_realm_object_find_all>();

  /// Create an object in a class without a primary key.
  ///
  /// @return A non-NULL pointer if the object was created successfully.
  ffi.Pointer<realm_object> realm_object_create(
    ffi.Pointer<shared_realm> arg0,
    int arg1,
  ) {
    return _realm_object_create(
      arg0,
      arg1,
    );
  }

  late final _realm_object_create_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_create>>(
          'realm_object_create');
  late final _dart_realm_object_create _realm_object_create =
      _realm_object_create_ptr.asFunction<_dart_realm_object_create>();

  /// Create an object in a class with a primary key.
  ///
  /// @return A non-NULL pointer if the object was created successfully.
  ffi.Pointer<realm_object> realm_object_create_with_primary_key(
    ffi.Pointer<shared_realm> arg0,
    int arg1,
    realm_value_t pk,
  ) {
    return _realm_object_create_with_primary_key(
      arg0,
      arg1,
      pk,
    );
  }

  late final _realm_object_create_with_primary_key_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_create_with_primary_key>>(
          'realm_object_create_with_primary_key');
  late final _dart_realm_object_create_with_primary_key
      _realm_object_create_with_primary_key =
      _realm_object_create_with_primary_key_ptr
          .asFunction<_dart_realm_object_create_with_primary_key>();

  /// Delete a realm object.
  ///
  /// Note: This does not call `realm_release()` on the `realm_object_t` instance.
  ///
  /// @return True if no exception occurred.
  bool realm_object_delete(
    ffi.Pointer<realm_object> arg0,
  ) {
    return _realm_object_delete(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_delete_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_delete>>(
          'realm_object_delete');
  late final _dart_realm_object_delete _realm_object_delete =
      _realm_object_delete_ptr.asFunction<_dart_realm_object_delete>();

  /// True if this object still exists in the realm.
  ///
  /// This function cannot fail.
  bool realm_object_is_valid(
    ffi.Pointer<realm_object> arg0,
  ) {
    return _realm_object_is_valid(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_is_valid_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_is_valid>>(
          'realm_object_is_valid');
  late final _dart_realm_object_is_valid _realm_object_is_valid =
      _realm_object_is_valid_ptr.asFunction<_dart_realm_object_is_valid>();

  /// Get the key for this object.
  ///
  /// This function cannot fail.
  int realm_object_get_key(
    ffi.Pointer<realm_object> object,
  ) {
    return _realm_object_get_key(
      object,
    );
  }

  late final _realm_object_get_key_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_get_key>>(
          'realm_object_get_key');
  late final _dart_realm_object_get_key _realm_object_get_key =
      _realm_object_get_key_ptr.asFunction<_dart_realm_object_get_key>();

  /// Get the table for this object.
  ///
  /// This function cannot fail.
  int realm_object_get_table(
    ffi.Pointer<realm_object> object,
  ) {
    return _realm_object_get_table(
      object,
    );
  }

  late final _realm_object_get_table_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_get_table>>(
          'realm_object_get_table');
  late final _dart_realm_object_get_table _realm_object_get_table =
      _realm_object_get_table_ptr.asFunction<_dart_realm_object_get_table>();

  /// Get a `realm_link_t` representing a link to @a object.
  ///
  /// This function cannot fail.
  realm_link_t realm_object_as_link(
    ffi.Pointer<realm_object> object,
  ) {
    return _realm_object_as_link(
      object,
    );
  }

  late final _realm_object_as_link_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_as_link>>(
          'realm_object_as_link');
  late final _dart_realm_object_as_link _realm_object_as_link =
      _realm_object_as_link_ptr.asFunction<_dart_realm_object_as_link>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token> realm_object_add_notification_callback(
    ffi.Pointer<realm_object> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
    ffi.Pointer<ffi.NativeFunction<realm_on_object_change_func_t>> on_change,
    ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
    ffi.Pointer<realm_scheduler> arg5,
  ) {
    return _realm_object_add_notification_callback(
      arg0,
      userdata,
      free,
      on_change,
      on_error,
      arg5,
    );
  }

  late final _realm_object_add_notification_callback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_add_notification_callback>>(
          'realm_object_add_notification_callback');
  late final _dart_realm_object_add_notification_callback
      _realm_object_add_notification_callback =
      _realm_object_add_notification_callback_ptr
          .asFunction<_dart_realm_object_add_notification_callback>();

  /// Get an object from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_object> realm_object_from_thread_safe_reference(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<realm_thread_safe_reference> arg1,
  ) {
    return _realm_object_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_object_from_thread_safe_reference_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_from_thread_safe_reference>>(
          'realm_object_from_thread_safe_reference');
  late final _dart_realm_object_from_thread_safe_reference
      _realm_object_from_thread_safe_reference =
      _realm_object_from_thread_safe_reference_ptr
          .asFunction<_dart_realm_object_from_thread_safe_reference>();

  /// Get the value for a property.
  ///
  /// @return True if no exception occurred.
  bool realm_get_value(
    ffi.Pointer<realm_object> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_get_value(
          arg0,
          arg1,
          out_value,
        ) !=
        0;
  }

  late final _realm_get_value_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_value>>('realm_get_value');
  late final _dart_realm_get_value _realm_get_value =
      _realm_get_value_ptr.asFunction<_dart_realm_get_value>();

  /// Get the values for several properties.
  ///
  /// This is provided as an alternative to calling `realm_get_value()` multiple
  /// times in a row, which is particularly useful for language runtimes where
  /// crossing the native bridge is comparatively expensive. In addition, it
  /// eliminates some parameter validation that would otherwise be repeated for
  /// each call.
  ///
  /// Example use cases:
  ///
  /// - Extracting all properties of an object for serialization.
  /// - Converting an object to some in-memory representation.
  ///
  /// @param num_values The number of elements in @a properties and @a out_values.
  /// @param properties The keys for the properties to fetch. May not be NULL.
  /// @param out_values Where to write the property values. If an error occurs,
  /// this array may only be partially initialized. May not be
  /// NULL.
  /// @return True if no exception occurs.
  bool realm_get_values(
    ffi.Pointer<realm_object> arg0,
    int num_values,
    ffi.Pointer<ffi.Int64> properties,
    ffi.Pointer<realm_value_t> out_values,
  ) {
    return _realm_get_values(
          arg0,
          num_values,
          properties,
          out_values,
        ) !=
        0;
  }

  late final _realm_get_values_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_values>>('realm_get_values');
  late final _dart_realm_get_values _realm_get_values =
      _realm_get_values_ptr.asFunction<_dart_realm_get_values>();

  /// Set the value for a property.
  ///
  /// @param new_value The new value for the property.
  /// @param is_default True if this property is being set as part of setting the
  /// default values for a new object. This has no effect in
  /// non-sync'ed realms.
  /// @return True if no exception occurred.
  bool realm_set_value(
    ffi.Pointer<realm_object> arg0,
    int arg1,
    realm_value_t new_value,
    bool is_default,
  ) {
    return _realm_set_value(
          arg0,
          arg1,
          new_value,
          is_default ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_set_value_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_value>>('realm_set_value');
  late final _dart_realm_set_value _realm_set_value =
      _realm_set_value_ptr.asFunction<_dart_realm_set_value>();

  /// Set the values for several properties.
  ///
  /// This is provided as an alternative to calling `realm_get_value()` multiple
  /// times in a row, which is particularly useful for language runtimes where
  /// crossing the native bridge is comparatively expensive. In addition, it
  /// eliminates some parameter validation that would otherwise be repeated for
  /// each call.
  ///
  /// Example use cases:
  ///
  /// - Initializing a new object with default values.
  /// - Deserializing some in-memory structure into a realm object.
  ///
  /// This operation is "atomic"; if an exception occurs due to invalid input (such
  /// as type mismatch, nullability mismatch, etc.), the object will remain
  /// unmodified.
  ///
  /// @param num_values The number of elements in @a properties and @a values.
  /// @param properties The keys of the properties to set. May not be NULL.
  /// @param values The values to assign to the properties. May not be NULL.
  /// @param is_default True if the properties are being set as part of setting
  /// default values for a new object. This has no effect in
  /// non-sync'ed realms.
  /// @return True if no exception occurred.
  bool realm_set_values(
    ffi.Pointer<realm_object> arg0,
    int num_values,
    ffi.Pointer<ffi.Int64> properties,
    ffi.Pointer<realm_value_t> values,
    bool is_default,
  ) {
    return _realm_set_values(
          arg0,
          num_values,
          properties,
          values,
          is_default ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_set_values_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_values>>('realm_set_values');
  late final _dart_realm_set_values _realm_set_values =
      _realm_set_values_ptr.asFunction<_dart_realm_set_values>();

  /// Get a list instance for the property of an object.
  ///
  /// Note: It is up to the caller to call `realm_release()` on the returned list.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_list> realm_get_list(
    ffi.Pointer<realm_object> arg0,
    int arg1,
  ) {
    return _realm_get_list(
      arg0,
      arg1,
    );
  }

  late final _realm_get_list_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_list>>('realm_get_list');
  late final _dart_realm_get_list _realm_get_list =
      _realm_get_list_ptr.asFunction<_dart_realm_get_list>();

  /// Get the size of a list, in number of elements.
  ///
  /// This function may fail if the object owning the list has been deleted.
  ///
  /// @param out_size Where to put the list size. May be NULL.
  /// @return True if no exception occurred.
  bool realm_list_size(
    ffi.Pointer<realm_list> arg0,
    ffi.Pointer<ffi.IntPtr> out_size,
  ) {
    return _realm_list_size(
          arg0,
          out_size,
        ) !=
        0;
  }

  late final _realm_list_size_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_size>>('realm_list_size');
  late final _dart_realm_list_size _realm_list_size =
      _realm_list_size_ptr.asFunction<_dart_realm_list_size>();

  /// Get the property that this list came from.
  ///
  /// @return True if no exception occurred.
  bool realm_list_get_property(
    ffi.Pointer<realm_list> arg0,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_list_get_property(
          arg0,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_list_get_property_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_get_property>>(
          'realm_list_get_property');
  late final _dart_realm_list_get_property _realm_list_get_property =
      _realm_list_get_property_ptr.asFunction<_dart_realm_list_get_property>();

  /// Get the value at @a index.
  ///
  /// @param out_value The resulting value, if no error occurred. May be NULL,
  /// though nonsensical.
  /// @return True if no exception occurred.
  bool realm_list_get(
    ffi.Pointer<realm_list> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_list_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_list_get_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_get>>('realm_list_get');
  late final _dart_realm_list_get _realm_list_get =
      _realm_list_get_ptr.asFunction<_dart_realm_list_get>();

  /// Set the value at @a index.
  ///
  /// @param value The value to set.
  /// @return True if no exception occurred.
  bool realm_list_set(
    ffi.Pointer<realm_list> arg0,
    int index,
    realm_value_t value,
  ) {
    return _realm_list_set(
          arg0,
          index,
          value,
        ) !=
        0;
  }

  late final _realm_list_set_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_set>>('realm_list_set');
  late final _dart_realm_list_set _realm_list_set =
      _realm_list_set_ptr.asFunction<_dart_realm_list_set>();

  /// Insert @a value at @a index.
  ///
  /// @param value The value to insert.
  /// @return True if no exception occurred.
  bool realm_list_insert(
    ffi.Pointer<realm_list> arg0,
    int index,
    realm_value_t value,
  ) {
    return _realm_list_insert(
          arg0,
          index,
          value,
        ) !=
        0;
  }

  late final _realm_list_insert_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_insert>>('realm_list_insert');
  late final _dart_realm_list_insert _realm_list_insert =
      _realm_list_insert_ptr.asFunction<_dart_realm_list_insert>();

  /// Erase the element at @a index.
  ///
  /// @return True if no exception occurred.
  bool realm_list_erase(
    ffi.Pointer<realm_list> arg0,
    int index,
  ) {
    return _realm_list_erase(
          arg0,
          index,
        ) !=
        0;
  }

  late final _realm_list_erase_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_erase>>('realm_list_erase');
  late final _dart_realm_list_erase _realm_list_erase =
      _realm_list_erase_ptr.asFunction<_dart_realm_list_erase>();

  /// Clear a list, removing all elements in the list. In a list of links, this
  /// does *NOT* delete the target objects.
  ///
  /// @return True if no exception occurred.
  bool realm_list_clear(
    ffi.Pointer<realm_list> arg0,
  ) {
    return _realm_list_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_list_clear_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_clear>>('realm_list_clear');
  late final _dart_realm_list_clear _realm_list_clear =
      _realm_list_clear_ptr.asFunction<_dart_realm_list_clear>();

  /// In a list of objects, delete all objects in the list and clear the list. In a
  /// list of values, clear the list.
  ///
  /// @return True if no exception occurred.
  bool realm_list_remove_all(
    ffi.Pointer<realm_list> arg0,
  ) {
    return _realm_list_remove_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_list_remove_all_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_remove_all>>(
          'realm_list_remove_all');
  late final _dart_realm_list_remove_all _realm_list_remove_all =
      _realm_list_remove_all_ptr.asFunction<_dart_realm_list_remove_all>();

  /// Replace the contents of a list with values.
  ///
  /// This is equivalent to calling `realm_list_clear()`, and then
  /// `realm_list_insert()` repeatedly.
  ///
  /// @return True if no exception occurred.
  bool realm_list_assign(
    ffi.Pointer<realm_list> arg0,
    ffi.Pointer<realm_value_t> values,
    int num_values,
  ) {
    return _realm_list_assign(
          arg0,
          values,
          num_values,
        ) !=
        0;
  }

  late final _realm_list_assign_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_assign>>('realm_list_assign');
  late final _dart_realm_list_assign _realm_list_assign =
      _realm_list_assign_ptr.asFunction<_dart_realm_list_assign>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token> realm_list_add_notification_callback(
    ffi.Pointer<realm_list> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
    ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>>
        on_change,
    ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
    ffi.Pointer<realm_scheduler> arg5,
  ) {
    return _realm_list_add_notification_callback(
      arg0,
      userdata,
      free,
      on_change,
      on_error,
      arg5,
    );
  }

  late final _realm_list_add_notification_callback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_add_notification_callback>>(
          'realm_list_add_notification_callback');
  late final _dart_realm_list_add_notification_callback
      _realm_list_add_notification_callback =
      _realm_list_add_notification_callback_ptr
          .asFunction<_dart_realm_list_add_notification_callback>();

  /// Get an list from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_list> realm_list_from_thread_safe_reference(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<realm_thread_safe_reference> arg1,
  ) {
    return _realm_list_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_list_from_thread_safe_reference_ptr =
      _lookup<ffi.NativeFunction<_c_realm_list_from_thread_safe_reference>>(
          'realm_list_from_thread_safe_reference');
  late final _dart_realm_list_from_thread_safe_reference
      _realm_list_from_thread_safe_reference =
      _realm_list_from_thread_safe_reference_ptr
          .asFunction<_dart_realm_list_from_thread_safe_reference>();

  /// True if an object notification indicates that the object was deleted.
  ///
  /// This function cannot fail.
  bool realm_object_changes_is_deleted(
    ffi.Pointer<realm_object_changes> arg0,
  ) {
    return _realm_object_changes_is_deleted(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_changes_is_deleted_ptr =
      _lookup<ffi.NativeFunction<_c_realm_object_changes_is_deleted>>(
          'realm_object_changes_is_deleted');
  late final _dart_realm_object_changes_is_deleted
      _realm_object_changes_is_deleted = _realm_object_changes_is_deleted_ptr
          .asFunction<_dart_realm_object_changes_is_deleted>();

  /// Get the number of properties that were modified in an object notification.
  ///
  /// This function cannot fail.
  int realm_object_changes_get_num_modified_properties(
    ffi.Pointer<realm_object_changes> arg0,
  ) {
    return _realm_object_changes_get_num_modified_properties(
      arg0,
    );
  }

  late final _realm_object_changes_get_num_modified_properties_ptr = _lookup<
          ffi.NativeFunction<
              _c_realm_object_changes_get_num_modified_properties>>(
      'realm_object_changes_get_num_modified_properties');
  late final _dart_realm_object_changes_get_num_modified_properties
      _realm_object_changes_get_num_modified_properties =
      _realm_object_changes_get_num_modified_properties_ptr
          .asFunction<_dart_realm_object_changes_get_num_modified_properties>();

  /// Get the column keys for the properties that were modified in an object
  /// notification.
  ///
  /// This function cannot fail.
  ///
  /// @param out_modified Where the column keys should be written. May be NULL.
  /// @param max The maximum number of column keys to write.
  /// @return The number of column keys written to @a out_modified, or the number
  /// of modified properties if @a out_modified is NULL.
  int realm_object_changes_get_modified_properties(
    ffi.Pointer<realm_object_changes> arg0,
    ffi.Pointer<ffi.Int64> out_modified,
    int max,
  ) {
    return _realm_object_changes_get_modified_properties(
      arg0,
      out_modified,
      max,
    );
  }

  late final _realm_object_changes_get_modified_properties_ptr = _lookup<
          ffi.NativeFunction<_c_realm_object_changes_get_modified_properties>>(
      'realm_object_changes_get_modified_properties');
  late final _dart_realm_object_changes_get_modified_properties
      _realm_object_changes_get_modified_properties =
      _realm_object_changes_get_modified_properties_ptr
          .asFunction<_dart_realm_object_changes_get_modified_properties>();

  /// Get the number of various types of changes in a collection notification.
  ///
  /// @param out_num_deletions The number of deletions. May be NULL.
  /// @param out_num_insertions The number of insertions. May be NULL.
  /// @param out_num_modifications The number of modifications. May be NULL.
  /// @param out_num_moves The number of moved elements. May be NULL.
  void realm_collection_changes_get_num_changes(
    ffi.Pointer<realm_collection_changes> arg0,
    ffi.Pointer<ffi.IntPtr> out_num_deletions,
    ffi.Pointer<ffi.IntPtr> out_num_insertions,
    ffi.Pointer<ffi.IntPtr> out_num_modifications,
    ffi.Pointer<ffi.IntPtr> out_num_moves,
  ) {
    return _realm_collection_changes_get_num_changes(
      arg0,
      out_num_deletions,
      out_num_insertions,
      out_num_modifications,
      out_num_moves,
    );
  }

  late final _realm_collection_changes_get_num_changes_ptr =
      _lookup<ffi.NativeFunction<_c_realm_collection_changes_get_num_changes>>(
          'realm_collection_changes_get_num_changes');
  late final _dart_realm_collection_changes_get_num_changes
      _realm_collection_changes_get_num_changes =
      _realm_collection_changes_get_num_changes_ptr
          .asFunction<_dart_realm_collection_changes_get_num_changes>();

  /// Get the number of various types of changes in a collection notification,
  /// suitable for acquiring the change indices as ranges, which is much more
  /// compact in memory than getting the individual indices when multiple adjacent
  /// elements have been modified.
  ///
  /// @param out_num_deletion_ranges The number of deleted ranges. May be NULL.
  /// @param out_num_insertion_ranges The number of inserted ranges. May be NULL.
  /// @param out_num_modification_ranges The number of modified ranges. May be
  /// NULL.
  /// @param out_num_moves The number of moved elements. May be NULL.
  void realm_collection_changes_get_num_ranges(
    ffi.Pointer<realm_collection_changes> arg0,
    ffi.Pointer<ffi.IntPtr> out_num_deletion_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_insertion_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_modification_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_moves,
  ) {
    return _realm_collection_changes_get_num_ranges(
      arg0,
      out_num_deletion_ranges,
      out_num_insertion_ranges,
      out_num_modification_ranges,
      out_num_moves,
    );
  }

  late final _realm_collection_changes_get_num_ranges_ptr =
      _lookup<ffi.NativeFunction<_c_realm_collection_changes_get_num_ranges>>(
          'realm_collection_changes_get_num_ranges');
  late final _dart_realm_collection_changes_get_num_ranges
      _realm_collection_changes_get_num_ranges =
      _realm_collection_changes_get_num_ranges_ptr
          .asFunction<_dart_realm_collection_changes_get_num_ranges>();

  /// Get the indices of changes in a collection notification.
  ///
  /// Note: For moves, every `from` index will also be present among deletions, and
  /// every `to` index will also be present among insertions.
  ///
  /// This function cannot fail.
  ///
  /// @param out_deletion_indices Where to put the indices of deleted elements
  /// (*before* the deletion happened). May be NULL.
  /// @param max_deletion_indices The max number of indices to write to @a
  /// out_deletion_indices.
  /// @param out_insertion_indices Where the put the indices of inserted elements
  /// (*after* the insertion happened). May be NULL.
  /// @param max_insertion_indices The max number of indices to write to @a
  /// out_insertion_indices.
  /// @param out_modification_indices Where to put the indices of modified elements
  /// (*before* any insertions or deletions of
  /// other elements). May be NULL.
  /// @param max_modification_indices The max number of indices to write to @a
  /// out_modification_indices.
  /// @param out_modification_indices_after Where to put the indices of modified
  /// elements (*after* any insertions or
  /// deletions of other elements). May be
  /// NULL.
  /// @param max_modification_indices_after The max number of indices to write to
  /// @a out_modification_indices_after.
  /// @param out_moves Where to put the pairs of indices of moved elements. May be
  /// NULL.
  /// @param max_moves The max number of pairs to write to @a out_moves.
  void realm_collection_changes_get_changes(
    ffi.Pointer<realm_collection_changes> arg0,
    ffi.Pointer<ffi.IntPtr> out_deletion_indices,
    int max_deletion_indices,
    ffi.Pointer<ffi.IntPtr> out_insertion_indices,
    int max_insertion_indices,
    ffi.Pointer<ffi.IntPtr> out_modification_indices,
    int max_modification_indices,
    ffi.Pointer<ffi.IntPtr> out_modification_indices_after,
    int max_modification_indices_after,
    ffi.Pointer<realm_collection_move_t> out_moves,
    int max_moves,
  ) {
    return _realm_collection_changes_get_changes(
      arg0,
      out_deletion_indices,
      max_deletion_indices,
      out_insertion_indices,
      max_insertion_indices,
      out_modification_indices,
      max_modification_indices,
      out_modification_indices_after,
      max_modification_indices_after,
      out_moves,
      max_moves,
    );
  }

  late final _realm_collection_changes_get_changes_ptr =
      _lookup<ffi.NativeFunction<_c_realm_collection_changes_get_changes>>(
          'realm_collection_changes_get_changes');
  late final _dart_realm_collection_changes_get_changes
      _realm_collection_changes_get_changes =
      _realm_collection_changes_get_changes_ptr
          .asFunction<_dart_realm_collection_changes_get_changes>();

  void realm_collection_changes_get_ranges(
    ffi.Pointer<realm_collection_changes> arg0,
    ffi.Pointer<realm_index_range_t> out_deletion_ranges,
    int max_deletion_ranges,
    ffi.Pointer<realm_index_range_t> out_insertion_ranges,
    int max_insertion_ranges,
    ffi.Pointer<realm_index_range_t> out_modification_ranges,
    int max_modification_ranges,
    ffi.Pointer<realm_index_range_t> out_modification_ranges_after,
    int max_modification_ranges_after,
    ffi.Pointer<realm_collection_move_t> out_moves,
    int max_moves,
  ) {
    return _realm_collection_changes_get_ranges(
      arg0,
      out_deletion_ranges,
      max_deletion_ranges,
      out_insertion_ranges,
      max_insertion_ranges,
      out_modification_ranges,
      max_modification_ranges,
      out_modification_ranges_after,
      max_modification_ranges_after,
      out_moves,
      max_moves,
    );
  }

  late final _realm_collection_changes_get_ranges_ptr =
      _lookup<ffi.NativeFunction<_c_realm_collection_changes_get_ranges>>(
          'realm_collection_changes_get_ranges');
  late final _dart_realm_collection_changes_get_ranges
      _realm_collection_changes_get_ranges =
      _realm_collection_changes_get_ranges_ptr
          .asFunction<_dart_realm_collection_changes_get_ranges>();

  ffi.Pointer<realm_set> realm_get_set(
    ffi.Pointer<realm_object> arg0,
    int arg1,
  ) {
    return _realm_get_set(
      arg0,
      arg1,
    );
  }

  late final _realm_get_set_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_set>>('realm_get_set');
  late final _dart_realm_get_set _realm_get_set =
      _realm_get_set_ptr.asFunction<_dart_realm_get_set>();

  int realm_set_size(
    ffi.Pointer<realm_set> arg0,
  ) {
    return _realm_set_size(
      arg0,
    );
  }

  late final _realm_set_size_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_size>>('realm_set_size');
  late final _dart_realm_set_size _realm_set_size =
      _realm_set_size_ptr.asFunction<_dart_realm_set_size>();

  bool realm_set_get(
    ffi.Pointer<realm_set> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_set_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_set_get_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_get>>('realm_set_get');
  late final _dart_realm_set_get _realm_set_get =
      _realm_set_get_ptr.asFunction<_dart_realm_set_get>();

  bool realm_set_find(
    ffi.Pointer<realm_set> arg0,
    realm_value_t value,
    ffi.Pointer<ffi.IntPtr> out_index,
  ) {
    return _realm_set_find(
          arg0,
          value,
          out_index,
        ) !=
        0;
  }

  late final _realm_set_find_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_find>>('realm_set_find');
  late final _dart_realm_set_find _realm_set_find =
      _realm_set_find_ptr.asFunction<_dart_realm_set_find>();

  bool realm_set_insert(
    ffi.Pointer<realm_set> arg0,
    realm_value_t value,
    int out_index,
  ) {
    return _realm_set_insert(
          arg0,
          value,
          out_index,
        ) !=
        0;
  }

  late final _realm_set_insert_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_insert>>('realm_set_insert');
  late final _dart_realm_set_insert _realm_set_insert =
      _realm_set_insert_ptr.asFunction<_dart_realm_set_insert>();

  bool realm_set_erase(
    ffi.Pointer<realm_set> arg0,
    realm_value_t value,
    ffi.Pointer<ffi.Uint8> out_erased,
  ) {
    return _realm_set_erase(
          arg0,
          value,
          out_erased,
        ) !=
        0;
  }

  late final _realm_set_erase_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_erase>>('realm_set_erase');
  late final _dart_realm_set_erase _realm_set_erase =
      _realm_set_erase_ptr.asFunction<_dart_realm_set_erase>();

  bool realm_set_clear(
    ffi.Pointer<realm_set> arg0,
  ) {
    return _realm_set_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_set_clear_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_clear>>('realm_set_clear');
  late final _dart_realm_set_clear _realm_set_clear =
      _realm_set_clear_ptr.asFunction<_dart_realm_set_clear>();

  bool realm_set_assign(
    ffi.Pointer<realm_set> arg0,
    realm_value_t values,
    int num_values,
  ) {
    return _realm_set_assign(
          arg0,
          values,
          num_values,
        ) !=
        0;
  }

  late final _realm_set_assign_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_assign>>('realm_set_assign');
  late final _dart_realm_set_assign _realm_set_assign =
      _realm_set_assign_ptr.asFunction<_dart_realm_set_assign>();

  ffi.Pointer<realm_notification_token> realm_set_add_notification_callback(
    ffi.Pointer<realm_object> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
    ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>>
        on_change,
    ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
    ffi.Pointer<realm_scheduler> arg5,
  ) {
    return _realm_set_add_notification_callback(
      arg0,
      userdata,
      free,
      on_change,
      on_error,
      arg5,
    );
  }

  late final _realm_set_add_notification_callback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_set_add_notification_callback>>(
          'realm_set_add_notification_callback');
  late final _dart_realm_set_add_notification_callback
      _realm_set_add_notification_callback =
      _realm_set_add_notification_callback_ptr
          .asFunction<_dart_realm_set_add_notification_callback>();

  ffi.Pointer<realm_dictionary> realm_get_dictionary(
    ffi.Pointer<realm_object> arg0,
    int arg1,
  ) {
    return _realm_get_dictionary(
      arg0,
      arg1,
    );
  }

  late final _realm_get_dictionary_ptr =
      _lookup<ffi.NativeFunction<_c_realm_get_dictionary>>(
          'realm_get_dictionary');
  late final _dart_realm_get_dictionary _realm_get_dictionary =
      _realm_get_dictionary_ptr.asFunction<_dart_realm_get_dictionary>();

  int realm_dictionary_size(
    ffi.Pointer<realm_dictionary> arg0,
  ) {
    return _realm_dictionary_size(
      arg0,
    );
  }

  late final _realm_dictionary_size_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_size>>(
          'realm_dictionary_size');
  late final _dart_realm_dictionary_size _realm_dictionary_size =
      _realm_dictionary_size_ptr.asFunction<_dart_realm_dictionary_size>();

  bool realm_dictionary_get(
    ffi.Pointer<realm_dictionary> arg0,
    realm_value_t key,
    ffi.Pointer<realm_value_t> out_value,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_dictionary_get(
          arg0,
          key,
          out_value,
          out_found,
        ) !=
        0;
  }

  late final _realm_dictionary_get_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_get>>(
          'realm_dictionary_get');
  late final _dart_realm_dictionary_get _realm_dictionary_get =
      _realm_dictionary_get_ptr.asFunction<_dart_realm_dictionary_get>();

  bool realm_dictionary_insert(
    ffi.Pointer<realm_dictionary> arg0,
    realm_value_t key,
    realm_value_t value,
    ffi.Pointer<ffi.Uint8> out_inserted,
    ffi.Pointer<ffi.IntPtr> out_index,
  ) {
    return _realm_dictionary_insert(
          arg0,
          key,
          value,
          out_inserted,
          out_index,
        ) !=
        0;
  }

  late final _realm_dictionary_insert_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_insert>>(
          'realm_dictionary_insert');
  late final _dart_realm_dictionary_insert _realm_dictionary_insert =
      _realm_dictionary_insert_ptr.asFunction<_dart_realm_dictionary_insert>();

  bool realm_dictionary_erase(
    ffi.Pointer<realm_dictionary> arg0,
    realm_value_t key,
    ffi.Pointer<ffi.Uint8> out_erased,
  ) {
    return _realm_dictionary_erase(
          arg0,
          key,
          out_erased,
        ) !=
        0;
  }

  late final _realm_dictionary_erase_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_erase>>(
          'realm_dictionary_erase');
  late final _dart_realm_dictionary_erase _realm_dictionary_erase =
      _realm_dictionary_erase_ptr.asFunction<_dart_realm_dictionary_erase>();

  bool realm_dictionary_clear(
    ffi.Pointer<realm_dictionary> arg0,
  ) {
    return _realm_dictionary_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_dictionary_clear_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_clear>>(
          'realm_dictionary_clear');
  late final _dart_realm_dictionary_clear _realm_dictionary_clear =
      _realm_dictionary_clear_ptr.asFunction<_dart_realm_dictionary_clear>();

  bool realm_dictionary_assign(
    ffi.Pointer<realm_dictionary> arg0,
    ffi.Pointer<ffi.Pointer<realm_value_t>> pairs,
    int num_pairs,
  ) {
    return _realm_dictionary_assign(
          arg0,
          pairs,
          num_pairs,
        ) !=
        0;
  }

  late final _realm_dictionary_assign_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dictionary_assign>>(
          'realm_dictionary_assign');
  late final _dart_realm_dictionary_assign _realm_dictionary_assign =
      _realm_dictionary_assign_ptr.asFunction<_dart_realm_dictionary_assign>();

  ffi.Pointer<realm_notification_token>
      realm_dictionary_add_notification_callback(
    ffi.Pointer<realm_object> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
    ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>>
        on_change,
    ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
    ffi.Pointer<realm_scheduler> arg5,
  ) {
    return _realm_dictionary_add_notification_callback(
      arg0,
      userdata,
      free,
      on_change,
      on_error,
      arg5,
    );
  }

  late final _realm_dictionary_add_notification_callback_ptr = _lookup<
          ffi.NativeFunction<_c_realm_dictionary_add_notification_callback>>(
      'realm_dictionary_add_notification_callback');
  late final _dart_realm_dictionary_add_notification_callback
      _realm_dictionary_add_notification_callback =
      _realm_dictionary_add_notification_callback_ptr
          .asFunction<_dart_realm_dictionary_add_notification_callback>();

  /// Parse a query string and bind it to a table.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_table The table on which to run this query.
  /// @param query_string A zero-terminated string in the Realm Query Language,
  /// optionally containing argument placeholders (`$0`, `$1`,
  /// etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query> realm_query_parse(
    ffi.Pointer<shared_realm> arg0,
    int target_table,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse(
      arg0,
      target_table,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parse_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_parse>>('realm_query_parse');
  late final _dart_realm_query_parse _realm_query_parse =
      _realm_query_parse_ptr.asFunction<_dart_realm_query_parse>();

  /// Parse a query string and bind it to a list.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_list The list on which to run this query.
  /// @param query_string A string in the Realm Query Language, optionally
  /// containing argument placeholders (`$0`, `$1`, etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query> realm_query_parse_for_list(
    ffi.Pointer<realm_list> target_list,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse_for_list(
      target_list,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parse_for_list_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_parse_for_list>>(
          'realm_query_parse_for_list');
  late final _dart_realm_query_parse_for_list _realm_query_parse_for_list =
      _realm_query_parse_for_list_ptr
          .asFunction<_dart_realm_query_parse_for_list>();

  /// Parse a query string and bind it to another query result.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_results The results on which to run this query.
  /// @param query_string A zero-terminated string in the Realm Query Language,
  /// optionally containing argument placeholders (`$0`, `$1`,
  /// etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query> realm_query_parse_for_results(
    ffi.Pointer<realm_results> target_results,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse_for_results(
      target_results,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parse_for_results_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_parse_for_results>>(
          'realm_query_parse_for_results');
  late final _dart_realm_query_parse_for_results
      _realm_query_parse_for_results = _realm_query_parse_for_results_ptr
          .asFunction<_dart_realm_query_parse_for_results>();

  /// Count the number of objects found by this query.
  bool realm_query_count(
    ffi.Pointer<realm_query> arg0,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_query_count(
          arg0,
          out_count,
        ) !=
        0;
  }

  late final _realm_query_count_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_count>>('realm_query_count');
  late final _dart_realm_query_count _realm_query_count =
      _realm_query_count_ptr.asFunction<_dart_realm_query_count>();

  /// Return the first object matched by this query.
  ///
  /// Note: This function can only produce objects, not values. Use the
  /// `realm_results_t` returned by `realm_query_find_all()` to retrieve
  /// values from a list of primitive values.
  ///
  /// @param out_value Where to write the result, if any object matched the query.
  /// May be NULL.
  /// @param out_found Where to write whether the object was found. May be NULL.
  /// @return True if no exception occurred.
  bool realm_query_find_first(
    ffi.Pointer<realm_query> arg0,
    ffi.Pointer<realm_value_t> out_value,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_query_find_first(
          arg0,
          out_value,
          out_found,
        ) !=
        0;
  }

  late final _realm_query_find_first_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_find_first>>(
          'realm_query_find_first');
  late final _dart_realm_query_find_first _realm_query_find_first =
      _realm_query_find_first_ptr.asFunction<_dart_realm_query_find_first>();

  /// Produce a results object for this query.
  ///
  /// Note: This does not actually run the query until the results are accessed in
  /// some way.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results> realm_query_find_all(
    ffi.Pointer<realm_query> arg0,
  ) {
    return _realm_query_find_all(
      arg0,
    );
  }

  late final _realm_query_find_all_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_find_all>>(
          'realm_query_find_all');
  late final _dart_realm_query_find_all _realm_query_find_all =
      _realm_query_find_all_ptr.asFunction<_dart_realm_query_find_all>();

  /// Delete all objects matched by a query.
  bool realm_query_delete_all(
    ffi.Pointer<realm_query> arg0,
  ) {
    return _realm_query_delete_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_query_delete_all_ptr =
      _lookup<ffi.NativeFunction<_c_realm_query_delete_all>>(
          'realm_query_delete_all');
  late final _dart_realm_query_delete_all _realm_query_delete_all =
      _realm_query_delete_all_ptr.asFunction<_dart_realm_query_delete_all>();

  /// Count the number of results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// @return True if no exception occurred.
  bool realm_results_count(
    ffi.Pointer<realm_results> arg0,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_results_count(
          arg0,
          out_count,
        ) !=
        0;
  }

  late final _realm_results_count_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_count>>(
          'realm_results_count');
  late final _dart_realm_results_count _realm_results_count =
      _realm_results_count_ptr.asFunction<_dart_realm_results_count>();

  /// Get the matching element at @a index in the results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// Note: The bound returned by `realm_results_count()` for a non-snapshot result
  /// is not a reliable way to iterate over elements in the result, because
  /// the result will be live-updated if changes are made in each iteration
  /// that may change the number of query results or even change the
  /// ordering. In other words, this method should probably only be used with
  /// snapshot results.
  ///
  /// @return True if no exception occurred (including out-of-bounds).
  bool realm_results_get(
    ffi.Pointer<realm_results> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_results_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_results_get_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_get>>('realm_results_get');
  late final _dart_realm_results_get _realm_results_get =
      _realm_results_get_ptr.asFunction<_dart_realm_results_get>();

  /// Get the matching object at @a index in the results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// Note: The bound returned by `realm_results_count()` for a non-snapshot result
  /// is not a reliable way to iterate over elements in the result, because
  /// the result will be live-updated if changes are made in each iteration
  /// that may change the number of query results or even change the
  /// ordering. In other words, this method should probably only be used with
  /// snapshot results.
  ///
  /// @return An instance of `realm_object_t` if no exception occurred.
  ffi.Pointer<realm_object> realm_results_get_object(
    ffi.Pointer<realm_results> arg0,
    int index,
  ) {
    return _realm_results_get_object(
      arg0,
      index,
    );
  }

  late final _realm_results_get_object_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_get_object>>(
          'realm_results_get_object');
  late final _dart_realm_results_get_object _realm_results_get_object =
      _realm_results_get_object_ptr
          .asFunction<_dart_realm_results_get_object>();

  /// Delete all objects in the result.
  ///
  /// If the result if "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// @return True if no exception occurred.
  bool realm_results_delete_all(
    ffi.Pointer<realm_results> arg0,
  ) {
    return _realm_results_delete_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_results_delete_all_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_delete_all>>(
          'realm_results_delete_all');
  late final _dart_realm_results_delete_all _realm_results_delete_all =
      _realm_results_delete_all_ptr
          .asFunction<_dart_realm_results_delete_all>();

  /// Return a snapshot of the results that never automatically updates.
  ///
  /// The returned result is suitable for use with `realm_results_count()` +
  /// `realm_results_get()`.
  ffi.Pointer<realm_results> realm_results_snapshot(
    ffi.Pointer<realm_results> arg0,
  ) {
    return _realm_results_snapshot(
      arg0,
    );
  }

  late final _realm_results_snapshot_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_snapshot>>(
          'realm_results_snapshot');
  late final _dart_realm_results_snapshot _realm_results_snapshot =
      _realm_results_snapshot_ptr.asFunction<_dart_realm_results_snapshot>();

  /// Map the results into a frozen realm instance.
  ffi.Pointer<realm_results> realm_results_freeze(
    ffi.Pointer<realm_results> arg0,
    ffi.Pointer<shared_realm> frozen_realm,
  ) {
    return _realm_results_freeze(
      arg0,
      frozen_realm,
    );
  }

  late final _realm_results_freeze_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_freeze>>(
          'realm_results_freeze');
  late final _dart_realm_results_freeze _realm_results_freeze =
      _realm_results_freeze_ptr.asFunction<_dart_realm_results_freeze>();

  /// Compute the minimum value of a property in the results.
  ///
  /// @param out_min Where to write the result, if there were matching rows.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_min(
    ffi.Pointer<realm_results> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_min,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_min(
          arg0,
          arg1,
          out_min,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_min_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_min>>('realm_results_min');
  late final _dart_realm_results_min _realm_results_min =
      _realm_results_min_ptr.asFunction<_dart_realm_results_min>();

  /// Compute the maximum value of a property in the results.
  ///
  /// @param out_max Where to write the result, if there were matching rows.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_max(
    ffi.Pointer<realm_results> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_max,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_max(
          arg0,
          arg1,
          out_max,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_max_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_max>>('realm_results_max');
  late final _dart_realm_results_max _realm_results_max =
      _realm_results_max_ptr.asFunction<_dart_realm_results_max>();

  /// Compute the sum value of a property in the results.
  ///
  /// @param out_sum Where to write the result. Zero if no rows matched.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_sum(
    ffi.Pointer<realm_results> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_sum,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_sum(
          arg0,
          arg1,
          out_sum,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_sum_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_sum>>('realm_results_sum');
  late final _dart_realm_results_sum _realm_results_sum =
      _realm_results_sum_ptr.asFunction<_dart_realm_results_sum>();

  /// Compute the average value of a property in the results.
  ///
  /// Note: For numeric columns, the average is always converted to double.
  ///
  /// @param out_average Where to write the result.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_average(
    ffi.Pointer<realm_results> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_average,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_average(
          arg0,
          arg1,
          out_average,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_average_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_average>>(
          'realm_results_average');
  late final _dart_realm_results_average _realm_results_average =
      _realm_results_average_ptr.asFunction<_dart_realm_results_average>();

  ffi.Pointer<realm_notification_token> realm_results_add_notification_callback(
    ffi.Pointer<realm_results> arg0,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
    ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> arg3,
    ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> arg4,
    ffi.Pointer<realm_scheduler> arg5,
  ) {
    return _realm_results_add_notification_callback(
      arg0,
      userdata,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _realm_results_add_notification_callback_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_add_notification_callback>>(
          'realm_results_add_notification_callback');
  late final _dart_realm_results_add_notification_callback
      _realm_results_add_notification_callback =
      _realm_results_add_notification_callback_ptr
          .asFunction<_dart_realm_results_add_notification_callback>();

  /// Get an results object from a thread-safe reference, potentially originating
  /// in a different `realm_t` instance
  ffi.Pointer<realm_results> realm_results_from_thread_safe_reference(
    ffi.Pointer<shared_realm> arg0,
    ffi.Pointer<realm_thread_safe_reference> arg1,
  ) {
    return _realm_results_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_results_from_thread_safe_reference_ptr =
      _lookup<ffi.NativeFunction<_c_realm_results_from_thread_safe_reference>>(
          'realm_results_from_thread_safe_reference');
  late final _dart_realm_results_from_thread_safe_reference
      _realm_results_from_thread_safe_reference =
      _realm_results_from_thread_safe_reference_ptr
          .asFunction<_dart_realm_results_from_thread_safe_reference>();

  void realm_initializeDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _realm_initializeDartApiDL(
      data,
    );
  }

  late final _realm_initializeDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_realm_initializeDartApiDL>>(
          'realm_initializeDartApiDL');
  late final _dart_realm_initializeDartApiDL _realm_initializeDartApiDL =
      _realm_initializeDartApiDL_ptr
          .asFunction<_dart_realm_initializeDartApiDL>();

  bool realm_attach_finalizer(
    Object handle,
    ffi.Pointer<ffi.Void> realmPtr,
    int size,
  ) {
    return _realm_attach_finalizer(
          handle,
          realmPtr,
          size,
        ) !=
        0;
  }

  late final _realm_attach_finalizer_ptr =
      _lookup<ffi.NativeFunction<_c_realm_attach_finalizer>>(
          'realm_attach_finalizer');
  late final _dart_realm_attach_finalizer _realm_attach_finalizer =
      _realm_attach_finalizer_ptr.asFunction<_dart_realm_attach_finalizer>();

  ffi.Pointer<realm_scheduler> realm_dart_create_scheduler(
    int port,
  ) {
    return _realm_dart_create_scheduler(
      port,
    );
  }

  late final _realm_dart_create_scheduler_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dart_create_scheduler>>(
          'realm_dart_create_scheduler');
  late final _dart_realm_dart_create_scheduler _realm_dart_create_scheduler =
      _realm_dart_create_scheduler_ptr
          .asFunction<_dart_realm_dart_create_scheduler>();

  void realm_dart_scheduler_invoke(
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _realm_dart_scheduler_invoke(
      userData,
    );
  }

  late final _realm_dart_scheduler_invoke_ptr =
      _lookup<ffi.NativeFunction<_c_realm_dart_scheduler_invoke>>(
          'realm_dart_scheduler_invoke');
  late final _dart_realm_dart_scheduler_invoke _realm_dart_scheduler_invoke =
      _realm_dart_scheduler_invoke_ptr
          .asFunction<_dart_realm_dart_scheduler_invoke>();
}

class shared_realm extends ffi.Opaque {}

class realm_schema extends ffi.Opaque {}

class realm_scheduler extends ffi.Opaque {}

class realm_thread_safe_reference extends ffi.Opaque {}

class realm_object extends ffi.Opaque {}

class realm_list extends ffi.Opaque {}

class realm_set extends ffi.Opaque {}

class realm_dictionary extends ffi.Opaque {}

class realm_query extends ffi.Opaque {}

class realm_results extends ffi.Opaque {}

class realm_config extends ffi.Opaque {}

class realm_sync_config extends ffi.Opaque {}

abstract class realm_schema_mode_e {
  static const int RLM_SCHEMA_MODE_AUTOMATIC = 0;
  static const int RLM_SCHEMA_MODE_IMMUTABLE = 1;
  static const int RLM_SCHEMA_MODE_READ_ONLY_ALTERNATIVE = 2;
  static const int RLM_SCHEMA_MODE_RESET_FILE = 3;
  static const int RLM_SCHEMA_MODE_ADDITIVE_DISCOVERED = 4;
  static const int RLM_SCHEMA_MODE_ADDITIVE_EXPLICIT = 5;
  static const int RLM_SCHEMA_MODE_MANUAL = 6;
}

abstract class realm_value_type_e {
  static const int RLM_TYPE_NULL = 0;
  static const int RLM_TYPE_INT = 1;
  static const int RLM_TYPE_BOOL = 2;
  static const int RLM_TYPE_STRING = 3;
  static const int RLM_TYPE_BINARY = 4;
  static const int RLM_TYPE_TIMESTAMP = 5;
  static const int RLM_TYPE_FLOAT = 6;
  static const int RLM_TYPE_DOUBLE = 7;
  static const int RLM_TYPE_DECIMAL128 = 8;
  static const int RLM_TYPE_OBJECT_ID = 9;
  static const int RLM_TYPE_LINK = 10;
  static const int RLM_TYPE_UUID = 11;
}

abstract class realm_schema_validation_mode_e {
  static const int RLM_SCHEMA_VALIDATION_BASIC = 0;
  static const int RLM_SCHEMA_VALIDATION_SYNC = 1;
  static const int RLM_SCHEMA_VALIDATION_REJECT_EMBEDDED_ORPHANS = 2;
}

class realm_string_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  @ffi.IntPtr()
  external int size;
}

class realm_binary_t extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.IntPtr()
  external int size;
}

class realm_timestamp_t extends ffi.Struct {
  @ffi.Int64()
  external int seconds;

  @ffi.Int32()
  external int nanoseconds;
}

class realm_decimal128_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> w;
}

class realm_link_t extends ffi.Struct {
  @ffi.Uint32()
  external int target_table;

  @ffi.Int64()
  external int target;
}

class realm_object_id_t extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint8> bytes;
}

class realm_uuid_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> bytes;
}

class unnamedUnion_1 extends ffi.Union {
  @ffi.Int64()
  external int integer;

  @ffi.Uint8()
  external int boolean;

  external realm_string_t string;

  external realm_binary_t binary;

  external realm_timestamp_t timestamp;

  @ffi.Float()
  external double fnum;

  @ffi.Double()
  external double dnum;

  external realm_decimal128_t decimal128;

  external realm_object_id_t object_id;

  external realm_uuid_t uuid;

  external realm_link_t link;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> data;
}

class realm_value_t extends ffi.Struct {
  external unnamedUnion_1 values;

  @ffi.Int32()
  external int type;
}

class realm_version_id_t extends ffi.Struct {
  @ffi.Uint64()
  external int version;

  @ffi.Uint64()
  external int index;
}

class realm_async_error extends ffi.Opaque {}

abstract class realm_errno_e {
  static const int RLM_ERR_NONE = 0;
  static const int RLM_ERR_UNKNOWN = 1;
  static const int RLM_ERR_OTHER_EXCEPTION = 2;
  static const int RLM_ERR_OUT_OF_MEMORY = 3;
  static const int RLM_ERR_NOT_CLONABLE = 4;
  static const int RLM_ERR_NOT_IN_A_TRANSACTION = 5;
  static const int RLM_ERR_WRONG_THREAD = 6;
  static const int RLM_ERR_INVALIDATED_OBJECT = 7;
  static const int RLM_ERR_INVALID_PROPERTY = 8;
  static const int RLM_ERR_MISSING_PROPERTY_VALUE = 9;
  static const int RLM_ERR_PROPERTY_TYPE_MISMATCH = 10;
  static const int RLM_ERR_MISSING_PRIMARY_KEY = 11;
  static const int RLM_ERR_UNEXPECTED_PRIMARY_KEY = 12;
  static const int RLM_ERR_WRONG_PRIMARY_KEY_TYPE = 13;
  static const int RLM_ERR_MODIFY_PRIMARY_KEY = 14;
  static const int RLM_ERR_READ_ONLY_PROPERTY = 15;
  static const int RLM_ERR_PROPERTY_NOT_NULLABLE = 16;
  static const int RLM_ERR_INVALID_ARGUMENT = 17;
  static const int RLM_ERR_LOGIC = 18;
  static const int RLM_ERR_NO_SUCH_TABLE = 19;
  static const int RLM_ERR_NO_SUCH_OBJECT = 20;
  static const int RLM_ERR_CROSS_TABLE_LINK_TARGET = 21;
  static const int RLM_ERR_UNSUPPORTED_FILE_FORMAT_VERSION = 22;
  static const int RLM_ERR_MULTIPLE_SYNC_AGENTS = 23;
  static const int RLM_ERR_ADDRESS_SPACE_EXHAUSTED = 24;
  static const int RLM_ERR_MAXIMUM_FILE_SIZE_EXCEEDED = 25;
  static const int RLM_ERR_OUT_OF_DISK_SPACE = 26;
  static const int RLM_ERR_KEY_NOT_FOUND = 27;
  static const int RLM_ERR_COLUMN_NOT_FOUND = 28;
  static const int RLM_ERR_COLUMN_ALREADY_EXISTS = 29;
  static const int RLM_ERR_KEY_ALREADY_USED = 30;
  static const int RLM_ERR_SERIALIZATION_ERROR = 31;
  static const int RLM_ERR_INVALID_PATH_ERROR = 32;
  static const int RLM_ERR_DUPLICATE_PRIMARY_KEY_VALUE = 33;
  static const int RLM_ERR_INDEX_OUT_OF_BOUNDS = 34;
  static const int RLM_ERR_INVALID_QUERY_STRING = 35;
  static const int RLM_ERR_INVALID_QUERY = 36;

  /// < A user-provided callback failed.
  static const int RLM_ERR_CALLBACK = 1000000;
}

abstract class realm_logic_error_kind_e {
  static const int RLM_LOGIC_ERR_NONE = 0;
  static const int RLM_LOGIC_ERR_STRING_TOO_BIG = 1;
}

class unnamedUnion_2 extends ffi.Union {
  @ffi.Int32()
  external int code;

  @ffi.Int32()
  external int logic_error_kind;
}

class realm_error_t extends ffi.Struct {
  @ffi.Int32()
  external int error;

  external ffi.Pointer<ffi.Int8> message;

  external unnamedUnion_2 kind;
}

abstract class realm_column_attr_e {
  static const int RLM_COLUMN_ATTR_NONE = 0;
  static const int RLM_COLUMN_ATTR_INDEXED = 1;
  static const int RLM_COLUMN_ATTR_UNIQUE = 2;
  static const int RLM_COLUMN_ATTR_RESERVED = 4;
  static const int RLM_COLUMN_ATTR_STRONG_LINKS = 8;
  static const int RLM_COLUMN_ATTR_NULLABLE = 16;
  static const int RLM_COLUMN_ATTR_LIST = 32;
  static const int RLM_COLUMN_ATTR_DICTIONARY = 64;
  static const int RLM_COLUMN_ATTR_COLLECTION = 96;
}

abstract class realm_property_type_e {
  static const int RLM_PROPERTY_TYPE_INT = 0;
  static const int RLM_PROPERTY_TYPE_BOOL = 1;
  static const int RLM_PROPERTY_TYPE_STRING = 2;
  static const int RLM_PROPERTY_TYPE_BINARY = 4;
  static const int RLM_PROPERTY_TYPE_MIXED = 6;
  static const int RLM_PROPERTY_TYPE_TIMESTAMP = 8;
  static const int RLM_PROPERTY_TYPE_FLOAT = 9;
  static const int RLM_PROPERTY_TYPE_DOUBLE = 10;
  static const int RLM_PROPERTY_TYPE_DECIMAL128 = 11;
  static const int RLM_PROPERTY_TYPE_OBJECT = 12;
  static const int RLM_PROPERTY_TYPE_LINKING_OBJECTS = 14;
  static const int RLM_PROPERTY_TYPE_OBJECT_ID = 15;
  static const int RLM_PROPERTY_TYPE_UUID = 17;
}

abstract class realm_collection_type_e {
  static const int RLM_COLLECTION_TYPE_NONE = 0;
  static const int RLM_COLLECTION_TYPE_LIST = 1;
  static const int RLM_COLLECTION_TYPE_SET = 2;
  static const int RLM_COLLECTION_TYPE_DICTIONARY = 4;
}

class realm_property_info_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> public_name;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int collection_type;

  external ffi.Pointer<ffi.Int8> link_target;

  external ffi.Pointer<ffi.Int8> link_origin_property_name;

  @ffi.Int64()
  external int key;

  @ffi.Int32()
  external int flags;
}

class realm_class_info_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> primary_key;

  @ffi.IntPtr()
  external int num_properties;

  @ffi.IntPtr()
  external int num_computed_properties;

  @ffi.Uint32()
  external int key;

  @ffi.Int32()
  external int flags;
}

abstract class realm_class_flags_e {
  static const int RLM_CLASS_NORMAL = 0;
  static const int RLM_CLASS_EMBEDDED = 1;
}

abstract class realm_property_flags_e {
  static const int RLM_PROPERTY_NORMAL = 0;
  static const int RLM_PROPERTY_NULLABLE = 1;
  static const int RLM_PROPERTY_PRIMARY_KEY = 2;
  static const int RLM_PROPERTY_INDEXED = 4;
}

class realm_notification_token extends ffi.Opaque {}

class realm_object_changes extends ffi.Opaque {}

class realm_collection_changes extends ffi.Opaque {}

class realm_collection_move_t extends ffi.Struct {
  @ffi.IntPtr()
  external int from;

  @ffi.IntPtr()
  external int to;
}

class realm_index_range_t extends ffi.Struct {
  @ffi.IntPtr()
  external int from;

  @ffi.IntPtr()
  external int to;
}

typedef _c_realm_get_version_id = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_version_id_t> out_version,
);

typedef _dart_realm_get_version_id = int Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_version_id_t> out_version,
);

typedef _c_realm_get_library_version = ffi.Pointer<ffi.Int8> Function();

typedef _dart_realm_get_library_version = ffi.Pointer<ffi.Int8> Function();

typedef _c_realm_get_library_version_numbers = ffi.Void Function(
  ffi.Pointer<ffi.Int32> out_major,
  ffi.Pointer<ffi.Int32> out_minor,
  ffi.Pointer<ffi.Int32> out_patch,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out_extra,
);

typedef _dart_realm_get_library_version_numbers = void Function(
  ffi.Pointer<ffi.Int32> out_major,
  ffi.Pointer<ffi.Int32> out_minor,
  ffi.Pointer<ffi.Int32> out_patch,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out_extra,
);

typedef _c_realm_get_last_error = ffi.Uint8 Function(
  ffi.Pointer<realm_error_t> err,
);

typedef _dart_realm_get_last_error = int Function(
  ffi.Pointer<realm_error_t> err,
);

typedef _c_realm_get_async_error = ffi.Void Function(
  ffi.Pointer<realm_async_error> err,
  ffi.Pointer<realm_error_t> out_err,
);

typedef _dart_realm_get_async_error = void Function(
  ffi.Pointer<realm_async_error> err,
  ffi.Pointer<realm_error_t> out_err,
);

typedef _c_realm_get_last_error_as_async_error = ffi.Pointer<realm_async_error>
    Function();

typedef _dart_realm_get_last_error_as_async_error
    = ffi.Pointer<realm_async_error> Function();

typedef _c_realm_clear_last_error = ffi.Uint8 Function();

typedef _dart_realm_clear_last_error = int Function();

typedef _c_realm_release = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_realm_release = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_realm_clone = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_realm_clone = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realm_equals = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_realm_equals = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_realm_is_frozen = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_realm_is_frozen = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realm_create_thread_safe_reference
    = ffi.Pointer<realm_thread_safe_reference> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_realm_create_thread_safe_reference
    = ffi.Pointer<realm_thread_safe_reference> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realm_config_new = ffi.Pointer<realm_config> Function();

typedef _dart_realm_config_new = ffi.Pointer<realm_config> Function();

typedef _c_realm_config_get_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_path = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_realm_config_set_path = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_realm_config_get_encryption_key = ffi.IntPtr Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Uint8> out_key,
);

typedef _dart_realm_config_get_encryption_key = int Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Uint8> out_key,
);

typedef _c_realm_config_set_encryption_key = ffi.Uint8 Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Uint8> key,
  ffi.IntPtr key_size,
);

typedef _dart_realm_config_set_encryption_key = int Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Uint8> key,
  int key_size,
);

typedef _c_realm_config_get_schema = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_schema = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_schema = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_schema> schema,
);

typedef _dart_realm_config_set_schema = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_schema> schema,
);

typedef _c_realm_config_get_schema_version = ffi.Uint64 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_schema_version = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_schema_version = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Uint64 version,
);

typedef _dart_realm_config_set_schema_version = void Function(
  ffi.Pointer<realm_config> arg0,
  int version,
);

typedef _c_realm_config_get_schema_mode = ffi.Int32 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_schema_mode = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_schema_mode = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Int32 arg1,
);

typedef _dart_realm_config_set_schema_mode = void Function(
  ffi.Pointer<realm_config> arg0,
  int arg1,
);

typedef realm_migration_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<shared_realm>,
  ffi.Pointer<shared_realm>,
  ffi.Pointer<realm_schema>,
);

typedef _c_realm_config_set_migration_function = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_realm_config_set_migration_function = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef realm_data_initialization_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<shared_realm>,
);

typedef _c_realm_config_set_data_initialization_function = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_realm_config_set_data_initialization_function = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef realm_should_compact_on_launch_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _c_realm_config_set_should_compact_on_launch_function = ffi.Void
    Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_should_compact_on_launch_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_realm_config_set_should_compact_on_launch_function = void
    Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.NativeFunction<realm_should_compact_on_launch_func_t>> arg1,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_realm_config_get_disable_format_upgrade = ffi.Uint8 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_disable_format_upgrade = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_disable_format_upgrade = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_realm_config_set_disable_format_upgrade = void Function(
  ffi.Pointer<realm_config> arg0,
  int arg1,
);

typedef _c_realm_config_get_automatic_change_notifications = ffi.Uint8 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_automatic_change_notifications = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_automatic_change_notifications = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_realm_config_set_automatic_change_notifications = void Function(
  ffi.Pointer<realm_config> arg0,
  int arg1,
);

typedef _c_realm_config_set_scheduler = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_scheduler> arg1,
);

typedef _dart_realm_config_set_scheduler = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_scheduler> arg1,
);

typedef _c_realm_config_set_sync_config = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_sync_config> arg1,
);

typedef _dart_realm_config_set_sync_config = void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<realm_sync_config> arg1,
);

typedef _c_realm_config_get_force_sync_history = ffi.Uint8 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_force_sync_history = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_force_sync_history = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_realm_config_set_force_sync_history = void Function(
  ffi.Pointer<realm_config> arg0,
  int arg1,
);

typedef _c_realm_config_set_audit_factory = ffi.Uint8 Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_realm_config_set_audit_factory = int Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_realm_config_get_max_number_of_active_versions = ffi.Uint64 Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _dart_realm_config_get_max_number_of_active_versions = int Function(
  ffi.Pointer<realm_config> arg0,
);

typedef _c_realm_config_set_max_number_of_active_versions = ffi.Void Function(
  ffi.Pointer<realm_config> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_realm_config_set_max_number_of_active_versions = void Function(
  ffi.Pointer<realm_config> arg0,
  int arg1,
);

typedef realm_free_userdata_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef realm_scheduler_notify_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef realm_scheduler_is_on_thread_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
);

typedef realm_scheduler_is_same_as_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef realm_scheduler_can_deliver_notifications_func_t = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
);

typedef realm_scheduler_set_notify_callback_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>>,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>>,
);

typedef _c_realm_scheduler_new = ffi.Pointer<realm_scheduler> Function(
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> notify,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_on_thread_func_t>>
      is_on_thread,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_same_as_func_t>> is_same_as,
  ffi.Pointer<
          ffi.NativeFunction<realm_scheduler_can_deliver_notifications_func_t>>
      can_deliver_notifications,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_set_notify_callback_func_t>>
      set_notify_callback,
);

typedef _dart_realm_scheduler_new = ffi.Pointer<realm_scheduler> Function(
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> notify,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_on_thread_func_t>>
      is_on_thread,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_is_same_as_func_t>> is_same_as,
  ffi.Pointer<
          ffi.NativeFunction<realm_scheduler_can_deliver_notifications_func_t>>
      can_deliver_notifications,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_set_notify_callback_func_t>>
      set_notify_callback,
);

typedef _c_realm_scheduler_make_default = ffi.Pointer<realm_scheduler>
    Function();

typedef _dart_realm_scheduler_make_default = ffi.Pointer<realm_scheduler>
    Function();

typedef _c_realm_scheduler_get_frozen = ffi.Pointer<realm_scheduler> Function();

typedef _dart_realm_scheduler_get_frozen = ffi.Pointer<realm_scheduler>
    Function();

typedef _c_realm_scheduler_has_default_factory = ffi.Uint8 Function();

typedef _dart_realm_scheduler_has_default_factory = int Function();

typedef realm_scheduler_default_factory_func_t = ffi.Pointer<realm_scheduler>
    Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_realm_scheduler_set_default_factory = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_default_factory_func_t>> arg2,
);

typedef _dart_realm_scheduler_set_default_factory = int Function(
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg1,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_default_factory_func_t>> arg2,
);

typedef _c_realm_scheduler_notify = ffi.Void Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _dart_realm_scheduler_notify = void Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _c_realm_scheduler_is_on_thread = ffi.Uint8 Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _dart_realm_scheduler_is_on_thread = int Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _c_realm_scheduler_can_deliver_notifications = ffi.Uint8 Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _dart_realm_scheduler_can_deliver_notifications = int Function(
  ffi.Pointer<realm_scheduler> arg0,
);

typedef _c_realm_scheduler_set_notify_callback = ffi.Uint8 Function(
  ffi.Pointer<realm_scheduler> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> arg3,
);

typedef _dart_realm_scheduler_set_notify_callback = int Function(
  ffi.Pointer<realm_scheduler> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
  ffi.Pointer<ffi.NativeFunction<realm_scheduler_notify_func_t>> arg3,
);

typedef _c_realm_open = ffi.Pointer<shared_realm> Function(
  ffi.Pointer<realm_config> config,
);

typedef _dart_realm_open = ffi.Pointer<shared_realm> Function(
  ffi.Pointer<realm_config> config,
);

typedef _c_realm_from_thread_safe_reference = ffi.Pointer<shared_realm>
    Function(
  ffi.Pointer<realm_thread_safe_reference> tsr,
  ffi.Pointer<realm_scheduler> scheduler,
);

typedef _dart_realm_from_thread_safe_reference = ffi.Pointer<shared_realm>
    Function(
  ffi.Pointer<realm_thread_safe_reference> tsr,
  ffi.Pointer<realm_scheduler> scheduler,
);

typedef _c_realm_close = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_close = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_is_closed = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_is_closed = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_begin_read = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_begin_read = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_begin_write = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_begin_write = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_is_writable = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_is_writable = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_commit = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_commit = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_rollback = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_rollback = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_refresh = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_refresh = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_freeze = ffi.Pointer<shared_realm> Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_freeze = ffi.Pointer<shared_realm> Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_compact = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint8> did_compact,
);

typedef _dart_realm_compact = int Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint8> did_compact,
);

typedef _c_realm_schema_new = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<realm_class_info_t> classes,
  ffi.IntPtr num_classes,
  ffi.Pointer<ffi.Pointer<realm_property_info_t>> class_properties,
);

typedef _dart_realm_schema_new = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<realm_class_info_t> classes,
  int num_classes,
  ffi.Pointer<ffi.Pointer<realm_property_info_t>> class_properties,
);

typedef _c_realm_get_schema = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_get_schema = ffi.Pointer<realm_schema> Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_update_schema = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> realm,
  ffi.Pointer<realm_schema> schema,
);

typedef _dart_realm_update_schema = int Function(
  ffi.Pointer<shared_realm> realm,
  ffi.Pointer<realm_schema> schema,
);

typedef _c_realm_update_schema_advanced = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> realm,
  ffi.Pointer<realm_schema> schema,
  ffi.Uint64 version,
  ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> migration_func,
  ffi.Pointer<ffi.Void> migration_func_userdata,
  ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>>
      data_init_func,
  ffi.Pointer<ffi.Void> data_init_func_userdata,
  ffi.Uint8 is_in_transaction,
);

typedef _dart_realm_update_schema_advanced = int Function(
  ffi.Pointer<shared_realm> realm,
  ffi.Pointer<realm_schema> schema,
  int version,
  ffi.Pointer<ffi.NativeFunction<realm_migration_func_t>> migration_func,
  ffi.Pointer<ffi.Void> migration_func_userdata,
  ffi.Pointer<ffi.NativeFunction<realm_data_initialization_func_t>>
      data_init_func,
  ffi.Pointer<ffi.Void> data_init_func_userdata,
  int is_in_transaction,
);

typedef _c_realm_schema_validate = ffi.Uint8 Function(
  ffi.Pointer<realm_schema> arg0,
  ffi.Uint64 validation_mode,
);

typedef _dart_realm_schema_validate = int Function(
  ffi.Pointer<realm_schema> arg0,
  int validation_mode,
);

typedef _c_realm_get_num_classes = ffi.IntPtr Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _dart_realm_get_num_classes = int Function(
  ffi.Pointer<shared_realm> arg0,
);

typedef _c_realm_get_class_keys = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint32> out_keys,
  ffi.IntPtr max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _dart_realm_get_class_keys = int Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint32> out_keys,
  int max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _c_realm_find_class = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_class_info_t> out_class_info,
);

typedef _dart_realm_find_class = int Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_class_info_t> out_class_info,
);

typedef _c_realm_get_class = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 key,
  ffi.Pointer<realm_class_info_t> out_class_info,
);

typedef _dart_realm_get_class = int Function(
  ffi.Pointer<shared_realm> arg0,
  int key,
  ffi.Pointer<realm_class_info_t> out_class_info,
);

typedef _c_realm_get_class_properties = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 key,
  ffi.Pointer<realm_property_info_t> out_properties,
  ffi.IntPtr max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _dart_realm_get_class_properties = int Function(
  ffi.Pointer<shared_realm> arg0,
  int key,
  ffi.Pointer<realm_property_info_t> out_properties,
  int max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _c_realm_get_property_keys = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 key,
  ffi.Pointer<ffi.Int64> out_col_keys,
  ffi.IntPtr max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _dart_realm_get_property_keys = int Function(
  ffi.Pointer<shared_realm> arg0,
  int key,
  ffi.Pointer<ffi.Int64> out_col_keys,
  int max,
  ffi.Pointer<ffi.IntPtr> out_n,
);

typedef _c_realm_get_property = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 class_key,
  ffi.Int64 key,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _dart_realm_get_property = int Function(
  ffi.Pointer<shared_realm> arg0,
  int class_key,
  int key,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _c_realm_find_property = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 class_key,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _dart_realm_find_property = int Function(
  ffi.Pointer<shared_realm> arg0,
  int class_key,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _c_realm_find_property_by_public_name = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 class_key,
  ffi.Pointer<ffi.Int8> public_name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _dart_realm_find_property_by_public_name = int Function(
  ffi.Pointer<shared_realm> arg0,
  int class_key,
  ffi.Pointer<ffi.Int8> public_name,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _c_realm_find_primary_key_property = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 class_key,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _dart_realm_find_primary_key_property = int Function(
  ffi.Pointer<shared_realm> arg0,
  int class_key,
  ffi.Pointer<ffi.Uint8> out_found,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _c_realm_get_num_objects = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _dart_realm_get_num_objects = int Function(
  ffi.Pointer<shared_realm> arg0,
  int arg1,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _c_realm_get_num_versions = ffi.Uint8 Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint64> out_versions_count,
);

typedef _dart_realm_get_num_versions = int Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<ffi.Uint64> out_versions_count,
);

typedef _c_realm_get_object = ffi.Pointer<realm_object> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 class_key,
  ffi.Int64 obj_key,
);

typedef _dart_realm_get_object = ffi.Pointer<realm_object> Function(
  ffi.Pointer<shared_realm> arg0,
  int class_key,
  int obj_key,
);

typedef _c_realm_object_find_with_primary_key = ffi.Pointer<realm_object>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 arg1,
  realm_value_t pk,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_object_find_with_primary_key = ffi.Pointer<realm_object>
    Function(
  ffi.Pointer<shared_realm> arg0,
  int arg1,
  realm_value_t pk,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_object_find_all = ffi.Pointer<realm_results> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_realm_object_find_all = ffi.Pointer<realm_results> Function(
  ffi.Pointer<shared_realm> arg0,
  int arg1,
);

typedef _c_realm_object_create = ffi.Pointer<realm_object> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_realm_object_create = ffi.Pointer<realm_object> Function(
  ffi.Pointer<shared_realm> arg0,
  int arg1,
);

typedef _c_realm_object_create_with_primary_key = ffi.Pointer<realm_object>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 arg1,
  realm_value_t pk,
);

typedef _dart_realm_object_create_with_primary_key = ffi.Pointer<realm_object>
    Function(
  ffi.Pointer<shared_realm> arg0,
  int arg1,
  realm_value_t pk,
);

typedef _c_realm_object_delete = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
);

typedef _dart_realm_object_delete = int Function(
  ffi.Pointer<realm_object> arg0,
);

typedef _c_realm_object_is_valid = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
);

typedef _dart_realm_object_is_valid = int Function(
  ffi.Pointer<realm_object> arg0,
);

typedef _c_realm_object_get_key = ffi.Int64 Function(
  ffi.Pointer<realm_object> object,
);

typedef _dart_realm_object_get_key = int Function(
  ffi.Pointer<realm_object> object,
);

typedef _c_realm_object_get_table = ffi.Uint32 Function(
  ffi.Pointer<realm_object> object,
);

typedef _dart_realm_object_get_table = int Function(
  ffi.Pointer<realm_object> object,
);

typedef _c_realm_object_as_link = realm_link_t Function(
  ffi.Pointer<realm_object> object,
);

typedef _dart_realm_object_as_link = realm_link_t Function(
  ffi.Pointer<realm_object> object,
);

typedef realm_on_object_change_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<realm_object_changes>,
);

typedef realm_callback_error_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<realm_async_error>,
);

typedef _c_realm_object_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_object_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _dart_realm_object_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_object_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _c_realm_object_from_thread_safe_reference = ffi.Pointer<realm_object>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _dart_realm_object_from_thread_safe_reference
    = ffi.Pointer<realm_object> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _c_realm_get_value = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _dart_realm_get_value = int Function(
  ffi.Pointer<realm_object> arg0,
  int arg1,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _c_realm_get_values = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
  ffi.IntPtr num_values,
  ffi.Pointer<ffi.Int64> properties,
  ffi.Pointer<realm_value_t> out_values,
);

typedef _dart_realm_get_values = int Function(
  ffi.Pointer<realm_object> arg0,
  int num_values,
  ffi.Pointer<ffi.Int64> properties,
  ffi.Pointer<realm_value_t> out_values,
);

typedef _c_realm_set_value = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Int64 arg1,
  realm_value_t new_value,
  ffi.Uint8 is_default,
);

typedef _dart_realm_set_value = int Function(
  ffi.Pointer<realm_object> arg0,
  int arg1,
  realm_value_t new_value,
  int is_default,
);

typedef _c_realm_set_values = ffi.Uint8 Function(
  ffi.Pointer<realm_object> arg0,
  ffi.IntPtr num_values,
  ffi.Pointer<ffi.Int64> properties,
  ffi.Pointer<realm_value_t> values,
  ffi.Uint8 is_default,
);

typedef _dart_realm_set_values = int Function(
  ffi.Pointer<realm_object> arg0,
  int num_values,
  ffi.Pointer<ffi.Int64> properties,
  ffi.Pointer<realm_value_t> values,
  int is_default,
);

typedef _c_realm_get_list = ffi.Pointer<realm_list> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Int64 arg1,
);

typedef _dart_realm_get_list = ffi.Pointer<realm_list> Function(
  ffi.Pointer<realm_object> arg0,
  int arg1,
);

typedef _c_realm_list_size = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<ffi.IntPtr> out_size,
);

typedef _dart_realm_list_size = int Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<ffi.IntPtr> out_size,
);

typedef _c_realm_list_get_property = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _dart_realm_list_get_property = int Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<realm_property_info_t> out_property_info,
);

typedef _c_realm_list_get = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.IntPtr index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _dart_realm_list_get = int Function(
  ffi.Pointer<realm_list> arg0,
  int index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _c_realm_list_set = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.IntPtr index,
  realm_value_t value,
);

typedef _dart_realm_list_set = int Function(
  ffi.Pointer<realm_list> arg0,
  int index,
  realm_value_t value,
);

typedef _c_realm_list_insert = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.IntPtr index,
  realm_value_t value,
);

typedef _dart_realm_list_insert = int Function(
  ffi.Pointer<realm_list> arg0,
  int index,
  realm_value_t value,
);

typedef _c_realm_list_erase = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.IntPtr index,
);

typedef _dart_realm_list_erase = int Function(
  ffi.Pointer<realm_list> arg0,
  int index,
);

typedef _c_realm_list_clear = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
);

typedef _dart_realm_list_clear = int Function(
  ffi.Pointer<realm_list> arg0,
);

typedef _c_realm_list_remove_all = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
);

typedef _dart_realm_list_remove_all = int Function(
  ffi.Pointer<realm_list> arg0,
);

typedef _c_realm_list_assign = ffi.Uint8 Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<realm_value_t> values,
  ffi.IntPtr num_values,
);

typedef _dart_realm_list_assign = int Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<realm_value_t> values,
  int num_values,
);

typedef realm_on_collection_change_func_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<realm_collection_changes>,
);

typedef _c_realm_list_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _dart_realm_list_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_list> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _c_realm_list_from_thread_safe_reference = ffi.Pointer<realm_list>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _dart_realm_list_from_thread_safe_reference = ffi.Pointer<realm_list>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _c_realm_object_changes_is_deleted = ffi.Uint8 Function(
  ffi.Pointer<realm_object_changes> arg0,
);

typedef _dart_realm_object_changes_is_deleted = int Function(
  ffi.Pointer<realm_object_changes> arg0,
);

typedef _c_realm_object_changes_get_num_modified_properties = ffi.IntPtr
    Function(
  ffi.Pointer<realm_object_changes> arg0,
);

typedef _dart_realm_object_changes_get_num_modified_properties = int Function(
  ffi.Pointer<realm_object_changes> arg0,
);

typedef _c_realm_object_changes_get_modified_properties = ffi.IntPtr Function(
  ffi.Pointer<realm_object_changes> arg0,
  ffi.Pointer<ffi.Int64> out_modified,
  ffi.IntPtr max,
);

typedef _dart_realm_object_changes_get_modified_properties = int Function(
  ffi.Pointer<realm_object_changes> arg0,
  ffi.Pointer<ffi.Int64> out_modified,
  int max,
);

typedef _c_realm_collection_changes_get_num_changes = ffi.Void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_num_deletions,
  ffi.Pointer<ffi.IntPtr> out_num_insertions,
  ffi.Pointer<ffi.IntPtr> out_num_modifications,
  ffi.Pointer<ffi.IntPtr> out_num_moves,
);

typedef _dart_realm_collection_changes_get_num_changes = void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_num_deletions,
  ffi.Pointer<ffi.IntPtr> out_num_insertions,
  ffi.Pointer<ffi.IntPtr> out_num_modifications,
  ffi.Pointer<ffi.IntPtr> out_num_moves,
);

typedef _c_realm_collection_changes_get_num_ranges = ffi.Void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_num_deletion_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_insertion_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_modification_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_moves,
);

typedef _dart_realm_collection_changes_get_num_ranges = void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_num_deletion_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_insertion_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_modification_ranges,
  ffi.Pointer<ffi.IntPtr> out_num_moves,
);

typedef _c_realm_collection_changes_get_changes = ffi.Void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_deletion_indices,
  ffi.IntPtr max_deletion_indices,
  ffi.Pointer<ffi.IntPtr> out_insertion_indices,
  ffi.IntPtr max_insertion_indices,
  ffi.Pointer<ffi.IntPtr> out_modification_indices,
  ffi.IntPtr max_modification_indices,
  ffi.Pointer<ffi.IntPtr> out_modification_indices_after,
  ffi.IntPtr max_modification_indices_after,
  ffi.Pointer<realm_collection_move_t> out_moves,
  ffi.IntPtr max_moves,
);

typedef _dart_realm_collection_changes_get_changes = void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<ffi.IntPtr> out_deletion_indices,
  int max_deletion_indices,
  ffi.Pointer<ffi.IntPtr> out_insertion_indices,
  int max_insertion_indices,
  ffi.Pointer<ffi.IntPtr> out_modification_indices,
  int max_modification_indices,
  ffi.Pointer<ffi.IntPtr> out_modification_indices_after,
  int max_modification_indices_after,
  ffi.Pointer<realm_collection_move_t> out_moves,
  int max_moves,
);

typedef _c_realm_collection_changes_get_ranges = ffi.Void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<realm_index_range_t> out_deletion_ranges,
  ffi.IntPtr max_deletion_ranges,
  ffi.Pointer<realm_index_range_t> out_insertion_ranges,
  ffi.IntPtr max_insertion_ranges,
  ffi.Pointer<realm_index_range_t> out_modification_ranges,
  ffi.IntPtr max_modification_ranges,
  ffi.Pointer<realm_index_range_t> out_modification_ranges_after,
  ffi.IntPtr max_modification_ranges_after,
  ffi.Pointer<realm_collection_move_t> out_moves,
  ffi.IntPtr max_moves,
);

typedef _dart_realm_collection_changes_get_ranges = void Function(
  ffi.Pointer<realm_collection_changes> arg0,
  ffi.Pointer<realm_index_range_t> out_deletion_ranges,
  int max_deletion_ranges,
  ffi.Pointer<realm_index_range_t> out_insertion_ranges,
  int max_insertion_ranges,
  ffi.Pointer<realm_index_range_t> out_modification_ranges,
  int max_modification_ranges,
  ffi.Pointer<realm_index_range_t> out_modification_ranges_after,
  int max_modification_ranges_after,
  ffi.Pointer<realm_collection_move_t> out_moves,
  int max_moves,
);

typedef _c_realm_get_set = ffi.Pointer<realm_set> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Int64 arg1,
);

typedef _dart_realm_get_set = ffi.Pointer<realm_set> Function(
  ffi.Pointer<realm_object> arg0,
  int arg1,
);

typedef _c_realm_set_size = ffi.IntPtr Function(
  ffi.Pointer<realm_set> arg0,
);

typedef _dart_realm_set_size = int Function(
  ffi.Pointer<realm_set> arg0,
);

typedef _c_realm_set_get = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
  ffi.IntPtr index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _dart_realm_set_get = int Function(
  ffi.Pointer<realm_set> arg0,
  int index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _c_realm_set_find = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  ffi.Pointer<ffi.IntPtr> out_index,
);

typedef _dart_realm_set_find = int Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  ffi.Pointer<ffi.IntPtr> out_index,
);

typedef _c_realm_set_insert = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  ffi.IntPtr out_index,
);

typedef _dart_realm_set_insert = int Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  int out_index,
);

typedef _c_realm_set_erase = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  ffi.Pointer<ffi.Uint8> out_erased,
);

typedef _dart_realm_set_erase = int Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t value,
  ffi.Pointer<ffi.Uint8> out_erased,
);

typedef _c_realm_set_clear = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
);

typedef _dart_realm_set_clear = int Function(
  ffi.Pointer<realm_set> arg0,
);

typedef _c_realm_set_assign = ffi.Uint8 Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t values,
  ffi.IntPtr num_values,
);

typedef _dart_realm_set_assign = int Function(
  ffi.Pointer<realm_set> arg0,
  realm_value_t values,
  int num_values,
);

typedef _c_realm_set_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _dart_realm_set_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _c_realm_get_dictionary = ffi.Pointer<realm_dictionary> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Int64 arg1,
);

typedef _dart_realm_get_dictionary = ffi.Pointer<realm_dictionary> Function(
  ffi.Pointer<realm_object> arg0,
  int arg1,
);

typedef _c_realm_dictionary_size = ffi.IntPtr Function(
  ffi.Pointer<realm_dictionary> arg0,
);

typedef _dart_realm_dictionary_size = int Function(
  ffi.Pointer<realm_dictionary> arg0,
);

typedef _c_realm_dictionary_get = ffi.Uint8 Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  ffi.Pointer<realm_value_t> out_value,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_dictionary_get = int Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  ffi.Pointer<realm_value_t> out_value,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_dictionary_insert = ffi.Uint8 Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  realm_value_t value,
  ffi.Pointer<ffi.Uint8> out_inserted,
  ffi.Pointer<ffi.IntPtr> out_index,
);

typedef _dart_realm_dictionary_insert = int Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  realm_value_t value,
  ffi.Pointer<ffi.Uint8> out_inserted,
  ffi.Pointer<ffi.IntPtr> out_index,
);

typedef _c_realm_dictionary_erase = ffi.Uint8 Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  ffi.Pointer<ffi.Uint8> out_erased,
);

typedef _dart_realm_dictionary_erase = int Function(
  ffi.Pointer<realm_dictionary> arg0,
  realm_value_t key,
  ffi.Pointer<ffi.Uint8> out_erased,
);

typedef _c_realm_dictionary_clear = ffi.Uint8 Function(
  ffi.Pointer<realm_dictionary> arg0,
);

typedef _dart_realm_dictionary_clear = int Function(
  ffi.Pointer<realm_dictionary> arg0,
);

typedef _c_realm_dictionary_assign = ffi.Uint8 Function(
  ffi.Pointer<realm_dictionary> arg0,
  ffi.Pointer<ffi.Pointer<realm_value_t>> pairs,
  ffi.IntPtr num_pairs,
);

typedef _dart_realm_dictionary_assign = int Function(
  ffi.Pointer<realm_dictionary> arg0,
  ffi.Pointer<ffi.Pointer<realm_value_t>> pairs,
  int num_pairs,
);

typedef _c_realm_dictionary_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _dart_realm_dictionary_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_object> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> free,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> on_change,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> on_error,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _c_realm_query_parse = ffi.Pointer<realm_query> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Uint32 target_table,
  ffi.Pointer<ffi.Int8> query_string,
  ffi.IntPtr num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _dart_realm_query_parse = ffi.Pointer<realm_query> Function(
  ffi.Pointer<shared_realm> arg0,
  int target_table,
  ffi.Pointer<ffi.Int8> query_string,
  int num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _c_realm_query_parse_for_list = ffi.Pointer<realm_query> Function(
  ffi.Pointer<realm_list> target_list,
  ffi.Pointer<ffi.Int8> query_string,
  ffi.IntPtr num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _dart_realm_query_parse_for_list = ffi.Pointer<realm_query> Function(
  ffi.Pointer<realm_list> target_list,
  ffi.Pointer<ffi.Int8> query_string,
  int num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _c_realm_query_parse_for_results = ffi.Pointer<realm_query> Function(
  ffi.Pointer<realm_results> target_results,
  ffi.Pointer<ffi.Int8> query_string,
  ffi.IntPtr num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _dart_realm_query_parse_for_results = ffi.Pointer<realm_query> Function(
  ffi.Pointer<realm_results> target_results,
  ffi.Pointer<ffi.Int8> query_string,
  int num_args,
  ffi.Pointer<realm_value_t> args,
);

typedef _c_realm_query_count = ffi.Uint8 Function(
  ffi.Pointer<realm_query> arg0,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _dart_realm_query_count = int Function(
  ffi.Pointer<realm_query> arg0,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _c_realm_query_find_first = ffi.Uint8 Function(
  ffi.Pointer<realm_query> arg0,
  ffi.Pointer<realm_value_t> out_value,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_query_find_first = int Function(
  ffi.Pointer<realm_query> arg0,
  ffi.Pointer<realm_value_t> out_value,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_query_find_all = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_query> arg0,
);

typedef _dart_realm_query_find_all = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_query> arg0,
);

typedef _c_realm_query_delete_all = ffi.Uint8 Function(
  ffi.Pointer<realm_query> arg0,
);

typedef _dart_realm_query_delete_all = int Function(
  ffi.Pointer<realm_query> arg0,
);

typedef _c_realm_results_count = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _dart_realm_results_count = int Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<ffi.IntPtr> out_count,
);

typedef _c_realm_results_get = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.IntPtr index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _dart_realm_results_get = int Function(
  ffi.Pointer<realm_results> arg0,
  int index,
  ffi.Pointer<realm_value_t> out_value,
);

typedef _c_realm_results_get_object = ffi.Pointer<realm_object> Function(
  ffi.Pointer<realm_results> arg0,
  ffi.IntPtr index,
);

typedef _dart_realm_results_get_object = ffi.Pointer<realm_object> Function(
  ffi.Pointer<realm_results> arg0,
  int index,
);

typedef _c_realm_results_delete_all = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
);

typedef _dart_realm_results_delete_all = int Function(
  ffi.Pointer<realm_results> arg0,
);

typedef _c_realm_results_snapshot = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_results> arg0,
);

typedef _dart_realm_results_snapshot = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_results> arg0,
);

typedef _c_realm_results_freeze = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<shared_realm> frozen_realm,
);

typedef _dart_realm_results_freeze = ffi.Pointer<realm_results> Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<shared_realm> frozen_realm,
);

typedef _c_realm_results_min = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<realm_value_t> out_min,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_results_min = int Function(
  ffi.Pointer<realm_results> arg0,
  int arg1,
  ffi.Pointer<realm_value_t> out_min,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_results_max = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<realm_value_t> out_max,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_results_max = int Function(
  ffi.Pointer<realm_results> arg0,
  int arg1,
  ffi.Pointer<realm_value_t> out_max,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_results_sum = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<realm_value_t> out_sum,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_results_sum = int Function(
  ffi.Pointer<realm_results> arg0,
  int arg1,
  ffi.Pointer<realm_value_t> out_sum,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_results_average = ffi.Uint8 Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<realm_value_t> out_average,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _dart_realm_results_average = int Function(
  ffi.Pointer<realm_results> arg0,
  int arg1,
  ffi.Pointer<realm_value_t> out_average,
  ffi.Pointer<ffi.Uint8> out_found,
);

typedef _c_realm_results_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> arg3,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> arg4,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _dart_realm_results_add_notification_callback
    = ffi.Pointer<realm_notification_token> Function(
  ffi.Pointer<realm_results> arg0,
  ffi.Pointer<ffi.Void> userdata,
  ffi.Pointer<ffi.NativeFunction<realm_free_userdata_func_t>> arg2,
  ffi.Pointer<ffi.NativeFunction<realm_on_collection_change_func_t>> arg3,
  ffi.Pointer<ffi.NativeFunction<realm_callback_error_func_t>> arg4,
  ffi.Pointer<realm_scheduler> arg5,
);

typedef _c_realm_results_from_thread_safe_reference = ffi.Pointer<realm_results>
    Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _dart_realm_results_from_thread_safe_reference
    = ffi.Pointer<realm_results> Function(
  ffi.Pointer<shared_realm> arg0,
  ffi.Pointer<realm_thread_safe_reference> arg1,
);

typedef _c_realm_initializeDartApiDL = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_realm_initializeDartApiDL = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_realm_attach_finalizer = ffi.Uint8 Function(
  ffi.Handle handle,
  ffi.Pointer<ffi.Void> realmPtr,
  ffi.Int32 size,
);

typedef _dart_realm_attach_finalizer = int Function(
  Object handle,
  ffi.Pointer<ffi.Void> realmPtr,
  int size,
);

typedef _c_realm_dart_create_scheduler = ffi.Pointer<realm_scheduler> Function(
  ffi.Int64 port,
);

typedef _dart_realm_dart_create_scheduler = ffi.Pointer<realm_scheduler>
    Function(
  int port,
);

typedef _c_realm_dart_scheduler_invoke = ffi.Void Function(
  ffi.Pointer<ffi.Void> userData,
);

typedef _dart_realm_dart_scheduler_invoke = void Function(
  ffi.Pointer<ffi.Void> userData,
);
