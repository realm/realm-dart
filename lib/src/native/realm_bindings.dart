// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class RealmLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RealmLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RealmLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Get the VersionID of the current transaction.
  ///
  /// @param out_found True if version information is available. This requires an available Read or Write transaction.
  /// @param out_version The version of the current transaction. If `out_found` returns False, this returns (0,0).
  /// @return True if no exception occurred.
  bool realm_get_version_id(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_version_id_t> out_version,
  ) {
    return _realm_get_version_id(
          arg0,
          out_found,
          out_version,
        ) !=
        0;
  }

  late final _realm_get_version_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<realm_version_id_t>)>>('realm_get_version_id');
  late final _realm_get_version_id = _realm_get_version_idPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<realm_version_id_t>)>();

  /// Get a string representing the version number of the Realm library.
  ///
  /// @return A null-terminated string.
  ffi.Pointer<ffi.Int8> realm_get_library_version() {
    return _realm_get_library_version();
  }

  late final _realm_get_library_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'realm_get_library_version');
  late final _realm_get_library_version = _realm_get_library_versionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function()>();

  /// Get individual components of the version number of the Realm library.
  ///
  /// @param out_major The major version number (X.0.0).
  /// @param out_minor The minor version number (0.X.0).
  /// @param out_patch The patch version number (0.0.X).
  /// @param out_extra The extra version string (0.0.0-X).
  void realm_get_library_version_numbers(
    ffi.Pointer<ffi.Int32> out_major,
    ffi.Pointer<ffi.Int32> out_minor,
    ffi.Pointer<ffi.Int32> out_patch,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out_extra,
  ) {
    return _realm_get_library_version_numbers(
      out_major,
      out_minor,
      out_patch,
      out_extra,
    );
  }

  late final _realm_get_library_version_numbersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'realm_get_library_version_numbers');
  late final _realm_get_library_version_numbers =
      _realm_get_library_version_numbersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  /// Get the last error that happened on this thread.
  ///
  /// Errors are thread-local. Getting the error must happen on the same thread as
  /// the call that caused the error to occur. The error is specific to the current
  /// thread, and not the Realm instance for which the error occurred.
  ///
  /// Note: The error message in @a err will only be safe to use until the next API
  /// call is made on the current thread.
  ///
  /// Note: The error is not cleared by subsequent successful calls to this
  /// function, but it will be overwritten by subsequent failing calls to
  /// other library functions.
  ///
  /// Note: Calling this function does not clear the current last error.
  ///
  /// This function does not allocate any memory.
  ///
  /// @param err A pointer to a `realm_error_t` struct that will be populated with
  /// information about the last error, if there is one. May be NULL.
  /// @return True if an error occurred.
  bool realm_get_last_error(
    ffi.Pointer<realm_error_t> err,
  ) {
    return _realm_get_last_error(
          err,
        ) !=
        0;
  }

  late final _realm_get_last_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_error_t>)>>(
      'realm_get_last_error');
  late final _realm_get_last_error = _realm_get_last_errorPtr
      .asFunction<int Function(ffi.Pointer<realm_error_t>)>();

  /// Get information about an async error, potentially coming from another thread.
  ///
  /// This function does not allocate any memory.
  ///
  /// @param err A pointer to a `realm_error_t` struct that will be populated with
  /// information about the error. May not be NULL.
  /// @see realm_get_last_error()
  void realm_get_async_error(
    ffi.Pointer<realm_async_error_t> err,
    ffi.Pointer<realm_error_t> out_err,
  ) {
    return _realm_get_async_error(
      err,
      out_err,
    );
  }

  late final _realm_get_async_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_async_error_t>,
              ffi.Pointer<realm_error_t>)>>('realm_get_async_error');
  late final _realm_get_async_error = _realm_get_async_errorPtr.asFunction<
      void Function(
          ffi.Pointer<realm_async_error_t>, ffi.Pointer<realm_error_t>)>();

  /// Convert the last error to `realm_async_error_t`, which can safely be passed
  /// between threads.
  ///
  /// Note: This function does not clear the last error.
  ///
  /// @return A non-null pointer if there was an error on this thread.
  /// @see realm_get_last_error()
  /// @see realm_get_async_error()
  /// @see realm_clear_last_error()
  ffi.Pointer<realm_async_error_t> realm_get_last_error_as_async_error() {
    return _realm_get_last_error_as_async_error();
  }

  late final _realm_get_last_error_as_async_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<realm_async_error_t> Function()>>(
          'realm_get_last_error_as_async_error');
  late final _realm_get_last_error_as_async_error =
      _realm_get_last_error_as_async_errorPtr
          .asFunction<ffi.Pointer<realm_async_error_t> Function()>();

  /// Clear the last error on the calling thread.
  ///
  /// Use this if the system has recovered from an error, e.g. by closing the
  /// offending Realm and reopening it, freeing up resources, or similar.
  ///
  /// @return True if an error was cleared.
  bool realm_clear_last_error() {
    return _realm_clear_last_error() != 0;
  }

  late final _realm_clear_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'realm_clear_last_error');
  late final _realm_clear_last_error =
      _realm_clear_last_errorPtr.asFunction<int Function()>();

  /// Free memory allocated by the module this library was linked into.
  ///
  /// This is needed for raw memory buffers such as string copies or arrays
  /// returned from a library function. Realm C Wrapper objects on the other hand
  /// should always be freed with realm_release() only.
  void realm_free(
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _realm_free(
      buffer,
    );
  }

  late final _realm_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'realm_free');
  late final _realm_free =
      _realm_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Free any Realm C Wrapper object.
  ///
  /// Note: Any pointer returned from a library function is owned by the caller.
  /// The caller is responsible for calling `realm_release()`. The only
  /// exception from this is C++ bridge functions that return `void*`, with
  /// the prefix `_realm`.
  ///
  /// Note: C++ destructors are typically `noexcept`, so it is likely that an
  /// exception will crash the process.
  ///
  /// @param ptr A pointer to a Realm C Wrapper object. May be NULL.
  void realm_release(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _realm_release(
      ptr,
    );
  }

  late final _realm_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'realm_release');
  late final _realm_release =
      _realm_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Clone a Realm C Wrapper object.
  ///
  /// If the object is not clonable, this function fails with RLM_ERR_NOT_CLONABLE.
  ///
  /// @return A pointer to an object of the same type as the input, or NULL if
  /// cloning failed.
  ffi.Pointer<ffi.Void> realm_clone(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_clone(
      arg0,
    );
  }

  late final _realm_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('realm_clone');
  late final _realm_clone = _realm_clonePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// Return true if two API objects refer to the same underlying data. Objects
  /// with different types are never equal.
  ///
  /// Note: This function cannot be used with types that have value semantics, only
  /// opaque types that have object semantics.
  ///
  /// - `realm_t` objects are identical if they represent the same instance (not
  /// just if they represent the same file).
  /// - `realm_schema_t` objects are equal if the represented schemas are equal.
  /// - `realm_config_t` objects are equal if the configurations are equal.
  /// - `realm_object_t` objects are identical if they belong to the same realm
  /// and class, and have the same object key.
  /// - `realm_list_t` and other collection objects are identical if they come
  /// from the same object and property.
  /// - `realm_query_t` objects are never equal.
  /// - `realm_scheduler_t` objects are equal if they represent the same
  /// scheduler.
  /// - Query descriptor objects are equal if they represent equivalent
  /// descriptors.
  /// - `realm_async_error_t` objects are equal if they represent the same
  /// exception instance.
  ///
  /// This function cannot fail.
  bool realm_equals(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _realm_equals(
          arg0,
          arg1,
        ) !=
        0;
  }

  late final _realm_equalsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('realm_equals');
  late final _realm_equals = _realm_equalsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// True if a Realm C Wrapper object is "frozen" (immutable).
  ///
  /// Objects, collections, and results can be frozen. For all other types, this
  /// function always returns false.
  bool realm_is_frozen(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_is_frozen(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_frozenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          'realm_is_frozen');
  late final _realm_is_frozen =
      _realm_is_frozenPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// Get a thread-safe reference representing the same underlying object as some
  /// API object.
  ///
  /// The thread safe reference can be passed to a different thread and resolved
  /// against a different `realm_t` instance, which succeeds if the underlying
  /// object still exists.
  ///
  /// The following types can produce thread safe references:
  ///
  /// - `realm_object_t`
  /// - `realm_results_t`
  /// - `realm_list_t`
  /// - `realm_t`
  ///
  /// This does not assume ownership of the object, except for `realm_t`, where the
  /// instance is transferred by value, and must be transferred back to the current
  /// thread to be used. Note that the `realm_thread_safe_reference_t` object must
  /// still be destroyed after having been converted into a `realm_t` object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_thread_safe_reference_t> realm_create_thread_safe_reference(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _realm_create_thread_safe_reference(
      arg0,
    );
  }

  late final _realm_create_thread_safe_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_thread_safe_reference_t> Function(
              ffi.Pointer<ffi.Void>)>>('realm_create_thread_safe_reference');
  late final _realm_create_thread_safe_reference =
      _realm_create_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_thread_safe_reference_t> Function(
              ffi.Pointer<ffi.Void>)>();

  /// Allocate a new configuration with default options.
  ffi.Pointer<realm_config_t> realm_config_new() {
    return _realm_config_new();
  }

  late final _realm_config_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<realm_config_t> Function()>>(
          'realm_config_new');
  late final _realm_config_new =
      _realm_config_newPtr.asFunction<ffi.Pointer<realm_config_t> Function()>();

  /// Get the path of the realm being opened.
  ///
  /// This function cannot fail.
  ffi.Pointer<ffi.Int8> realm_config_get_path(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_path(
      arg0,
    );
  }

  late final _realm_config_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_config_t>)>>('realm_config_get_path');
  late final _realm_config_get_path = _realm_config_get_pathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_config_t>)>();

  /// Set the path of the realm being opened.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_path(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _realm_config_set_path(
      arg0,
      path,
    );
  }

  late final _realm_config_set_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_config_set_path');
  late final _realm_config_set_path = _realm_config_set_pathPtr.asFunction<
      void Function(ffi.Pointer<realm_config_t>, ffi.Pointer<ffi.Int8>)>();

  /// Get the encryption key for the realm.
  ///
  /// The output buffer must be at least 64 bytes.
  ///
  /// @returns The length of the encryption key (0 or 64)
  int realm_config_get_encryption_key(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<ffi.Uint8> out_key,
  ) {
    return _realm_config_get_encryption_key(
      arg0,
      out_key,
    );
  }

  late final _realm_config_get_encryption_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_config_get_encryption_key');
  late final _realm_config_get_encryption_key =
      _realm_config_get_encryption_keyPtr.asFunction<
          int Function(ffi.Pointer<realm_config_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Set the encryption key for the realm.
  ///
  /// The key must be either 64 bytes long or have length zero (in which case
  /// encryption is disabled).
  ///
  /// This function may fail if the encryption key has the wrong length.
  bool realm_config_set_encryption_key(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<ffi.Uint8> key,
    int key_size,
  ) {
    return _realm_config_set_encryption_key(
          arg0,
          key,
          key_size,
        ) !=
        0;
  }

  late final _realm_config_set_encryption_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_config_t>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('realm_config_set_encryption_key');
  late final _realm_config_set_encryption_key =
      _realm_config_set_encryption_keyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_config_t>, ffi.Pointer<ffi.Uint8>, int)>();

  /// Get the schema for this realm.
  ///
  /// Note: The caller obtains ownership of the returned value, and must manually
  /// free it by calling `realm_release()`.
  ///
  /// @return A schema object, or NULL if the schema is not set (empty).
  ffi.Pointer<realm_schema_t> realm_config_get_schema(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_schema(
      arg0,
    );
  }

  late final _realm_config_get_schemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_schema_t> Function(
              ffi.Pointer<realm_config_t>)>>('realm_config_get_schema');
  late final _realm_config_get_schema = _realm_config_get_schemaPtr.asFunction<
      ffi.Pointer<realm_schema_t> Function(ffi.Pointer<realm_config_t>)>();

  /// Set the schema object for this realm.
  ///
  /// This does not take ownership of the schema object, and it should be released
  /// afterwards.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  ///
  /// @param schema The schema object. May be NULL, which means an empty schema.
  void realm_config_set_schema(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<realm_schema_t> schema,
  ) {
    return _realm_config_set_schema(
      arg0,
      schema,
    );
  }

  late final _realm_config_set_schemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<realm_schema_t>)>>('realm_config_set_schema');
  late final _realm_config_set_schema = _realm_config_set_schemaPtr.asFunction<
      void Function(
          ffi.Pointer<realm_config_t>, ffi.Pointer<realm_schema_t>)>();

  /// Get the schema version of the schema.
  ///
  /// This function cannot fail.
  int realm_config_get_schema_version(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_schema_version(
      arg0,
    );
  }

  late final _realm_config_get_schema_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_schema_version');
  late final _realm_config_get_schema_version =
      _realm_config_get_schema_versionPtr
          .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Set the schema version of the schema.
  ///
  /// This function cannot fail.
  void realm_config_set_schema_version(
    ffi.Pointer<realm_config_t> arg0,
    int version,
  ) {
    return _realm_config_set_schema_version(
      arg0,
      version,
    );
  }

  late final _realm_config_set_schema_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint64)>>('realm_config_set_schema_version');
  late final _realm_config_set_schema_version =
      _realm_config_set_schema_versionPtr
          .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Get the schema mode.
  ///
  /// This function cannot fail.
  int realm_config_get_schema_mode(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_schema_mode(
      arg0,
    );
  }

  late final _realm_config_get_schema_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_schema_mode');
  late final _realm_config_get_schema_mode = _realm_config_get_schema_modePtr
      .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Set the schema mode.
  ///
  /// This function cannot fail.
  void realm_config_set_schema_mode(
    ffi.Pointer<realm_config_t> arg0,
    int arg1,
  ) {
    return _realm_config_set_schema_mode(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_schema_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Int32)>>('realm_config_set_schema_mode');
  late final _realm_config_set_schema_mode = _realm_config_set_schema_modePtr
      .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Set the migration callback.
  ///
  /// The migration function is called during a migration for schema modes
  /// `RLM_SCHEMA_MODE_AUTOMATIC` and `RLM_SCHEMA_MODE_MANUAL`. The callback is
  /// invoked with a realm instance before the migration and the realm instance
  /// that is currently performing the migration.
  ///
  /// This function cannot fail.
  void realm_config_set_migration_function(
    ffi.Pointer<realm_config_t> arg0,
    realm_migration_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_migration_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_migration_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>, realm_migration_func_t,
              ffi.Pointer<ffi.Void>)>>('realm_config_set_migration_function');
  late final _realm_config_set_migration_function =
      _realm_config_set_migration_functionPtr.asFunction<
          void Function(ffi.Pointer<realm_config_t>, realm_migration_func_t,
              ffi.Pointer<ffi.Void>)>();

  /// Set the data initialization function.
  ///
  /// The callback is invoked the first time the schema is created, such that the
  /// user can perform one-time initialization of the data in the realm.
  ///
  /// The realm instance passed to the callback is in a write transaction.
  ///
  /// This function cannot fail.
  void realm_config_set_data_initialization_function(
    ffi.Pointer<realm_config_t> arg0,
    realm_data_initialization_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_data_initialization_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_data_initialization_functionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_config_t>,
                  realm_data_initialization_func_t, ffi.Pointer<ffi.Void>)>>(
      'realm_config_set_data_initialization_function');
  late final _realm_config_set_data_initialization_function =
      _realm_config_set_data_initialization_functionPtr.asFunction<
          void Function(ffi.Pointer<realm_config_t>,
              realm_data_initialization_func_t, ffi.Pointer<ffi.Void>)>();

  /// Set the should-compact-on-launch callback.
  ///
  /// The callback is invoked the first time a realm file is opened in this process
  /// to decide whether the realm file should be compacted.
  ///
  /// Note: If another process has the realm file open, it will not be compacted.
  ///
  /// This function cannot fail.
  void realm_config_set_should_compact_on_launch_function(
    ffi.Pointer<realm_config_t> arg0,
    realm_should_compact_on_launch_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _realm_config_set_should_compact_on_launch_function(
      arg0,
      arg1,
      userdata,
    );
  }

  late final _realm_config_set_should_compact_on_launch_functionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_config_t>,
                  realm_should_compact_on_launch_func_t,
                  ffi.Pointer<ffi.Void>)>>(
      'realm_config_set_should_compact_on_launch_function');
  late final _realm_config_set_should_compact_on_launch_function =
      _realm_config_set_should_compact_on_launch_functionPtr.asFunction<
          void Function(ffi.Pointer<realm_config_t>,
              realm_should_compact_on_launch_func_t, ffi.Pointer<ffi.Void>)>();

  /// True if file format upgrades on open are disabled.
  ///
  /// This function cannot fail.
  bool realm_config_get_disable_format_upgrade(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_disable_format_upgrade(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_disable_format_upgradePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_disable_format_upgrade');
  late final _realm_config_get_disable_format_upgrade =
      _realm_config_get_disable_format_upgradePtr
          .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Disable file format upgrade on open (default: false).
  ///
  /// If a migration is needed to open the realm file with the provided schema, an
  /// error is thrown rather than automatically performing the migration.
  ///
  /// This function cannot fail.
  void realm_config_set_disable_format_upgrade(
    ffi.Pointer<realm_config_t> arg0,
    bool arg1,
  ) {
    return _realm_config_set_disable_format_upgrade(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_disable_format_upgradePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint8)>>('realm_config_set_disable_format_upgrade');
  late final _realm_config_set_disable_format_upgrade =
      _realm_config_set_disable_format_upgradePtr
          .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// True if automatic change notifications should be generated.
  ///
  /// This function cannot fail.
  bool realm_config_get_automatic_change_notifications(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_automatic_change_notifications(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_automatic_change_notificationsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_automatic_change_notifications');
  late final _realm_config_get_automatic_change_notifications =
      _realm_config_get_automatic_change_notificationsPtr
          .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Automatically generated change notifications (default: true).
  ///
  /// This function cannot fail.
  void realm_config_set_automatic_change_notifications(
    ffi.Pointer<realm_config_t> arg0,
    bool arg1,
  ) {
    return _realm_config_set_automatic_change_notifications(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_automatic_change_notificationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint8)>>('realm_config_set_automatic_change_notifications');
  late final _realm_config_set_automatic_change_notifications =
      _realm_config_set_automatic_change_notificationsPtr
          .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// The scheduler which this realm should be bound to (default: NULL).
  ///
  /// If NULL, the realm will be bound to the default scheduler for the current thread.
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_scheduler(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<realm_scheduler_t> arg1,
  ) {
    return _realm_config_set_scheduler(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_schedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<realm_scheduler_t>)>>('realm_config_set_scheduler');
  late final _realm_config_set_scheduler =
      _realm_config_set_schedulerPtr.asFunction<
          void Function(
              ffi.Pointer<realm_config_t>, ffi.Pointer<realm_scheduler_t>)>();

  /// Sync configuration for this realm (default: NULL).
  ///
  /// This function aborts when out of memory, but otherwise cannot fail.
  void realm_config_set_sync_config(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<realm_sync_config_t> arg1,
  ) {
    return _realm_config_set_sync_config(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_sync_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_config_t>,
                  ffi.Pointer<realm_sync_config_t>)>>(
      'realm_config_set_sync_config');
  late final _realm_config_set_sync_config =
      _realm_config_set_sync_configPtr.asFunction<
          void Function(
              ffi.Pointer<realm_config_t>, ffi.Pointer<realm_sync_config_t>)>();

  /// Get whether the realm file should be forcibly initialized as a synchronized.
  ///
  /// This function cannot fail.
  bool realm_config_get_force_sync_history(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_force_sync_history(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_force_sync_historyPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_force_sync_history');
  late final _realm_config_get_force_sync_history =
      _realm_config_get_force_sync_historyPtr
          .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Force the realm file to be initialized as a synchronized realm, even if no
  /// sync config is provided (default: false).
  ///
  /// This function cannot fail.
  void realm_config_set_force_sync_history(
    ffi.Pointer<realm_config_t> arg0,
    bool arg1,
  ) {
    return _realm_config_set_force_sync_history(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_force_sync_historyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint8)>>('realm_config_set_force_sync_history');
  late final _realm_config_set_force_sync_history =
      _realm_config_set_force_sync_historyPtr
          .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Set the audit interface for the realm (unimplemented).
  bool realm_config_set_audit_factory(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _realm_config_set_audit_factory(
          arg0,
          arg1,
        ) !=
        0;
  }

  late final _realm_config_set_audit_factoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<ffi.Void>)>>('realm_config_set_audit_factory');
  late final _realm_config_set_audit_factory =
      _realm_config_set_audit_factoryPtr.asFunction<
          int Function(ffi.Pointer<realm_config_t>, ffi.Pointer<ffi.Void>)>();

  /// Get maximum number of active versions in the realm file allowed before an
  /// exception is thrown.
  ///
  /// This function cannot fail.
  int realm_config_get_max_number_of_active_versions(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_max_number_of_active_versions(
      arg0,
    );
  }

  late final _realm_config_get_max_number_of_active_versionsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_max_number_of_active_versions');
  late final _realm_config_get_max_number_of_active_versions =
      _realm_config_get_max_number_of_active_versionsPtr
          .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Set maximum number of active versions in the realm file allowed before an
  /// exception is thrown (default: UINT64_MAX).
  ///
  /// This function cannot fail.
  void realm_config_set_max_number_of_active_versions(
    ffi.Pointer<realm_config_t> arg0,
    int arg1,
  ) {
    return _realm_config_set_max_number_of_active_versions(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_max_number_of_active_versionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint64)>>('realm_config_set_max_number_of_active_versions');
  late final _realm_config_set_max_number_of_active_versions =
      _realm_config_set_max_number_of_active_versionsPtr
          .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Configure realm to be in memory
  void realm_config_set_in_memory(
    ffi.Pointer<realm_config_t> arg0,
    bool arg1,
  ) {
    return _realm_config_set_in_memory(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_config_set_in_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint8)>>('realm_config_set_in_memory');
  late final _realm_config_set_in_memory = _realm_config_set_in_memoryPtr
      .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Check if realm is configured in memory
  bool realm_config_get_in_memory(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_in_memory(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_in_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_in_memory');
  late final _realm_config_get_in_memory = _realm_config_get_in_memoryPtr
      .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Set FIFO path
  void realm_config_set_fifo_path(
    ffi.Pointer<realm_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_config_set_fifo_path(
      arg0,
      arg1,
    );
  }

  late final _realm_config_set_fifo_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_config_set_fifo_path');
  late final _realm_config_set_fifo_path =
      _realm_config_set_fifo_pathPtr.asFunction<
          void Function(ffi.Pointer<realm_config_t>, ffi.Pointer<ffi.Int8>)>();

  /// Check realm FIFO path
  ffi.Pointer<ffi.Int8> realm_config_get_fifo_path(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_fifo_path(
      arg0,
    );
  }

  late final _realm_config_get_fifo_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_config_t>)>>('realm_config_get_fifo_path');
  late final _realm_config_get_fifo_path =
      _realm_config_get_fifo_pathPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_config_t>)>();

  /// If 'cached' is false, always return a new Realm instance.
  void realm_config_set_cached(
    ffi.Pointer<realm_config_t> arg0,
    bool cached,
  ) {
    return _realm_config_set_cached(
      arg0,
      cached ? 1 : 0,
    );
  }

  late final _realm_config_set_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_config_t>,
              ffi.Uint8)>>('realm_config_set_cached');
  late final _realm_config_set_cached = _realm_config_set_cachedPtr
      .asFunction<void Function(ffi.Pointer<realm_config_t>, int)>();

  /// Check if realms are cached
  bool realm_config_get_cached(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_config_get_cached(
          arg0,
        ) !=
        0;
  }

  late final _realm_config_get_cachedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_config_t>)>>(
      'realm_config_get_cached');
  late final _realm_config_get_cached = _realm_config_get_cachedPtr
      .asFunction<int Function(ffi.Pointer<realm_config_t>)>();

  /// Create a custom scheduler object from callback functions.
  ///
  /// @param userdata Pointer passed to all callbacks.
  /// @param notify Function which will be called whenever the scheduler has work
  /// to do. Each call to this should trigger a call to
  /// `realm_scheduler_perform_work()` from within the scheduler's
  /// event loop. This function must be thread-safe, or NULL, in
  /// which case the scheduler is considered unable to deliver
  /// notifications.
  /// @param is_on_thread Function to return true if called from the same thread as
  /// the scheduler. This function must be thread-safe.
  /// @param can_deliver_notifications Function to return true if the scheduler can
  /// support `notify()`. This function does not
  /// need to be thread-safe.
  ffi.Pointer<realm_scheduler_t> realm_scheduler_new(
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg1,
    realm_scheduler_notify_func_t notify,
    realm_scheduler_is_on_thread_func_t is_on_thread,
    realm_scheduler_is_same_as_func_t is_same_as,
    realm_scheduler_can_deliver_notifications_func_t can_deliver_notifications,
  ) {
    return _realm_scheduler_new(
      userdata,
      arg1,
      notify,
      is_on_thread,
      is_same_as,
      can_deliver_notifications,
    );
  }

  late final _realm_scheduler_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_scheduler_t> Function(
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  realm_scheduler_notify_func_t,
                  realm_scheduler_is_on_thread_func_t,
                  realm_scheduler_is_same_as_func_t,
                  realm_scheduler_can_deliver_notifications_func_t)>>(
      'realm_scheduler_new');
  late final _realm_scheduler_new = _realm_scheduler_newPtr.asFunction<
      ffi.Pointer<realm_scheduler_t> Function(
          ffi.Pointer<ffi.Void>,
          realm_free_userdata_func_t,
          realm_scheduler_notify_func_t,
          realm_scheduler_is_on_thread_func_t,
          realm_scheduler_is_same_as_func_t,
          realm_scheduler_can_deliver_notifications_func_t)>();

  /// Performs all of the pending work for the given scheduler.
  ///
  /// This function must be called from within the scheduler's event loop. It must
  /// be called after each time that the notify function passed to the scheduler
  /// is involved.
  void realm_scheduler_perform_work(
    ffi.Pointer<realm_scheduler_t> arg0,
  ) {
    return _realm_scheduler_perform_work(
      arg0,
    );
  }

  late final _realm_scheduler_perform_workPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_scheduler_t>)>>('realm_scheduler_perform_work');
  late final _realm_scheduler_perform_work = _realm_scheduler_perform_workPtr
      .asFunction<void Function(ffi.Pointer<realm_scheduler_t>)>();

  /// Create an instance of the default scheduler for the current platform,
  /// normally confined to the calling thread.
  ffi.Pointer<realm_scheduler_t> realm_scheduler_make_default() {
    return _realm_scheduler_make_default();
  }

  late final _realm_scheduler_make_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<realm_scheduler_t> Function()>>(
          'realm_scheduler_make_default');
  late final _realm_scheduler_make_default = _realm_scheduler_make_defaultPtr
      .asFunction<ffi.Pointer<realm_scheduler_t> Function()>();

  /// Get the scheduler used by frozen realms. This scheduler does not support
  /// notifications, and does not perform any thread checking.
  ///
  /// This function is thread-safe, and cannot fail.
  ffi.Pointer<realm_scheduler_t> realm_scheduler_get_frozen() {
    return _realm_scheduler_get_frozen();
  }

  late final _realm_scheduler_get_frozenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<realm_scheduler_t> Function()>>(
          'realm_scheduler_get_frozen');
  late final _realm_scheduler_get_frozen = _realm_scheduler_get_frozenPtr
      .asFunction<ffi.Pointer<realm_scheduler_t> Function()>();

  /// Returns true if there is a default scheduler implementation for the current
  /// platform, or one has been set with `realm_scheduler_set_default_factory()`.
  ///
  /// If there is no default factory, and no scheduler is provided in the config,
  /// `realm_open()` will fail. Note that `realm_scheduler_get_frozen()` always
  /// returns a valid scheduler.
  ///
  /// This function is thread-safe, and cannot fail.
  bool realm_scheduler_has_default_factory() {
    return _realm_scheduler_has_default_factory() != 0;
  }

  late final _realm_scheduler_has_default_factoryPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'realm_scheduler_has_default_factory');
  late final _realm_scheduler_has_default_factory =
      _realm_scheduler_has_default_factoryPtr.asFunction<int Function()>();

  /// For platforms with no default scheduler implementation, register a factory
  /// function which can produce custom schedulers. If there is a platform-specific
  /// scheduler, this function will fail. If a custom scheduler is desired for
  /// platforms that already have a default scheduler implementation, the caller
  /// must call `realm_open()` with a config that indicates the desired scheduler.
  ///
  /// The provided callback may produce a scheduler by calling
  /// `realm_scheduler_new()`.
  ///
  /// This function is thread-safe, but should generally only be called once.
  bool realm_scheduler_set_default_factory(
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg1,
    realm_scheduler_default_factory_func_t arg2,
  ) {
    return _realm_scheduler_set_default_factory(
          userdata,
          arg1,
          arg2,
        ) !=
        0;
  }

  late final _realm_scheduler_set_default_factoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  realm_scheduler_default_factory_func_t)>>(
      'realm_scheduler_set_default_factory');
  late final _realm_scheduler_set_default_factory =
      _realm_scheduler_set_default_factoryPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, realm_free_userdata_func_t,
              realm_scheduler_default_factory_func_t)>();

  /// Open a Realm file.
  ///
  /// @param config Realm configuration. If the Realm is already opened on another
  /// thread, validate that the given configuration is compatible
  /// with the existing one.
  /// @return If successful, the Realm object. Otherwise, NULL.
  ffi.Pointer<realm_t> realm_open(
    ffi.Pointer<realm_config_t> config,
  ) {
    return _realm_open(
      config,
    );
  }

  late final _realm_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_t> Function(
              ffi.Pointer<realm_config_t>)>>('realm_open');
  late final _realm_open = _realm_openPtr
      .asFunction<ffi.Pointer<realm_t> Function(ffi.Pointer<realm_config_t>)>();

  /// Deletes the following files for the given `realm_file_path` if they exist:
  /// - the Realm file itself
  /// - the .management folder
  /// - the .note file
  /// - the .log file
  ///
  /// The .lock file for this Realm cannot and will not be deleted as this is unsafe.
  /// If a different process / thread is accessing the Realm at the same time a corrupt state
  /// could be the result and checking for a single process state is not possible here.
  ///
  /// @param realm_file_path The path to the Realm file. All files will be derived from this.
  /// @param[out] did_delete_realm If non-null, set to true if the primary Realm file was deleted.
  /// Discard value if the function returns an error.
  ///
  /// @return true if no error occurred.
  ///
  /// @throws RLM_ERR_FILE_PERMISSION_DENIED if the operation was not permitted.
  /// @throws RLM_ERR_FILE_ACCESS_ERROR for any other error while trying to delete the file or folder.
  /// @throws RLM_ERR_DELETE_OPENED_REALM if the function was called on an open Realm.
  bool realm_delete_files(
    ffi.Pointer<ffi.Int8> realm_file_path,
    ffi.Pointer<ffi.Uint8> did_delete_realm,
  ) {
    return _realm_delete_files(
          realm_file_path,
          did_delete_realm,
        ) !=
        0;
  }

  late final _realm_delete_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>)>>('realm_delete_files');
  late final _realm_delete_files = _realm_delete_filesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>();

  /// Create a `realm_t` object from a thread-safe reference to the same realm.
  ///
  /// @param tsr Thread-safe reference object created by calling
  /// `realm_get_thread_safe_reference()` with a `realm_t` instance.
  /// @param scheduler The scheduler to use for the new `realm_t` instance. May be
  /// NULL, in which case the default scheduler for the current
  /// thread is used.
  /// @return A non-null pointer if no error occurred.
  ffi.Pointer<realm_t> realm_from_thread_safe_reference(
    ffi.Pointer<realm_thread_safe_reference_t> tsr,
    ffi.Pointer<realm_scheduler_t> scheduler,
  ) {
    return _realm_from_thread_safe_reference(
      tsr,
      scheduler,
    );
  }

  late final _realm_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_t> Function(
                  ffi.Pointer<realm_thread_safe_reference_t>,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_from_thread_safe_reference');
  late final _realm_from_thread_safe_reference =
      _realm_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_t> Function(
              ffi.Pointer<realm_thread_safe_reference_t>,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Forcibly close a Realm file.
  ///
  /// Note that this invalidates all Realm instances for the same path.
  ///
  /// The Realm will be automatically closed when the last reference is released,
  /// including references to objects within the Realm.
  ///
  /// @return True if no exception occurred.
  bool realm_close(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_close(
          arg0,
        ) !=
        0;
  }

  late final _realm_closePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_close');
  late final _realm_close =
      _realm_closePtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// True if the Realm file is closed.
  ///
  /// This function cannot fail.
  bool realm_is_closed(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_is_closed(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_closedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_is_closed');
  late final _realm_is_closed =
      _realm_is_closedPtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Begin a read transaction for the Realm file.
  ///
  /// @return True if no exception occurred.
  bool realm_begin_read(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_begin_read(
          arg0,
        ) !=
        0;
  }

  late final _realm_begin_readPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_begin_read');
  late final _realm_begin_read =
      _realm_begin_readPtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Begin a write transaction for the Realm file.
  ///
  /// @return True if no exception occurred.
  bool realm_begin_write(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_begin_write(
          arg0,
        ) !=
        0;
  }

  late final _realm_begin_writePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_begin_write');
  late final _realm_begin_write =
      _realm_begin_writePtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Return true if the realm is in a write transaction.
  ///
  /// This function cannot fail.
  bool realm_is_writable(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_is_writable(
          arg0,
        ) !=
        0;
  }

  late final _realm_is_writablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_is_writable');
  late final _realm_is_writable =
      _realm_is_writablePtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Commit a write transaction.
  ///
  /// @return True if the commit succeeded and no exceptions were thrown.
  bool realm_commit(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_commit(
          arg0,
        ) !=
        0;
  }

  late final _realm_commitPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_commit');
  late final _realm_commit =
      _realm_commitPtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Roll back a write transaction.
  ///
  /// @return True if the rollback succeeded and no exceptions were thrown.
  bool realm_rollback(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_rollback(
          arg0,
        ) !=
        0;
  }

  late final _realm_rollbackPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_rollback');
  late final _realm_rollback =
      _realm_rollbackPtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Add a callback that will be invoked every time the view of this file is updated.
  ///
  /// This callback is guaranteed to be invoked before any object or collection change
  /// notifications for this realm are delivered.
  ///
  /// @return a registration token used to remove the callback.
  int realm_add_realm_changed_callback(
    ffi.Pointer<realm_t> arg0,
    realm_on_realm_change_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_add_realm_changed_callback(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_add_realm_changed_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<realm_t>,
              realm_on_realm_change_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_add_realm_changed_callback');
  late final _realm_add_realm_changed_callback =
      _realm_add_realm_changed_callbackPtr.asFunction<
          int Function(ffi.Pointer<realm_t>, realm_on_realm_change_func_t,
              ffi.Pointer<ffi.Void>, realm_free_userdata_func_t)>();

  /// Remove a realm changed callback that was previously registered with the token.
  void realm_remove_realm_changed_callback(
    ffi.Pointer<realm_t> arg0,
    int token,
  ) {
    return _realm_remove_realm_changed_callback(
      arg0,
      token,
    );
  }

  late final _realm_remove_realm_changed_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_t>,
              ffi.Uint64)>>('realm_remove_realm_changed_callback');
  late final _realm_remove_realm_changed_callback =
      _realm_remove_realm_changed_callbackPtr
          .asFunction<void Function(ffi.Pointer<realm_t>, int)>();

  /// Refresh the view of the realm file.
  ///
  /// If another process or thread has made changes to the realm file, this causes
  /// those changes to become visible in this realm instance.
  ///
  /// This calls `advance_read()` at the Core layer.
  ///
  /// @return True if the realm was successfully refreshed and no exceptions were
  /// thrown.
  bool realm_refresh(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_refresh(
          arg0,
        ) !=
        0;
  }

  late final _realm_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_t>)>>(
          'realm_refresh');
  late final _realm_refresh =
      _realm_refreshPtr.asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Produce a frozen view of this realm.
  ///
  /// @return A non-NULL realm instance representing the frozen state.
  ffi.Pointer<realm_t> realm_freeze(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_freeze(
      arg0,
    );
  }

  late final _realm_freezePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_t> Function(ffi.Pointer<realm_t>)>>('realm_freeze');
  late final _realm_freeze = _realm_freezePtr
      .asFunction<ffi.Pointer<realm_t> Function(ffi.Pointer<realm_t>)>();

  /// Vacuum the free space from the realm file, reducing its file size.
  ///
  /// @return True if compaction was successful and no exceptions were thrown.
  bool realm_compact(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<ffi.Uint8> did_compact,
  ) {
    return _realm_compact(
          arg0,
          did_compact,
        ) !=
        0;
  }

  late final _realm_compactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>, ffi.Pointer<ffi.Uint8>)>>('realm_compact');
  late final _realm_compact = _realm_compactPtr
      .asFunction<int Function(ffi.Pointer<realm_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Create a new schema from classes and their properties.
  ///
  /// Note: This function does not validate the schema.
  ///
  /// Note: `realm_class_key_t` and `realm_property_key_t` values inside
  /// `realm_class_info_t` and `realm_property_info_t` are unused when
  /// defining the schema. Call `realm_get_schema()` to obtain the values for
  /// these fields in an open realm.
  ///
  /// @return True if allocation of the schema structure succeeded.
  ffi.Pointer<realm_schema_t> realm_schema_new(
    ffi.Pointer<realm_class_info_t> classes,
    int num_classes,
    ffi.Pointer<ffi.Pointer<realm_property_info_t>> class_properties,
  ) {
    return _realm_schema_new(
      classes,
      num_classes,
      class_properties,
    );
  }

  late final _realm_schema_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_schema_t> Function(
                  ffi.Pointer<realm_class_info_t>,
                  ffi.IntPtr,
                  ffi.Pointer<ffi.Pointer<realm_property_info_t>>)>>(
      'realm_schema_new');
  late final _realm_schema_new = _realm_schema_newPtr.asFunction<
      ffi.Pointer<realm_schema_t> Function(ffi.Pointer<realm_class_info_t>, int,
          ffi.Pointer<ffi.Pointer<realm_property_info_t>>)>();

  /// Get the schema for this realm.
  ///
  /// Note: The returned value is allocated by this function, so `realm_release()`
  /// must be called on it.
  ffi.Pointer<realm_schema_t> realm_get_schema(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_get_schema(
      arg0,
    );
  }

  late final _realm_get_schemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_schema_t> Function(
              ffi.Pointer<realm_t>)>>('realm_get_schema');
  late final _realm_get_schema = _realm_get_schemaPtr
      .asFunction<ffi.Pointer<realm_schema_t> Function(ffi.Pointer<realm_t>)>();

  /// Get the schema version for this realm.
  ///
  /// This function cannot fail.
  int realm_get_schema_version(
    ffi.Pointer<realm_t> realm,
  ) {
    return _realm_get_schema_version(
      realm,
    );
  }

  late final _realm_get_schema_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<realm_t>)>>(
          'realm_get_schema_version');
  late final _realm_get_schema_version = _realm_get_schema_versionPtr
      .asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Update the schema of an open realm.
  ///
  /// This is equivalent to calling `realm_update_schema_advanced(realm, schema, 0,
  /// NULL, NULL, NULL, NULL, false)`.
  bool realm_update_schema(
    ffi.Pointer<realm_t> realm,
    ffi.Pointer<realm_schema_t> schema,
  ) {
    return _realm_update_schema(
          realm,
          schema,
        ) !=
        0;
  }

  late final _realm_update_schemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_schema_t>)>>('realm_update_schema');
  late final _realm_update_schema = _realm_update_schemaPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, ffi.Pointer<realm_schema_t>)>();

  /// Update the schema of an open realm, with options to customize certain steps
  /// of the process.
  ///
  /// @param realm The realm for which the schema should be updated.
  /// @param schema The new schema for the realm. If the schema is the same the
  /// existing schema, this function does nothing.
  /// @param version The version of the new schema.
  /// @param migration_func Callback to perform the migration. Has no effect if the
  /// Realm is opened with `RLM_SCHEMA_MODE_ADDITIVE`.
  /// @param migration_func_userdata Userdata pointer to pass to `migration_func`.
  /// @param data_init_func Callback to perform initialization of the data in the
  /// Realm if it is opened for the first time (i.e., it has
  /// no previous schema version).
  /// @param data_init_func_userdata Userdata pointer to pass to `data_init_func`.
  /// @param is_in_transaction Pass true if the realm is already in a write
  /// transaction. Otherwise, if the migration requires a
  /// write transaction, this function will perform the
  /// migration in its own write transaction.
  bool realm_update_schema_advanced(
    ffi.Pointer<realm_t> realm,
    ffi.Pointer<realm_schema_t> schema,
    int version,
    realm_migration_func_t migration_func,
    ffi.Pointer<ffi.Void> migration_func_userdata,
    realm_data_initialization_func_t data_init_func,
    ffi.Pointer<ffi.Void> data_init_func_userdata,
    bool is_in_transaction,
  ) {
    return _realm_update_schema_advanced(
          realm,
          schema,
          version,
          migration_func,
          migration_func_userdata,
          data_init_func,
          data_init_func_userdata,
          is_in_transaction ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_update_schema_advancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              ffi.Pointer<realm_schema_t>,
              ffi.Uint64,
              realm_migration_func_t,
              ffi.Pointer<ffi.Void>,
              realm_data_initialization_func_t,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('realm_update_schema_advanced');
  late final _realm_update_schema_advanced =
      _realm_update_schema_advancedPtr.asFunction<
          int Function(
              ffi.Pointer<realm_t>,
              ffi.Pointer<realm_schema_t>,
              int,
              realm_migration_func_t,
              ffi.Pointer<ffi.Void>,
              realm_data_initialization_func_t,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Add a callback that will be invoked every time the schema of this realm is changed.
  ///
  /// @return a registration token used to remove the callback.
  int realm_add_schema_changed_callback(
    ffi.Pointer<realm_t> arg0,
    realm_on_schema_change_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_add_schema_changed_callback(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_add_schema_changed_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(
                  ffi.Pointer<realm_t>,
                  realm_on_schema_change_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_add_schema_changed_callback');
  late final _realm_add_schema_changed_callback =
      _realm_add_schema_changed_callbackPtr.asFunction<
          int Function(ffi.Pointer<realm_t>, realm_on_schema_change_func_t,
              ffi.Pointer<ffi.Void>, realm_free_userdata_func_t)>();

  /// Remove a schema changed callback that was previously registered with the token.
  void realm_remove_schema_changed_callback(
    ffi.Pointer<realm_t> arg0,
    int token,
  ) {
    return _realm_remove_schema_changed_callback(
      arg0,
      token,
    );
  }

  late final _realm_remove_schema_changed_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_t>,
              ffi.Uint64)>>('realm_remove_schema_changed_callback');
  late final _realm_remove_schema_changed_callback =
      _realm_remove_schema_changed_callbackPtr
          .asFunction<void Function(ffi.Pointer<realm_t>, int)>();

  /// Validate the schema.
  ///
  /// @param validation_mode A bitwise combination of values from the
  /// enum realm_schema_validation_mode.
  ///
  /// @return True if the schema passed validation. If validation failed,
  /// `realm_get_last_error()` will produce an error describing the
  /// validation failure.
  bool realm_schema_validate(
    ffi.Pointer<realm_schema_t> arg0,
    int validation_mode,
  ) {
    return _realm_schema_validate(
          arg0,
          validation_mode,
        ) !=
        0;
  }

  late final _realm_schema_validatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_schema_t>,
              ffi.Uint64)>>('realm_schema_validate');
  late final _realm_schema_validate = _realm_schema_validatePtr
      .asFunction<int Function(ffi.Pointer<realm_schema_t>, int)>();

  /// Return the number of classes in the Realm's schema.
  ///
  /// This cannot fail.
  int realm_get_num_classes(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_get_num_classes(
      arg0,
    );
  }

  late final _realm_get_num_classesPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<realm_t>)>>(
          'realm_get_num_classes');
  late final _realm_get_num_classes = _realm_get_num_classesPtr
      .asFunction<int Function(ffi.Pointer<realm_t>)>();

  /// Get the table keys for classes in the schema.
  ///
  /// @param out_keys An array that will contain the keys of each class in the
  /// schema. May be NULL, in which case `out_n` can be used to
  /// determine the number of classes in the schema.
  /// @param max The maximum number of keys to write to `out_keys`.
  /// @param out_n The actual number of classes. May be NULL.
  /// @return True if no exception occurred.
  bool realm_get_class_keys(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_class_key_t> out_keys,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_class_keys(
          arg0,
          out_keys,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_class_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              ffi.Pointer<realm_class_key_t>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('realm_get_class_keys');
  late final _realm_get_class_keys = _realm_get_class_keysPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, ffi.Pointer<realm_class_key_t>, int,
          ffi.Pointer<ffi.IntPtr>)>();

  /// Find a by the name of @a name.
  ///
  /// @param name The name of the class.
  /// @param out_found Set to true if the class was found and no error occurred.
  /// Otherwise, false. May not be NULL.
  /// @param out_class_info A pointer to a `realm_class_info_t` that will be
  /// populated with information about the class. May be
  /// NULL.
  /// @return True if no exception occurred.
  bool realm_find_class(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_class_info_t> out_class_info,
  ) {
    return _realm_find_class(
          arg0,
          name,
          out_found,
          out_class_info,
        ) !=
        0;
  }

  late final _realm_find_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<realm_class_info_t>)>>('realm_find_class');
  late final _realm_find_class = _realm_find_classPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<realm_class_info_t>)>();

  /// Get the class with @a key from the schema.
  ///
  /// Passing an invalid @a key for this schema is considered an error.
  ///
  /// @param key The key of the class, as discovered by `realm_get_class_keys()`.
  /// @param out_class_info A pointer to a `realm_class_info_t` that will be
  /// populated with the information of the class. May be
  /// NULL, though that's kind of pointless.
  /// @return True if no exception occurred.
  bool realm_get_class(
    ffi.Pointer<realm_t> arg0,
    int key,
    ffi.Pointer<realm_class_info_t> out_class_info,
  ) {
    return _realm_get_class(
          arg0,
          key,
          out_class_info,
        ) !=
        0;
  }

  late final _realm_get_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_t>, realm_class_key_t,
              ffi.Pointer<realm_class_info_t>)>>('realm_get_class');
  late final _realm_get_class = _realm_get_classPtr.asFunction<
      int Function(
          ffi.Pointer<realm_t>, int, ffi.Pointer<realm_class_info_t>)>();

  /// Get the list of properties for the class with this @a key.
  ///
  /// @param out_properties A pointer to an array of `realm_property_info_t`, which
  /// will be populated with the information about the
  /// properties. To see all properties, the length of the
  /// array should be at least the number of properties in
  /// the class, as reported in the sum of persisted and
  /// computed properties for the class. May be NULL, in
  /// which case this function can be used to discover the
  /// number of properties in the class.
  /// @param max The maximum number of entries to write to `out_properties`.
  /// @param out_n The actual number of properties written to `out_properties`.
  /// @return True if no exception occurred.
  bool realm_get_class_properties(
    ffi.Pointer<realm_t> arg0,
    int key,
    ffi.Pointer<realm_property_info_t> out_properties,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_class_properties(
          arg0,
          key,
          out_properties,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_class_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              ffi.Pointer<realm_property_info_t>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('realm_get_class_properties');
  late final _realm_get_class_properties =
      _realm_get_class_propertiesPtr.asFunction<
          int Function(
              ffi.Pointer<realm_t>,
              int,
              ffi.Pointer<realm_property_info_t>,
              int,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get the property keys for the class with this @a key.
  ///
  /// @param key The class key.
  /// @param out_col_keys An array of property keys. May be NULL, in which case
  /// this function can be used to discover the number of
  /// properties for this class.
  /// @param max The maximum number of keys to write to `out_col_keys`. Ignored if
  /// `out_col_keys == NULL`.
  /// @param out_n The actual number of properties written to `out_col_keys` (if
  /// non-NULL), or number of properties in the class.
  bool realm_get_property_keys(
    ffi.Pointer<realm_t> arg0,
    int key,
    ffi.Pointer<realm_property_key_t> out_col_keys,
    int max,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_get_property_keys(
          arg0,
          key,
          out_col_keys,
          max,
          out_n,
        ) !=
        0;
  }

  late final _realm_get_property_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              ffi.Pointer<realm_property_key_t>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('realm_get_property_keys');
  late final _realm_get_property_keys = _realm_get_property_keysPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, int, ffi.Pointer<realm_property_key_t>,
          int, ffi.Pointer<ffi.IntPtr>)>();

  /// Find a property by its column key.
  ///
  /// It is an error to pass a property @a key that is not present in this class.
  ///
  /// @param class_key The key of the class.
  /// @param key The column key for the property.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property.
  /// @return True if no exception occurred.
  bool realm_get_property(
    ffi.Pointer<realm_t> arg0,
    int class_key,
    int key,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_get_property(
          arg0,
          class_key,
          key,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              realm_property_key_t,
              ffi.Pointer<realm_property_info_t>)>>('realm_get_property');
  late final _realm_get_property = _realm_get_propertyPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, int, int,
          ffi.Pointer<realm_property_info_t>)>();

  /// Find a property by the internal (non-public) name of @a name.
  ///
  /// @param class_key The table key for the class.
  /// @param name The name of the property.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property. May
  /// be NULL.
  /// @return True if no exception occurred.
  bool realm_find_property(
    ffi.Pointer<realm_t> arg0,
    int class_key,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_property(
          arg0,
          class_key,
          name,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<realm_property_info_t>)>>('realm_find_property');
  late final _realm_find_property = _realm_find_propertyPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<realm_property_info_t>)>();

  /// Find a property with the public name of @a name.
  ///
  /// @param class_key The table key for the class.
  /// @param public_name The public name of the property.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A pointer to a `realm_property_info_t` that will be
  /// populated with information about the property. May
  /// be NULL.
  /// @return True if no exception occurred.
  bool realm_find_property_by_public_name(
    ffi.Pointer<realm_t> arg0,
    int class_key,
    ffi.Pointer<ffi.Int8> public_name,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_property_by_public_name(
          arg0,
          class_key,
          public_name,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_property_by_public_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_t>,
                  realm_class_key_t,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<realm_property_info_t>)>>(
      'realm_find_property_by_public_name');
  late final _realm_find_property_by_public_name =
      _realm_find_property_by_public_namePtr.asFunction<
          int Function(ffi.Pointer<realm_t>, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<realm_property_info_t>)>();

  /// Find the primary key property for a class, if it has one.
  ///
  /// @param class_key The table key for this class.
  /// @param out_found Will be set to true if the property was found. May not be
  /// NULL.
  /// @param out_property_info A property to a `realm_property_info_t` that will be
  /// populated with information about the property, if it
  /// was found. May be NULL.
  /// @return True if no exception occurred.
  bool realm_find_primary_key_property(
    ffi.Pointer<realm_t> arg0,
    int class_key,
    ffi.Pointer<ffi.Uint8> out_found,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_find_primary_key_property(
          arg0,
          class_key,
          out_found,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_find_primary_key_propertyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<realm_t>, realm_class_key_t,
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<realm_property_info_t>)>>(
      'realm_find_primary_key_property');
  late final _realm_find_primary_key_property =
      _realm_find_primary_key_propertyPtr.asFunction<
          int Function(ffi.Pointer<realm_t>, int, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<realm_property_info_t>)>();

  /// Get the number of objects in a table (class).
  ///
  /// @param out_count A pointer to a `size_t` that will contain the number of
  /// objects, if successful.
  /// @return True if the table key was valid for this realm.
  bool realm_get_num_objects(
    ffi.Pointer<realm_t> arg0,
    int arg1,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_get_num_objects(
          arg0,
          arg1,
          out_count,
        ) !=
        0;
  }

  late final _realm_get_num_objectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_t>, realm_class_key_t,
              ffi.Pointer<ffi.IntPtr>)>>('realm_get_num_objects');
  late final _realm_get_num_objects = _realm_get_num_objectsPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Get the number of versions found in the Realm file.
  ///
  /// @param out_versions_count A pointer to a `size_t` that will contain the number of
  /// versions, if successful.
  /// @return True if no exception occurred.
  bool realm_get_num_versions(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<ffi.Uint64> out_versions_count,
  ) {
    return _realm_get_num_versions(
          arg0,
          out_versions_count,
        ) !=
        0;
  }

  late final _realm_get_num_versionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_t>,
              ffi.Pointer<ffi.Uint64>)>>('realm_get_num_versions');
  late final _realm_get_num_versions = _realm_get_num_versionsPtr.asFunction<
      int Function(ffi.Pointer<realm_t>, ffi.Pointer<ffi.Uint64>)>();

  /// Get an object with a particular object key.
  ///
  /// @param class_key The class key.
  /// @param obj_key The key to the object. Passing a non-existent key is
  /// considered an error.
  /// @return A non-NULL pointer if no exception occurred.
  ffi.Pointer<realm_object_t> realm_get_object(
    ffi.Pointer<realm_t> arg0,
    int class_key,
    int obj_key,
  ) {
    return _realm_get_object(
      arg0,
      class_key,
      obj_key,
    );
  }

  late final _realm_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>,
              realm_class_key_t, realm_object_key_t)>>('realm_get_object');
  late final _realm_get_object = _realm_get_objectPtr.asFunction<
      ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>, int, int)>();

  /// Find an object with a particular primary key value.
  ///
  /// @param out_found A pointer to a boolean that will be set to true or false if
  /// no error occurred.
  /// @return A non-NULL pointer if the object was found and no exception occurred.
  ffi.Pointer<realm_object_t> realm_object_find_with_primary_key(
    ffi.Pointer<realm_t> arg0,
    int arg1,
    realm_value_t pk,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_object_find_with_primary_key(
      arg0,
      arg1,
      pk,
      out_found,
    );
  }

  late final _realm_object_find_with_primary_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_object_t> Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              realm_value_t,
              ffi.Pointer<ffi.Uint8>)>>('realm_object_find_with_primary_key');
  late final _realm_object_find_with_primary_key =
      _realm_object_find_with_primary_keyPtr.asFunction<
          ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>, int,
              realm_value_t, ffi.Pointer<ffi.Uint8>)>();

  /// Find all objects in class.
  ///
  /// Note: This is faster than running a query matching all objects (such as
  /// "TRUEPREDICATE").
  ///
  /// @return A non-NULL pointer if no exception was thrown.
  ffi.Pointer<realm_results_t> realm_object_find_all(
    ffi.Pointer<realm_t> arg0,
    int arg1,
  ) {
    return _realm_object_find_all(
      arg0,
      arg1,
    );
  }

  late final _realm_object_find_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_t>,
              realm_class_key_t)>>('realm_object_find_all');
  late final _realm_object_find_all = _realm_object_find_allPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_t>, int)>();

  /// Create an object in a class without a primary key.
  ///
  /// @return A non-NULL pointer if the object was created successfully.
  ffi.Pointer<realm_object_t> realm_object_create(
    ffi.Pointer<realm_t> arg0,
    int arg1,
  ) {
    return _realm_object_create(
      arg0,
      arg1,
    );
  }

  late final _realm_object_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_object_t> Function(
              ffi.Pointer<realm_t>, realm_class_key_t)>>('realm_object_create');
  late final _realm_object_create = _realm_object_createPtr.asFunction<
      ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>, int)>();

  /// Create an object in a class with a primary key. Will not succeed if an
  /// object with the given primary key value already exists.
  ///
  /// @return A non-NULL pointer if the object was created successfully.
  ffi.Pointer<realm_object_t> realm_object_create_with_primary_key(
    ffi.Pointer<realm_t> arg0,
    int arg1,
    realm_value_t pk,
  ) {
    return _realm_object_create_with_primary_key(
      arg0,
      arg1,
      pk,
    );
  }

  late final _realm_object_create_with_primary_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_object_t> Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              realm_value_t)>>('realm_object_create_with_primary_key');
  late final _realm_object_create_with_primary_key =
      _realm_object_create_with_primary_keyPtr.asFunction<
          ffi.Pointer<realm_object_t> Function(
              ffi.Pointer<realm_t>, int, realm_value_t)>();

  /// Create an object in a class with a primary key. If an object with the given
  /// primary key value already exists, that object will be returned.
  ///
  /// @return A non-NULL pointer if the object was found/created successfully.
  ffi.Pointer<realm_object_t> realm_object_get_or_create_with_primary_key(
    ffi.Pointer<realm_t> arg0,
    int arg1,
    realm_value_t pk,
    ffi.Pointer<ffi.Uint8> did_create,
  ) {
    return _realm_object_get_or_create_with_primary_key(
      arg0,
      arg1,
      pk,
      did_create,
    );
  }

  late final _realm_object_get_or_create_with_primary_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>,
                  realm_class_key_t, realm_value_t, ffi.Pointer<ffi.Uint8>)>>(
      'realm_object_get_or_create_with_primary_key');
  late final _realm_object_get_or_create_with_primary_key =
      _realm_object_get_or_create_with_primary_keyPtr.asFunction<
          ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>, int,
              realm_value_t, ffi.Pointer<ffi.Uint8>)>();

  /// Delete a realm object.
  ///
  /// Note: This does not call `realm_release()` on the `realm_object_t` instance.
  ///
  /// @return True if no exception occurred.
  bool realm_object_delete(
    ffi.Pointer<realm_object_t> arg0,
  ) {
    return _realm_object_delete(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_object_t>)>>(
      'realm_object_delete');
  late final _realm_object_delete = _realm_object_deletePtr
      .asFunction<int Function(ffi.Pointer<realm_object_t>)>();

  /// Resolve the Realm object in the provided Realm.
  ///
  /// This is equivalent to producing a thread-safe reference and resolving it in the target realm.
  ///
  /// If the object can be resolved in the target realm, '*resolved' points to the new object
  /// If the object cannot be resolved in the target realm, '*resolved' will be null.
  /// @return True if no exception occurred (except exceptions that may normally occur if resolution fails)
  bool realm_object_resolve_in(
    ffi.Pointer<realm_object_t> live_object,
    ffi.Pointer<realm_t> target_realm,
    ffi.Pointer<ffi.Pointer<realm_object_t>> resolved,
  ) {
    return _realm_object_resolve_in(
          live_object,
          target_realm,
          resolved,
        ) !=
        0;
  }

  late final _realm_object_resolve_inPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_object_t>,
                  ffi.Pointer<realm_t>,
                  ffi.Pointer<ffi.Pointer<realm_object_t>>)>>(
      'realm_object_resolve_in');
  late final _realm_object_resolve_in = _realm_object_resolve_inPtr.asFunction<
      int Function(ffi.Pointer<realm_object_t>, ffi.Pointer<realm_t>,
          ffi.Pointer<ffi.Pointer<realm_object_t>>)>();

  /// True if this object still exists in the realm.
  ///
  /// This function cannot fail.
  bool realm_object_is_valid(
    ffi.Pointer<realm_object_t> arg0,
  ) {
    return _realm_object_is_valid(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_is_validPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_object_t>)>>(
      'realm_object_is_valid');
  late final _realm_object_is_valid = _realm_object_is_validPtr
      .asFunction<int Function(ffi.Pointer<realm_object_t>)>();

  /// Get the key for this object.
  ///
  /// This function cannot fail.
  int realm_object_get_key(
    ffi.Pointer<realm_object_t> object,
  ) {
    return _realm_object_get_key(
      object,
    );
  }

  late final _realm_object_get_keyPtr = _lookup<
      ffi.NativeFunction<
          realm_object_key_t Function(
              ffi.Pointer<realm_object_t>)>>('realm_object_get_key');
  late final _realm_object_get_key = _realm_object_get_keyPtr
      .asFunction<int Function(ffi.Pointer<realm_object_t>)>();

  /// Get the table for this object.
  ///
  /// This function cannot fail.
  int realm_object_get_table(
    ffi.Pointer<realm_object_t> object,
  ) {
    return _realm_object_get_table(
      object,
    );
  }

  late final _realm_object_get_tablePtr = _lookup<
      ffi.NativeFunction<
          realm_class_key_t Function(
              ffi.Pointer<realm_object_t>)>>('realm_object_get_table');
  late final _realm_object_get_table = _realm_object_get_tablePtr
      .asFunction<int Function(ffi.Pointer<realm_object_t>)>();

  /// Get a `realm_link_t` representing a link to @a object.
  ///
  /// This function cannot fail.
  realm_link_t realm_object_as_link(
    ffi.Pointer<realm_object_t> object,
  ) {
    return _realm_object_as_link(
      object,
    );
  }

  late final _realm_object_as_linkPtr = _lookup<
      ffi.NativeFunction<
          realm_link_t Function(
              ffi.Pointer<realm_object_t>)>>('realm_object_as_link');
  late final _realm_object_as_link = _realm_object_as_linkPtr
      .asFunction<realm_link_t Function(ffi.Pointer<realm_object_t>)>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token_t>
      realm_object_add_notification_callback(
    ffi.Pointer<realm_object_t> arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t free,
    ffi.Pointer<realm_key_path_array_t> arg3,
    realm_on_object_change_func_t on_change,
    realm_callback_error_func_t on_error,
    ffi.Pointer<realm_scheduler_t> arg6,
  ) {
    return _realm_object_add_notification_callback(
      arg0,
      userdata,
      free,
      arg3,
      on_change,
      on_error,
      arg6,
    );
  }

  late final _realm_object_add_notification_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_notification_token_t> Function(
                  ffi.Pointer<realm_object_t>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  ffi.Pointer<realm_key_path_array_t>,
                  realm_on_object_change_func_t,
                  realm_callback_error_func_t,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_object_add_notification_callback');
  late final _realm_object_add_notification_callback =
      _realm_object_add_notification_callbackPtr.asFunction<
          ffi.Pointer<realm_notification_token_t> Function(
              ffi.Pointer<realm_object_t>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t,
              ffi.Pointer<realm_key_path_array_t>,
              realm_on_object_change_func_t,
              realm_callback_error_func_t,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Get an object from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_object_t> realm_object_from_thread_safe_reference(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_thread_safe_reference_t> arg1,
  ) {
    return _realm_object_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_object_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>,
                  ffi.Pointer<realm_thread_safe_reference_t>)>>(
      'realm_object_from_thread_safe_reference');
  late final _realm_object_from_thread_safe_reference =
      _realm_object_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_thread_safe_reference_t>)>();

  /// Get the value for a property.
  ///
  /// @return True if no exception occurred.
  bool realm_get_value(
    ffi.Pointer<realm_object_t> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_get_value(
          arg0,
          arg1,
          out_value,
        ) !=
        0;
  }

  late final _realm_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_object_t>, realm_property_key_t,
              ffi.Pointer<realm_value_t>)>>('realm_get_value');
  late final _realm_get_value = _realm_get_valuePtr.asFunction<
      int Function(
          ffi.Pointer<realm_object_t>, int, ffi.Pointer<realm_value_t>)>();

  /// Get the values for several properties.
  ///
  /// This is provided as an alternative to calling `realm_get_value()` multiple
  /// times in a row, which is particularly useful for language runtimes where
  /// crossing the native bridge is comparatively expensive. In addition, it
  /// eliminates some parameter validation that would otherwise be repeated for
  /// each call.
  ///
  /// Example use cases:
  ///
  /// - Extracting all properties of an object for serialization.
  /// - Converting an object to some in-memory representation.
  ///
  /// @param num_values The number of elements in @a properties and @a out_values.
  /// @param properties The keys for the properties to fetch. May not be NULL.
  /// @param out_values Where to write the property values. If an error occurs,
  /// this array may only be partially initialized. May not be
  /// NULL.
  /// @return True if no exception occurs.
  bool realm_get_values(
    ffi.Pointer<realm_object_t> arg0,
    int num_values,
    ffi.Pointer<realm_property_key_t> properties,
    ffi.Pointer<realm_value_t> out_values,
  ) {
    return _realm_get_values(
          arg0,
          num_values,
          properties,
          out_values,
        ) !=
        0;
  }

  late final _realm_get_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_object_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_property_key_t>,
              ffi.Pointer<realm_value_t>)>>('realm_get_values');
  late final _realm_get_values = _realm_get_valuesPtr.asFunction<
      int Function(ffi.Pointer<realm_object_t>, int,
          ffi.Pointer<realm_property_key_t>, ffi.Pointer<realm_value_t>)>();

  /// Set the value for a property.
  ///
  /// @param new_value The new value for the property.
  /// @param is_default True if this property is being set as part of setting the
  /// default values for a new object. This has no effect in
  /// non-sync'ed realms.
  /// @return True if no exception occurred.
  bool realm_set_value(
    ffi.Pointer<realm_object_t> arg0,
    int arg1,
    realm_value_t new_value,
    bool is_default,
  ) {
    return _realm_set_value(
          arg0,
          arg1,
          new_value,
          is_default ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_object_t>, realm_property_key_t,
              realm_value_t, ffi.Uint8)>>('realm_set_value');
  late final _realm_set_value = _realm_set_valuePtr.asFunction<
      int Function(ffi.Pointer<realm_object_t>, int, realm_value_t, int)>();

  /// Set the values for several properties.
  ///
  /// This is provided as an alternative to calling `realm_get_value()` multiple
  /// times in a row, which is particularly useful for language runtimes where
  /// crossing the native bridge is comparatively expensive. In addition, it
  /// eliminates some parameter validation that would otherwise be repeated for
  /// each call.
  ///
  /// Example use cases:
  ///
  /// - Initializing a new object with default values.
  /// - Deserializing some in-memory structure into a realm object.
  ///
  /// This operation is "atomic"; if an exception occurs due to invalid input (such
  /// as type mismatch, nullability mismatch, etc.), the object will remain
  /// unmodified.
  ///
  /// @param num_values The number of elements in @a properties and @a values.
  /// @param properties The keys of the properties to set. May not be NULL.
  /// @param values The values to assign to the properties. May not be NULL.
  /// @param is_default True if the properties are being set as part of setting
  /// default values for a new object. This has no effect in
  /// non-sync'ed realms.
  /// @return True if no exception occurred.
  bool realm_set_values(
    ffi.Pointer<realm_object_t> arg0,
    int num_values,
    ffi.Pointer<realm_property_key_t> properties,
    ffi.Pointer<realm_value_t> values,
    bool is_default,
  ) {
    return _realm_set_values(
          arg0,
          num_values,
          properties,
          values,
          is_default ? 1 : 0,
        ) !=
        0;
  }

  late final _realm_set_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_object_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_property_key_t>,
              ffi.Pointer<realm_value_t>,
              ffi.Uint8)>>('realm_set_values');
  late final _realm_set_values = _realm_set_valuesPtr.asFunction<
      int Function(
          ffi.Pointer<realm_object_t>,
          int,
          ffi.Pointer<realm_property_key_t>,
          ffi.Pointer<realm_value_t>,
          int)>();

  /// Get a list instance for the property of an object.
  ///
  /// Note: It is up to the caller to call `realm_release()` on the returned list.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_list_t> realm_get_list(
    ffi.Pointer<realm_object_t> arg0,
    int arg1,
  ) {
    return _realm_get_list(
      arg0,
      arg1,
    );
  }

  late final _realm_get_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_list_t> Function(ffi.Pointer<realm_object_t>,
              realm_property_key_t)>>('realm_get_list');
  late final _realm_get_list = _realm_get_listPtr.asFunction<
      ffi.Pointer<realm_list_t> Function(ffi.Pointer<realm_object_t>, int)>();

  /// Resolve the list in the context of a given Realm instance.
  ///
  /// This is equivalent to producing a thread-safe reference and resolving it in the frozen realm.
  ///
  /// If resolution is possible, a valid resolved object is produced at '*resolved*'.
  /// If resolution is not possible, but no error occurs, '*resolved' is set to NULL
  ///
  /// @return true if no error occurred.
  bool realm_list_resolve_in(
    ffi.Pointer<realm_list_t> list,
    ffi.Pointer<realm_t> target_realm,
    ffi.Pointer<ffi.Pointer<realm_list_t>> resolved,
  ) {
    return _realm_list_resolve_in(
          list,
          target_realm,
          resolved,
        ) !=
        0;
  }

  late final _realm_list_resolve_inPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_list_t>,
                  ffi.Pointer<realm_t>,
                  ffi.Pointer<ffi.Pointer<realm_list_t>>)>>(
      'realm_list_resolve_in');
  late final _realm_list_resolve_in = _realm_list_resolve_inPtr.asFunction<
      int Function(ffi.Pointer<realm_list_t>, ffi.Pointer<realm_t>,
          ffi.Pointer<ffi.Pointer<realm_list_t>>)>();

  /// Check if a list is valid.
  ///
  /// @return True if the list is valid.
  bool realm_list_is_valid(
    ffi.Pointer<realm_list_t> arg0,
  ) {
    return _realm_list_is_valid(
          arg0,
        ) !=
        0;
  }

  late final _realm_list_is_validPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_list_t>)>>(
      'realm_list_is_valid');
  late final _realm_list_is_valid = _realm_list_is_validPtr
      .asFunction<int Function(ffi.Pointer<realm_list_t>)>();

  /// Get the size of a list, in number of elements.
  ///
  /// This function may fail if the object owning the list has been deleted.
  ///
  /// @param out_size Where to put the list size. May be NULL.
  /// @return True if no exception occurred.
  bool realm_list_size(
    ffi.Pointer<realm_list_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_size,
  ) {
    return _realm_list_size(
          arg0,
          out_size,
        ) !=
        0;
  }

  late final _realm_list_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>,
              ffi.Pointer<ffi.IntPtr>)>>('realm_list_size');
  late final _realm_list_size = _realm_list_sizePtr.asFunction<
      int Function(ffi.Pointer<realm_list_t>, ffi.Pointer<ffi.IntPtr>)>();

  /// Get the property that this list came from.
  ///
  /// @return True if no exception occurred.
  bool realm_list_get_property(
    ffi.Pointer<realm_list_t> arg0,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_list_get_property(
          arg0,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_list_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>,
              ffi.Pointer<realm_property_info_t>)>>('realm_list_get_property');
  late final _realm_list_get_property = _realm_list_get_propertyPtr.asFunction<
      int Function(
          ffi.Pointer<realm_list_t>, ffi.Pointer<realm_property_info_t>)>();

  /// Get the value at @a index.
  ///
  /// @param out_value The resulting value, if no error occurred. May be NULL,
  /// though nonsensical.
  /// @return True if no exception occurred.
  bool realm_list_get(
    ffi.Pointer<realm_list_t> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_list_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_list_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>, ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_list_get');
  late final _realm_list_get = _realm_list_getPtr.asFunction<
      int Function(
          ffi.Pointer<realm_list_t>, int, ffi.Pointer<realm_value_t>)>();

  /// Set the value at @a index.
  ///
  /// @param value The value to set.
  /// @return True if no exception occurred.
  bool realm_list_set(
    ffi.Pointer<realm_list_t> arg0,
    int index,
    realm_value_t value,
  ) {
    return _realm_list_set(
          arg0,
          index,
          value,
        ) !=
        0;
  }

  late final _realm_list_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>, ffi.IntPtr,
              realm_value_t)>>('realm_list_set');
  late final _realm_list_set = _realm_list_setPtr.asFunction<
      int Function(ffi.Pointer<realm_list_t>, int, realm_value_t)>();

  /// Insert @a value at @a index.
  ///
  /// @param value The value to insert.
  /// @return True if no exception occurred.
  bool realm_list_insert(
    ffi.Pointer<realm_list_t> arg0,
    int index,
    realm_value_t value,
  ) {
    return _realm_list_insert(
          arg0,
          index,
          value,
        ) !=
        0;
  }

  late final _realm_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>, ffi.IntPtr,
              realm_value_t)>>('realm_list_insert');
  late final _realm_list_insert = _realm_list_insertPtr.asFunction<
      int Function(ffi.Pointer<realm_list_t>, int, realm_value_t)>();

  /// Erase the element at @a index.
  ///
  /// @return True if no exception occurred.
  bool realm_list_erase(
    ffi.Pointer<realm_list_t> arg0,
    int index,
  ) {
    return _realm_list_erase(
          arg0,
          index,
        ) !=
        0;
  }

  late final _realm_list_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_list_t>, ffi.IntPtr)>>('realm_list_erase');
  late final _realm_list_erase = _realm_list_erasePtr
      .asFunction<int Function(ffi.Pointer<realm_list_t>, int)>();

  /// Clear a list, removing all elements in the list. In a list of links, this
  /// does *NOT* delete the target objects.
  ///
  /// @return True if no exception occurred.
  bool realm_list_clear(
    ffi.Pointer<realm_list_t> arg0,
  ) {
    return _realm_list_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_list_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_list_t>)>>(
      'realm_list_clear');
  late final _realm_list_clear = _realm_list_clearPtr
      .asFunction<int Function(ffi.Pointer<realm_list_t>)>();

  /// In a list of objects, delete all objects in the list and clear the list. In a
  /// list of values, clear the list.
  ///
  /// @return True if no exception occurred.
  bool realm_list_remove_all(
    ffi.Pointer<realm_list_t> arg0,
  ) {
    return _realm_list_remove_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_list_remove_allPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_list_t>)>>(
      'realm_list_remove_all');
  late final _realm_list_remove_all = _realm_list_remove_allPtr
      .asFunction<int Function(ffi.Pointer<realm_list_t>)>();

  /// Replace the contents of a list with values.
  ///
  /// This is equivalent to calling `realm_list_clear()`, and then
  /// `realm_list_insert()` repeatedly.
  ///
  /// @return True if no exception occurred.
  bool realm_list_assign(
    ffi.Pointer<realm_list_t> arg0,
    ffi.Pointer<realm_value_t> values,
    int num_values,
  ) {
    return _realm_list_assign(
          arg0,
          values,
          num_values,
        ) !=
        0;
  }

  late final _realm_list_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_list_t>,
              ffi.Pointer<realm_value_t>, ffi.IntPtr)>>('realm_list_assign');
  late final _realm_list_assign = _realm_list_assignPtr.asFunction<
      int Function(
          ffi.Pointer<realm_list_t>, ffi.Pointer<realm_value_t>, int)>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token_t> realm_list_add_notification_callback(
    ffi.Pointer<realm_list_t> arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t free,
    ffi.Pointer<realm_key_path_array_t> arg3,
    realm_on_collection_change_func_t on_change,
    realm_callback_error_func_t on_error,
    ffi.Pointer<realm_scheduler_t> arg6,
  ) {
    return _realm_list_add_notification_callback(
      arg0,
      userdata,
      free,
      arg3,
      on_change,
      on_error,
      arg6,
    );
  }

  late final _realm_list_add_notification_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_notification_token_t> Function(
                  ffi.Pointer<realm_list_t>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  ffi.Pointer<realm_key_path_array_t>,
                  realm_on_collection_change_func_t,
                  realm_callback_error_func_t,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_list_add_notification_callback');
  late final _realm_list_add_notification_callback =
      _realm_list_add_notification_callbackPtr.asFunction<
          ffi.Pointer<realm_notification_token_t> Function(
              ffi.Pointer<realm_list_t>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t,
              ffi.Pointer<realm_key_path_array_t>,
              realm_on_collection_change_func_t,
              realm_callback_error_func_t,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Get an list from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_list_t> realm_list_from_thread_safe_reference(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_thread_safe_reference_t> arg1,
  ) {
    return _realm_list_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_list_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_list_t> Function(ffi.Pointer<realm_t>,
                  ffi.Pointer<realm_thread_safe_reference_t>)>>(
      'realm_list_from_thread_safe_reference');
  late final _realm_list_from_thread_safe_reference =
      _realm_list_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_list_t> Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_thread_safe_reference_t>)>();

  /// True if an object notification indicates that the object was deleted.
  ///
  /// This function cannot fail.
  bool realm_object_changes_is_deleted(
    ffi.Pointer<realm_object_changes_t> arg0,
  ) {
    return _realm_object_changes_is_deleted(
          arg0,
        ) !=
        0;
  }

  late final _realm_object_changes_is_deletedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<realm_object_changes_t>)>>(
      'realm_object_changes_is_deleted');
  late final _realm_object_changes_is_deleted =
      _realm_object_changes_is_deletedPtr
          .asFunction<int Function(ffi.Pointer<realm_object_changes_t>)>();

  /// Get the number of properties that were modified in an object notification.
  ///
  /// This function cannot fail.
  int realm_object_changes_get_num_modified_properties(
    ffi.Pointer<realm_object_changes_t> arg0,
  ) {
    return _realm_object_changes_get_num_modified_properties(
      arg0,
    );
  }

  late final _realm_object_changes_get_num_modified_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.IntPtr Function(ffi.Pointer<realm_object_changes_t>)>>(
      'realm_object_changes_get_num_modified_properties');
  late final _realm_object_changes_get_num_modified_properties =
      _realm_object_changes_get_num_modified_propertiesPtr
          .asFunction<int Function(ffi.Pointer<realm_object_changes_t>)>();

  /// Get the column keys for the properties that were modified in an object
  /// notification.
  ///
  /// This function cannot fail.
  ///
  /// @param out_modified Where the column keys should be written. May be NULL.
  /// @param max The maximum number of column keys to write.
  /// @return The number of column keys written to @a out_modified, or the number
  /// of modified properties if @a out_modified is NULL.
  int realm_object_changes_get_modified_properties(
    ffi.Pointer<realm_object_changes_t> arg0,
    ffi.Pointer<realm_property_key_t> out_modified,
    int max,
  ) {
    return _realm_object_changes_get_modified_properties(
      arg0,
      out_modified,
      max,
    );
  }

  late final _realm_object_changes_get_modified_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<realm_object_changes_t>,
              ffi.Pointer<realm_property_key_t>,
              ffi.IntPtr)>>('realm_object_changes_get_modified_properties');
  late final _realm_object_changes_get_modified_properties =
      _realm_object_changes_get_modified_propertiesPtr.asFunction<
          int Function(ffi.Pointer<realm_object_changes_t>,
              ffi.Pointer<realm_property_key_t>, int)>();

  /// Get the number of various types of changes in a collection notification.
  ///
  /// @param out_num_deletions The number of deletions. May be NULL.
  /// @param out_num_insertions The number of insertions. May be NULL.
  /// @param out_num_modifications The number of modifications. May be NULL.
  /// @param out_num_moves The number of moved elements. May be NULL.
  void realm_collection_changes_get_num_changes(
    ffi.Pointer<realm_collection_changes_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_num_deletions,
    ffi.Pointer<ffi.IntPtr> out_num_insertions,
    ffi.Pointer<ffi.IntPtr> out_num_modifications,
    ffi.Pointer<ffi.IntPtr> out_num_moves,
  ) {
    return _realm_collection_changes_get_num_changes(
      arg0,
      out_num_deletions,
      out_num_insertions,
      out_num_modifications,
      out_num_moves,
    );
  }

  late final _realm_collection_changes_get_num_changesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_collection_changes_t>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>)>>(
      'realm_collection_changes_get_num_changes');
  late final _realm_collection_changes_get_num_changes =
      _realm_collection_changes_get_num_changesPtr.asFunction<
          void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get the number of various types of changes in a collection notification,
  /// suitable for acquiring the change indices as ranges, which is much more
  /// compact in memory than getting the individual indices when multiple adjacent
  /// elements have been modified.
  ///
  /// @param out_num_deletion_ranges The number of deleted ranges. May be NULL.
  /// @param out_num_insertion_ranges The number of inserted ranges. May be NULL.
  /// @param out_num_modification_ranges The number of modified ranges. May be
  /// NULL.
  /// @param out_num_moves The number of moved elements. May be NULL.
  void realm_collection_changes_get_num_ranges(
    ffi.Pointer<realm_collection_changes_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_num_deletion_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_insertion_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_modification_ranges,
    ffi.Pointer<ffi.IntPtr> out_num_moves,
  ) {
    return _realm_collection_changes_get_num_ranges(
      arg0,
      out_num_deletion_ranges,
      out_num_insertion_ranges,
      out_num_modification_ranges,
      out_num_moves,
    );
  }

  late final _realm_collection_changes_get_num_rangesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_collection_changes_t>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>,
                  ffi.Pointer<ffi.IntPtr>)>>(
      'realm_collection_changes_get_num_ranges');
  late final _realm_collection_changes_get_num_ranges =
      _realm_collection_changes_get_num_rangesPtr.asFunction<
          void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get the indices of changes in a collection notification.
  ///
  /// Note: For moves, every `from` index will also be present among deletions, and
  /// every `to` index will also be present among insertions.
  ///
  /// This function cannot fail.
  ///
  /// @param out_deletion_indices Where to put the indices of deleted elements
  /// (*before* the deletion happened). May be NULL.
  /// @param max_deletion_indices The max number of indices to write to @a
  /// out_deletion_indices.
  /// @param out_insertion_indices Where the put the indices of inserted elements
  /// (*after* the insertion happened). May be NULL.
  /// @param max_insertion_indices The max number of indices to write to @a
  /// out_insertion_indices.
  /// @param out_modification_indices Where to put the indices of modified elements
  /// (*before* any insertions or deletions of
  /// other elements). May be NULL.
  /// @param max_modification_indices The max number of indices to write to @a
  /// out_modification_indices.
  /// @param out_modification_indices_after Where to put the indices of modified
  /// elements (*after* any insertions or
  /// deletions of other elements). May be
  /// NULL.
  /// @param max_modification_indices_after The max number of indices to write to
  /// @a out_modification_indices_after.
  /// @param out_moves Where to put the pairs of indices of moved elements. May be
  /// NULL.
  /// @param max_moves The max number of pairs to write to @a out_moves.
  void realm_collection_changes_get_changes(
    ffi.Pointer<realm_collection_changes_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_deletion_indices,
    int max_deletion_indices,
    ffi.Pointer<ffi.IntPtr> out_insertion_indices,
    int max_insertion_indices,
    ffi.Pointer<ffi.IntPtr> out_modification_indices,
    int max_modification_indices,
    ffi.Pointer<ffi.IntPtr> out_modification_indices_after,
    int max_modification_indices_after,
    ffi.Pointer<realm_collection_move_t> out_moves,
    int max_moves,
  ) {
    return _realm_collection_changes_get_changes(
      arg0,
      out_deletion_indices,
      max_deletion_indices,
      out_insertion_indices,
      max_insertion_indices,
      out_modification_indices,
      max_modification_indices,
      out_modification_indices_after,
      max_modification_indices_after,
      out_moves,
      max_moves,
    );
  }

  late final _realm_collection_changes_get_changesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>,
              ffi.IntPtr,
              ffi.Pointer<realm_collection_move_t>,
              ffi.IntPtr)>>('realm_collection_changes_get_changes');
  late final _realm_collection_changes_get_changes =
      _realm_collection_changes_get_changesPtr.asFunction<
          void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<ffi.IntPtr>,
              int,
              ffi.Pointer<ffi.IntPtr>,
              int,
              ffi.Pointer<ffi.IntPtr>,
              int,
              ffi.Pointer<ffi.IntPtr>,
              int,
              ffi.Pointer<realm_collection_move_t>,
              int)>();

  void realm_collection_changes_get_ranges(
    ffi.Pointer<realm_collection_changes_t> arg0,
    ffi.Pointer<realm_index_range_t> out_deletion_ranges,
    int max_deletion_ranges,
    ffi.Pointer<realm_index_range_t> out_insertion_ranges,
    int max_insertion_ranges,
    ffi.Pointer<realm_index_range_t> out_modification_ranges,
    int max_modification_ranges,
    ffi.Pointer<realm_index_range_t> out_modification_ranges_after,
    int max_modification_ranges_after,
    ffi.Pointer<realm_collection_move_t> out_moves,
    int max_moves,
  ) {
    return _realm_collection_changes_get_ranges(
      arg0,
      out_deletion_ranges,
      max_deletion_ranges,
      out_insertion_ranges,
      max_insertion_ranges,
      out_modification_ranges,
      max_modification_ranges,
      out_modification_ranges_after,
      max_modification_ranges_after,
      out_moves,
      max_moves,
    );
  }

  late final _realm_collection_changes_get_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<realm_index_range_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_index_range_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_index_range_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_index_range_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_collection_move_t>,
              ffi.IntPtr)>>('realm_collection_changes_get_ranges');
  late final _realm_collection_changes_get_ranges =
      _realm_collection_changes_get_rangesPtr.asFunction<
          void Function(
              ffi.Pointer<realm_collection_changes_t>,
              ffi.Pointer<realm_index_range_t>,
              int,
              ffi.Pointer<realm_index_range_t>,
              int,
              ffi.Pointer<realm_index_range_t>,
              int,
              ffi.Pointer<realm_index_range_t>,
              int,
              ffi.Pointer<realm_collection_move_t>,
              int)>();

  /// Get a set instance for the property of an object.
  ///
  /// Note: It is up to the caller to call `realm_release()` on the returned set.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_set_t> realm_get_set(
    ffi.Pointer<realm_object_t> arg0,
    int arg1,
  ) {
    return _realm_get_set(
      arg0,
      arg1,
    );
  }

  late final _realm_get_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_set_t> Function(ffi.Pointer<realm_object_t>,
              realm_property_key_t)>>('realm_get_set');
  late final _realm_get_set = _realm_get_setPtr.asFunction<
      ffi.Pointer<realm_set_t> Function(ffi.Pointer<realm_object_t>, int)>();

  /// Resolve the set in the context of a given Realm instance.
  ///
  /// This is equivalent to producing a thread-safe reference and resolving it in the frozen realm.
  ///
  /// If resolution is possible, a valid resolved object is produced at '*resolved*'.
  /// If resolution is not possible, but no error occurs, '*resolved' is set to NULL
  ///
  /// @return true if no error occurred.
  bool realm_set_resolve_in(
    ffi.Pointer<realm_set_t> list,
    ffi.Pointer<realm_t> target_realm,
    ffi.Pointer<ffi.Pointer<realm_set_t>> resolved,
  ) {
    return _realm_set_resolve_in(
          list,
          target_realm,
          resolved,
        ) !=
        0;
  }

  late final _realm_set_resolve_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>, ffi.Pointer<realm_t>,
              ffi.Pointer<ffi.Pointer<realm_set_t>>)>>('realm_set_resolve_in');
  late final _realm_set_resolve_in = _realm_set_resolve_inPtr.asFunction<
      int Function(ffi.Pointer<realm_set_t>, ffi.Pointer<realm_t>,
          ffi.Pointer<ffi.Pointer<realm_set_t>>)>();

  /// Check if a set is valid.
  ///
  /// @return True if the set is valid.
  bool realm_set_is_valid(
    ffi.Pointer<realm_set_t> arg0,
  ) {
    return _realm_set_is_valid(
          arg0,
        ) !=
        0;
  }

  late final _realm_set_is_validPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_set_t>)>>(
          'realm_set_is_valid');
  late final _realm_set_is_valid = _realm_set_is_validPtr
      .asFunction<int Function(ffi.Pointer<realm_set_t>)>();

  /// Get the size of a set, in number of unique elements.
  ///
  /// This function may fail if the object owning the set has been deleted.
  ///
  /// @param out_size Where to put the set size. May be NULL.
  /// @return True if no exception occurred.
  bool realm_set_size(
    ffi.Pointer<realm_set_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_size,
  ) {
    return _realm_set_size(
          arg0,
          out_size,
        ) !=
        0;
  }

  late final _realm_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>,
              ffi.Pointer<ffi.IntPtr>)>>('realm_set_size');
  late final _realm_set_size = _realm_set_sizePtr.asFunction<
      int Function(ffi.Pointer<realm_set_t>, ffi.Pointer<ffi.IntPtr>)>();

  /// Get the property that this set came from.
  ///
  /// @return True if no exception occurred.
  bool realm_set_get_property(
    ffi.Pointer<realm_set_t> arg0,
    ffi.Pointer<realm_property_info_t> out_property_info,
  ) {
    return _realm_set_get_property(
          arg0,
          out_property_info,
        ) !=
        0;
  }

  late final _realm_set_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>,
              ffi.Pointer<realm_property_info_t>)>>('realm_set_get_property');
  late final _realm_set_get_property = _realm_set_get_propertyPtr.asFunction<
      int Function(
          ffi.Pointer<realm_set_t>, ffi.Pointer<realm_property_info_t>)>();

  /// Get the value at @a index.
  ///
  /// Note that elements in a set move around arbitrarily when other elements are
  /// inserted/removed.
  ///
  /// @param out_value The resulting value, if no error occurred. May be NULL,
  /// though nonsensical.
  /// @return True if no exception occurred.
  bool realm_set_get(
    ffi.Pointer<realm_set_t> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_set_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_set_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>, ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_set_get');
  late final _realm_set_get = _realm_set_getPtr.asFunction<
      int Function(
          ffi.Pointer<realm_set_t>, int, ffi.Pointer<realm_value_t>)>();

  /// Find an element in a set.
  ///
  /// If @a value has a type that is incompatible with the set, it will be reported
  /// as not existing in the set.
  ///
  /// @param value The value to look for in the set.
  /// @param out_index If non-null, and the element is found, this will be
  /// populated with the index of the found element in the set.
  /// @param out_found If non-null, will be set to true if the element was found,
  /// otherwise will be set to false.
  /// @return True if no exception occurred.
  bool realm_set_find(
    ffi.Pointer<realm_set_t> arg0,
    realm_value_t value,
    ffi.Pointer<ffi.IntPtr> out_index,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_set_find(
          arg0,
          value,
          out_index,
          out_found,
        ) !=
        0;
  }

  late final _realm_set_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_set_t>,
              realm_value_t,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Uint8>)>>('realm_set_find');
  late final _realm_set_find = _realm_set_findPtr.asFunction<
      int Function(ffi.Pointer<realm_set_t>, realm_value_t,
          ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Uint8>)>();

  /// Insert an element in a set.
  ///
  /// If the element is already in the set, this function does nothing (and does
  /// not report an error).
  ///
  /// @param value The value to insert.
  /// @param out_index If non-null, will be set to the index of the inserted
  /// element, or the index of the existing element.
  /// @param out_inserted If non-null, will be set to true if the element did not
  /// already exist in the set. Otherwise set to false.
  /// @return True if no exception occurred.
  bool realm_set_insert(
    ffi.Pointer<realm_set_t> arg0,
    realm_value_t value,
    ffi.Pointer<ffi.IntPtr> out_index,
    ffi.Pointer<ffi.Uint8> out_inserted,
  ) {
    return _realm_set_insert(
          arg0,
          value,
          out_index,
          out_inserted,
        ) !=
        0;
  }

  late final _realm_set_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_set_t>,
              realm_value_t,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Uint8>)>>('realm_set_insert');
  late final _realm_set_insert = _realm_set_insertPtr.asFunction<
      int Function(ffi.Pointer<realm_set_t>, realm_value_t,
          ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Uint8>)>();

  /// Erase an element from a set.
  ///
  /// If the element does not exist in the set, this function does nothing (and
  /// does not report an error).
  ///
  /// @param value The value to erase.
  /// @param out_erased If non-null, will be set to true if the element was found
  /// and erased, and otherwise set to false.
  /// @return True if no exception occurred.
  bool realm_set_erase(
    ffi.Pointer<realm_set_t> arg0,
    realm_value_t value,
    ffi.Pointer<ffi.Uint8> out_erased,
  ) {
    return _realm_set_erase(
          arg0,
          value,
          out_erased,
        ) !=
        0;
  }

  late final _realm_set_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>, realm_value_t,
              ffi.Pointer<ffi.Uint8>)>>('realm_set_erase');
  late final _realm_set_erase = _realm_set_erasePtr.asFunction<
      int Function(
          ffi.Pointer<realm_set_t>, realm_value_t, ffi.Pointer<ffi.Uint8>)>();

  /// Clear a set of values.
  ///
  /// @return True if no exception occurred.
  bool realm_set_clear(
    ffi.Pointer<realm_set_t> arg0,
  ) {
    return _realm_set_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_set_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_set_t>)>>(
          'realm_set_clear');
  late final _realm_set_clear =
      _realm_set_clearPtr.asFunction<int Function(ffi.Pointer<realm_set_t>)>();

  /// In a set of objects, delete all objects in the set and clear the set. In a
  /// set of values, clear the set.
  ///
  /// @return True if no exception occurred.
  bool realm_set_remove_all(
    ffi.Pointer<realm_set_t> arg0,
  ) {
    return _realm_set_remove_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_set_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_set_t>)>>(
          'realm_set_remove_all');
  late final _realm_set_remove_all = _realm_set_remove_allPtr
      .asFunction<int Function(ffi.Pointer<realm_set_t>)>();

  /// Replace the contents of a set with values.
  ///
  /// The provided values may contain duplicates, in which case the size of the set
  /// after calling this function will be less than @a num_values.
  ///
  /// @param values The list of values to insert.
  /// @param num_values The number of elements.
  /// @return True if no exception occurred.
  bool realm_set_assign(
    ffi.Pointer<realm_set_t> arg0,
    ffi.Pointer<realm_value_t> values,
    int num_values,
  ) {
    return _realm_set_assign(
          arg0,
          values,
          num_values,
        ) !=
        0;
  }

  late final _realm_set_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_set_t>,
              ffi.Pointer<realm_value_t>, ffi.IntPtr)>>('realm_set_assign');
  late final _realm_set_assign = _realm_set_assignPtr.asFunction<
      int Function(
          ffi.Pointer<realm_set_t>, ffi.Pointer<realm_value_t>, int)>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token_t> realm_set_add_notification_callback(
    ffi.Pointer<realm_set_t> arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t free,
    ffi.Pointer<realm_key_path_array_t> arg3,
    realm_on_collection_change_func_t on_change,
    realm_callback_error_func_t on_error,
    ffi.Pointer<realm_scheduler_t> arg6,
  ) {
    return _realm_set_add_notification_callback(
      arg0,
      userdata,
      free,
      arg3,
      on_change,
      on_error,
      arg6,
    );
  }

  late final _realm_set_add_notification_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_notification_token_t> Function(
                  ffi.Pointer<realm_set_t>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  ffi.Pointer<realm_key_path_array_t>,
                  realm_on_collection_change_func_t,
                  realm_callback_error_func_t,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_set_add_notification_callback');
  late final _realm_set_add_notification_callback =
      _realm_set_add_notification_callbackPtr.asFunction<
          ffi.Pointer<realm_notification_token_t> Function(
              ffi.Pointer<realm_set_t>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t,
              ffi.Pointer<realm_key_path_array_t>,
              realm_on_collection_change_func_t,
              realm_callback_error_func_t,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Get an set from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_set_t> realm_set_from_thread_safe_reference(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_thread_safe_reference_t> arg1,
  ) {
    return _realm_set_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_set_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_set_t> Function(ffi.Pointer<realm_t>,
                  ffi.Pointer<realm_thread_safe_reference_t>)>>(
      'realm_set_from_thread_safe_reference');
  late final _realm_set_from_thread_safe_reference =
      _realm_set_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_set_t> Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_thread_safe_reference_t>)>();

  /// Get a dictionary instance for the property of an object.
  ///
  /// Note: It is up to the caller to call `realm_release()` on the returned dictionary.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_dictionary_t> realm_get_dictionary(
    ffi.Pointer<realm_object_t> arg0,
    int arg1,
  ) {
    return _realm_get_dictionary(
      arg0,
      arg1,
    );
  }

  late final _realm_get_dictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_dictionary_t> Function(ffi.Pointer<realm_object_t>,
              realm_property_key_t)>>('realm_get_dictionary');
  late final _realm_get_dictionary = _realm_get_dictionaryPtr.asFunction<
      ffi.Pointer<realm_dictionary_t> Function(
          ffi.Pointer<realm_object_t>, int)>();

  /// Resolve the list in the context of a given Realm instance.
  ///
  /// This is equivalent to producing a thread-safe reference and resolving it in the frozen realm.
  ///
  /// If resolution is possible, a valid resolved object is produced at '*resolved*'.
  /// If resolution is not possible, but no error occurs, '*resolved' is set to NULL
  ///
  /// @return true if no error occurred.
  bool realm_dictionary_resolve_in(
    ffi.Pointer<realm_dictionary_t> list,
    ffi.Pointer<realm_t> target_realm,
    ffi.Pointer<ffi.Pointer<realm_dictionary_t>> resolved,
  ) {
    return _realm_dictionary_resolve_in(
          list,
          target_realm,
          resolved,
        ) !=
        0;
  }

  late final _realm_dictionary_resolve_inPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_dictionary_t>,
                  ffi.Pointer<realm_t>,
                  ffi.Pointer<ffi.Pointer<realm_dictionary_t>>)>>(
      'realm_dictionary_resolve_in');
  late final _realm_dictionary_resolve_in =
      _realm_dictionary_resolve_inPtr.asFunction<
          int Function(ffi.Pointer<realm_dictionary_t>, ffi.Pointer<realm_t>,
              ffi.Pointer<ffi.Pointer<realm_dictionary_t>>)>();

  /// Check if a list is valid.
  ///
  /// @return True if the list is valid.
  bool realm_dictionary_is_valid(
    ffi.Pointer<realm_dictionary_t> arg0,
  ) {
    return _realm_dictionary_is_valid(
          arg0,
        ) !=
        0;
  }

  late final _realm_dictionary_is_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>)>>('realm_dictionary_is_valid');
  late final _realm_dictionary_is_valid = _realm_dictionary_is_validPtr
      .asFunction<int Function(ffi.Pointer<realm_dictionary_t>)>();

  /// Get the size of a dictionary (the number of unique keys).
  ///
  /// This function may fail if the object owning the dictionary has been deleted.
  ///
  /// @param out_size Where to put the dictionary size. May be NULL.
  /// @return True if no exception occurred.
  bool realm_dictionary_size(
    ffi.Pointer<realm_dictionary_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_size,
  ) {
    return _realm_dictionary_size(
          arg0,
          out_size,
        ) !=
        0;
  }

  late final _realm_dictionary_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_dictionary_t>,
              ffi.Pointer<ffi.IntPtr>)>>('realm_dictionary_size');
  late final _realm_dictionary_size = _realm_dictionary_sizePtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, ffi.Pointer<ffi.IntPtr>)>();

  /// Get the property that this dictionary came from.
  ///
  /// @return True if no exception occurred.
  bool realm_dictionary_get_property(
    ffi.Pointer<realm_dictionary_t> arg0,
    ffi.Pointer<realm_property_info_t> out_info,
  ) {
    return _realm_dictionary_get_property(
          arg0,
          out_info,
        ) !=
        0;
  }

  late final _realm_dictionary_get_propertyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<realm_dictionary_t>,
                  ffi.Pointer<realm_property_info_t>)>>(
      'realm_dictionary_get_property');
  late final _realm_dictionary_get_property =
      _realm_dictionary_get_propertyPtr.asFunction<
          int Function(ffi.Pointer<realm_dictionary_t>,
              ffi.Pointer<realm_property_info_t>)>();

  /// Find an element in a dictionary.
  ///
  /// @param key The key to look for.
  /// @param out_value If non-null, the value for the corresponding key.
  /// @param out_found If non-null, will be set to true if the dictionary contained the key.
  /// @return True if no exception occurred.
  bool realm_dictionary_find(
    ffi.Pointer<realm_dictionary_t> arg0,
    realm_value_t key,
    ffi.Pointer<realm_value_t> out_value,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_dictionary_find(
          arg0,
          key,
          out_value,
          out_found,
        ) !=
        0;
  }

  late final _realm_dictionary_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>,
              realm_value_t,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_dictionary_find');
  late final _realm_dictionary_find = _realm_dictionary_findPtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, realm_value_t,
          ffi.Pointer<realm_value_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Get the key-value pair at @a index.
  ///
  /// Note that the indices of elements in the dictionary move around as other
  /// elements are inserted/removed.
  ///
  /// @param index The index in the dictionary.
  /// @param out_key If non-null, will be set to the key at the corresponding index.
  /// @param out_value If non-null, will be set to the value at the corresponding index.
  /// @return True if no exception occurred.
  bool realm_dictionary_get(
    ffi.Pointer<realm_dictionary_t> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_key,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_dictionary_get(
          arg0,
          index,
          out_key,
          out_value,
        ) !=
        0;
  }

  late final _realm_dictionary_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<realm_value_t>)>>('realm_dictionary_get');
  late final _realm_dictionary_get = _realm_dictionary_getPtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<realm_value_t>)>();

  /// Insert or update an element in a dictionary.
  ///
  /// If the key already exists, the value will be overwritten.
  ///
  /// @param key The lookup key.
  /// @param value The value to insert.
  /// @param out_index If non-null, will be set to the index of the element after
  /// insertion/update.
  /// @param out_inserted If non-null, will be set to true if the key did not
  /// already exist.
  /// @return True if no exception occurred.
  bool realm_dictionary_insert(
    ffi.Pointer<realm_dictionary_t> arg0,
    realm_value_t key,
    realm_value_t value,
    ffi.Pointer<ffi.IntPtr> out_index,
    ffi.Pointer<ffi.Uint8> out_inserted,
  ) {
    return _realm_dictionary_insert(
          arg0,
          key,
          value,
          out_index,
          out_inserted,
        ) !=
        0;
  }

  late final _realm_dictionary_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>,
              realm_value_t,
              realm_value_t,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Uint8>)>>('realm_dictionary_insert');
  late final _realm_dictionary_insert = _realm_dictionary_insertPtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, realm_value_t,
          realm_value_t, ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Uint8>)>();

  /// Erase a dictionary element.
  ///
  /// @param key The key of the element to erase.
  /// @param out_erased If non-null, will be set to true if the element was found
  /// and erased.
  /// @return True if no exception occurred.
  bool realm_dictionary_erase(
    ffi.Pointer<realm_dictionary_t> arg0,
    realm_value_t key,
    ffi.Pointer<ffi.Uint8> out_erased,
  ) {
    return _realm_dictionary_erase(
          arg0,
          key,
          out_erased,
        ) !=
        0;
  }

  late final _realm_dictionary_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_dictionary_t>, realm_value_t,
              ffi.Pointer<ffi.Uint8>)>>('realm_dictionary_erase');
  late final _realm_dictionary_erase = _realm_dictionary_erasePtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, realm_value_t,
          ffi.Pointer<ffi.Uint8>)>();

  /// Clear a dictionary.
  ///
  /// @return True if no exception occurred.
  bool realm_dictionary_clear(
    ffi.Pointer<realm_dictionary_t> arg0,
  ) {
    return _realm_dictionary_clear(
          arg0,
        ) !=
        0;
  }

  late final _realm_dictionary_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>)>>('realm_dictionary_clear');
  late final _realm_dictionary_clear = _realm_dictionary_clearPtr
      .asFunction<int Function(ffi.Pointer<realm_dictionary_t>)>();

  /// Replace the contents of a dictionary with key/value pairs.
  ///
  /// The provided keys may contain duplicates, in which case the size of the
  /// dictionary after calling this function will be less than @a num_pairs.
  ///
  /// @param keys An array of keys of length @a num_pairs.
  /// @param values An array of values of length @a num_pairs.
  /// @param num_pairs The number of key-value pairs to assign.
  /// @return True if no exception occurred.
  bool realm_dictionary_assign(
    ffi.Pointer<realm_dictionary_t> arg0,
    int num_pairs,
    ffi.Pointer<realm_value_t> keys,
    ffi.Pointer<realm_value_t> values,
  ) {
    return _realm_dictionary_assign(
          arg0,
          num_pairs,
          keys,
          values,
        ) !=
        0;
  }

  late final _realm_dictionary_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_dictionary_t>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<realm_value_t>)>>('realm_dictionary_assign');
  late final _realm_dictionary_assign = _realm_dictionary_assignPtr.asFunction<
      int Function(ffi.Pointer<realm_dictionary_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<realm_value_t>)>();

  /// Subscribe to notifications for this object.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_notification_token_t>
      realm_dictionary_add_notification_callback(
    ffi.Pointer<realm_dictionary_t> arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t free,
    ffi.Pointer<realm_key_path_array_t> arg3,
    realm_on_collection_change_func_t on_change,
    realm_callback_error_func_t on_error,
    ffi.Pointer<realm_scheduler_t> arg6,
  ) {
    return _realm_dictionary_add_notification_callback(
      arg0,
      userdata,
      free,
      arg3,
      on_change,
      on_error,
      arg6,
    );
  }

  late final _realm_dictionary_add_notification_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_notification_token_t> Function(
                  ffi.Pointer<realm_dictionary_t>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  ffi.Pointer<realm_key_path_array_t>,
                  realm_on_collection_change_func_t,
                  realm_callback_error_func_t,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_dictionary_add_notification_callback');
  late final _realm_dictionary_add_notification_callback =
      _realm_dictionary_add_notification_callbackPtr.asFunction<
          ffi.Pointer<realm_notification_token_t> Function(
              ffi.Pointer<realm_dictionary_t>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t,
              ffi.Pointer<realm_key_path_array_t>,
              realm_on_collection_change_func_t,
              realm_callback_error_func_t,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Get an dictionary from a thread-safe reference, potentially originating in a
  /// different `realm_t` instance
  ffi.Pointer<realm_dictionary_t> realm_dictionary_from_thread_safe_reference(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_thread_safe_reference_t> arg1,
  ) {
    return _realm_dictionary_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_dictionary_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_dictionary_t> Function(ffi.Pointer<realm_t>,
                  ffi.Pointer<realm_thread_safe_reference_t>)>>(
      'realm_dictionary_from_thread_safe_reference');
  late final _realm_dictionary_from_thread_safe_reference =
      _realm_dictionary_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_dictionary_t> Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_thread_safe_reference_t>)>();

  /// Parse a query string and bind it to a table.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_table The table on which to run this query.
  /// @param query_string A zero-terminated string in the Realm Query Language,
  /// optionally containing argument placeholders (`$0`, `$1`,
  /// etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query_t> realm_query_parse(
    ffi.Pointer<realm_t> arg0,
    int target_table,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse(
      arg0,
      target_table,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_query_t> Function(
              ffi.Pointer<realm_t>,
              realm_class_key_t,
              ffi.Pointer<ffi.Int8>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_query_parse');
  late final _realm_query_parse = _realm_query_parsePtr.asFunction<
      ffi.Pointer<realm_query_t> Function(ffi.Pointer<realm_t>, int,
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<realm_value_t>)>();

  /// Get textual representation of query
  ///
  /// @return a string containing the description. The string memory is managed by the query object.
  ffi.Pointer<ffi.Int8> realm_query_get_description(
    ffi.Pointer<realm_query_t> arg0,
  ) {
    return _realm_query_get_description(
      arg0,
    );
  }

  late final _realm_query_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_query_t>)>>('realm_query_get_description');
  late final _realm_query_get_description = _realm_query_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_query_t>)>();

  /// Parse a query string and append it to an existing query via logical &&.
  /// The query string applies to the same table and Realm as the existing query.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param query_string A zero-terminated string in the Realm Query Language,
  /// optionally containing argument placeholders (`$0`, `$1`,
  /// etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query_t> realm_query_append_query(
    ffi.Pointer<realm_query_t> arg0,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_append_query(
      arg0,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_append_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_query_t> Function(
              ffi.Pointer<realm_query_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_query_append_query');
  late final _realm_query_append_query =
      _realm_query_append_queryPtr.asFunction<
          ffi.Pointer<realm_query_t> Function(ffi.Pointer<realm_query_t>,
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<realm_value_t>)>();

  /// Parse a query string and bind it to a list.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_list The list on which to run this query.
  /// @param query_string A string in the Realm Query Language, optionally
  /// containing argument placeholders (`$0`, `$1`, etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query_t> realm_query_parse_for_list(
    ffi.Pointer<realm_list_t> target_list,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse_for_list(
      target_list,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parse_for_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_query_t> Function(
              ffi.Pointer<realm_list_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_query_parse_for_list');
  late final _realm_query_parse_for_list =
      _realm_query_parse_for_listPtr.asFunction<
          ffi.Pointer<realm_query_t> Function(ffi.Pointer<realm_list_t>,
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<realm_value_t>)>();

  /// Parse a query string and bind it to another query result.
  ///
  /// If the query failed to parse, the parser error is available from
  /// `realm_get_last_error()`.
  ///
  /// @param target_results The results on which to run this query.
  /// @param query_string A zero-terminated string in the Realm Query Language,
  /// optionally containing argument placeholders (`$0`, `$1`,
  /// etc.).
  /// @param num_args The number of arguments for this query.
  /// @param args A pointer to a list of argument values.
  /// @return A non-null pointer if the query was successfully parsed and no
  /// exception occurred.
  ffi.Pointer<realm_query_t> realm_query_parse_for_results(
    ffi.Pointer<realm_results_t> target_results,
    ffi.Pointer<ffi.Int8> query_string,
    int num_args,
    ffi.Pointer<realm_value_t> args,
  ) {
    return _realm_query_parse_for_results(
      target_results,
      query_string,
      num_args,
      args,
    );
  }

  late final _realm_query_parse_for_resultsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_query_t> Function(
              ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_query_parse_for_results');
  late final _realm_query_parse_for_results =
      _realm_query_parse_for_resultsPtr.asFunction<
          ffi.Pointer<realm_query_t> Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<realm_value_t>)>();

  /// Count the number of objects found by this query.
  bool realm_query_count(
    ffi.Pointer<realm_query_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_query_count(
          arg0,
          out_count,
        ) !=
        0;
  }

  late final _realm_query_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_query_t>,
              ffi.Pointer<ffi.IntPtr>)>>('realm_query_count');
  late final _realm_query_count = _realm_query_countPtr.asFunction<
      int Function(ffi.Pointer<realm_query_t>, ffi.Pointer<ffi.IntPtr>)>();

  /// Return the first object matched by this query.
  ///
  /// Note: This function can only produce objects, not values. Use the
  /// `realm_results_t` returned by `realm_query_find_all()` to retrieve
  /// values from a list of primitive values.
  ///
  /// @param out_value Where to write the result, if any object matched the query.
  /// May be NULL.
  /// @param out_found Where to write whether the object was found. May be NULL.
  /// @return True if no exception occurred.
  bool realm_query_find_first(
    ffi.Pointer<realm_query_t> arg0,
    ffi.Pointer<realm_value_t> out_value,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_query_find_first(
          arg0,
          out_value,
          out_found,
        ) !=
        0;
  }

  late final _realm_query_find_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_query_t>,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_query_find_first');
  late final _realm_query_find_first = _realm_query_find_firstPtr.asFunction<
      int Function(ffi.Pointer<realm_query_t>, ffi.Pointer<realm_value_t>,
          ffi.Pointer<ffi.Uint8>)>();

  /// Produce a results object for this query.
  ///
  /// Note: This does not actually run the query until the results are accessed in
  /// some way.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results_t> realm_query_find_all(
    ffi.Pointer<realm_query_t> arg0,
  ) {
    return _realm_query_find_all(
      arg0,
    );
  }

  late final _realm_query_find_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(
              ffi.Pointer<realm_query_t>)>>('realm_query_find_all');
  late final _realm_query_find_all = _realm_query_find_allPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_query_t>)>();

  /// Delete all objects matched by a query.
  bool realm_query_delete_all(
    ffi.Pointer<realm_query_t> arg0,
  ) {
    return _realm_query_delete_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_query_delete_allPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_query_t>)>>(
      'realm_query_delete_all');
  late final _realm_query_delete_all = _realm_query_delete_allPtr
      .asFunction<int Function(ffi.Pointer<realm_query_t>)>();

  /// Count the number of results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// @return True if no exception occurred.
  bool realm_results_count(
    ffi.Pointer<realm_results_t> arg0,
    ffi.Pointer<ffi.IntPtr> out_count,
  ) {
    return _realm_results_count(
          arg0,
          out_count,
        ) !=
        0;
  }

  late final _realm_results_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.IntPtr>)>>('realm_results_count');
  late final _realm_results_count = _realm_results_countPtr.asFunction<
      int Function(ffi.Pointer<realm_results_t>, ffi.Pointer<ffi.IntPtr>)>();

  /// Create a new results object by further filtering existing result.
  ///
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results_t> realm_results_filter(
    ffi.Pointer<realm_results_t> arg0,
    ffi.Pointer<realm_query_t> arg1,
  ) {
    return _realm_results_filter(
      arg0,
      arg1,
    );
  }

  late final _realm_results_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<realm_query_t>)>>('realm_results_filter');
  late final _realm_results_filter = _realm_results_filterPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(
          ffi.Pointer<realm_results_t>, ffi.Pointer<realm_query_t>)>();

  /// Create a new results object by further sorting existing result.
  ///
  /// @param sort_string Specifies a sort condition. It has the format
  /// <param> ["," <param>]*
  /// <param> ::= <prop> ["." <prop>]* <direction>,
  /// <direction> ::= "ASCENDING" | "DESCENDING"
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results_t> realm_results_sort(
    ffi.Pointer<realm_results_t> results,
    ffi.Pointer<ffi.Int8> sort_string,
  ) {
    return _realm_results_sort(
      results,
      sort_string,
    );
  }

  late final _realm_results_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_results_sort');
  late final _realm_results_sort = _realm_results_sortPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(
          ffi.Pointer<realm_results_t>, ffi.Pointer<ffi.Int8>)>();

  /// Create a new results object by removing duplicates
  ///
  /// @param distinct_string Specifies a distinct condition. It has the format
  /// <param> ["," <param>]*
  /// <param> ::= <prop> ["." <prop>]*
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results_t> realm_results_distinct(
    ffi.Pointer<realm_results_t> results,
    ffi.Pointer<ffi.Int8> distinct_string,
  ) {
    return _realm_results_distinct(
      results,
      distinct_string,
    );
  }

  late final _realm_results_distinctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_results_distinct');
  late final _realm_results_distinct = _realm_results_distinctPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(
          ffi.Pointer<realm_results_t>, ffi.Pointer<ffi.Int8>)>();

  /// Create a new results object by limiting the number of items
  ///
  /// @param max_count Specifies the number of elements the new result can have at most
  /// @return A non-null pointer if no exception occurred.
  ffi.Pointer<realm_results_t> realm_results_limit(
    ffi.Pointer<realm_results_t> results,
    int max_count,
  ) {
    return _realm_results_limit(
      results,
      max_count,
    );
  }

  late final _realm_results_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>,
              ffi.IntPtr)>>('realm_results_limit');
  late final _realm_results_limit = _realm_results_limitPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(
          ffi.Pointer<realm_results_t>, int)>();

  /// Get the matching element at @a index in the results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// Note: The bound returned by `realm_results_count()` for a non-snapshot result
  /// is not a reliable way to iterate over elements in the result, because
  /// the result will be live-updated if changes are made in each iteration
  /// that may change the number of query results or even change the
  /// ordering. In other words, this method should probably only be used with
  /// snapshot results.
  ///
  /// @return True if no exception occurred (including out-of-bounds).
  bool realm_results_get(
    ffi.Pointer<realm_results_t> arg0,
    int index,
    ffi.Pointer<realm_value_t> out_value,
  ) {
    return _realm_results_get(
          arg0,
          index,
          out_value,
        ) !=
        0;
  }

  late final _realm_results_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<realm_results_t>, ffi.IntPtr,
              ffi.Pointer<realm_value_t>)>>('realm_results_get');
  late final _realm_results_get = _realm_results_getPtr.asFunction<
      int Function(
          ffi.Pointer<realm_results_t>, int, ffi.Pointer<realm_value_t>)>();

  /// Get the matching object at @a index in the results.
  ///
  /// If the result is "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// Note: The bound returned by `realm_results_count()` for a non-snapshot result
  /// is not a reliable way to iterate over elements in the result, because
  /// the result will be live-updated if changes are made in each iteration
  /// that may change the number of query results or even change the
  /// ordering. In other words, this method should probably only be used with
  /// snapshot results.
  ///
  /// @return An instance of `realm_object_t` if no exception occurred.
  ffi.Pointer<realm_object_t> realm_results_get_object(
    ffi.Pointer<realm_results_t> arg0,
    int index,
  ) {
    return _realm_results_get_object(
      arg0,
      index,
    );
  }

  late final _realm_results_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_object_t> Function(ffi.Pointer<realm_results_t>,
              ffi.IntPtr)>>('realm_results_get_object');
  late final _realm_results_get_object =
      _realm_results_get_objectPtr.asFunction<
          ffi.Pointer<realm_object_t> Function(
              ffi.Pointer<realm_results_t>, int)>();

  /// Delete all objects in the result.
  ///
  /// If the result if "live" (not a snapshot), this may rerun the query if things
  /// have changed.
  ///
  /// @return True if no exception occurred.
  bool realm_results_delete_all(
    ffi.Pointer<realm_results_t> arg0,
  ) {
    return _realm_results_delete_all(
          arg0,
        ) !=
        0;
  }

  late final _realm_results_delete_allPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_results_t>)>>(
      'realm_results_delete_all');
  late final _realm_results_delete_all = _realm_results_delete_allPtr
      .asFunction<int Function(ffi.Pointer<realm_results_t>)>();

  /// Return a snapshot of the results that never automatically updates.
  ///
  /// The returned result is suitable for use with `realm_results_count()` +
  /// `realm_results_get()`.
  ffi.Pointer<realm_results_t> realm_results_snapshot(
    ffi.Pointer<realm_results_t> arg0,
  ) {
    return _realm_results_snapshot(
      arg0,
    );
  }

  late final _realm_results_snapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(
              ffi.Pointer<realm_results_t>)>>('realm_results_snapshot');
  late final _realm_results_snapshot = _realm_results_snapshotPtr.asFunction<
      ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>)>();

  /// Map the Results into a live Realm instance.
  ///
  /// This is equivalent to producing a thread-safe reference and resolving it in the live realm.
  ///
  /// @return A live copy of the Results.
  ffi.Pointer<realm_results_t> realm_results_resolve_in(
    ffi.Pointer<realm_results_t> from_results,
    ffi.Pointer<realm_t> target_realm,
  ) {
    return _realm_results_resolve_in(
      from_results,
      target_realm,
    );
  }

  late final _realm_results_resolve_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_results_t>,
              ffi.Pointer<realm_t>)>>('realm_results_resolve_in');
  late final _realm_results_resolve_in =
      _realm_results_resolve_inPtr.asFunction<
          ffi.Pointer<realm_results_t> Function(
              ffi.Pointer<realm_results_t>, ffi.Pointer<realm_t>)>();

  /// Compute the minimum value of a property in the results.
  ///
  /// @param out_min Where to write the result, if there were matching rows.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_min(
    ffi.Pointer<realm_results_t> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_min,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_min(
          arg0,
          arg1,
          out_min,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_results_t>,
              realm_property_key_t,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_results_min');
  late final _realm_results_min = _realm_results_minPtr.asFunction<
      int Function(ffi.Pointer<realm_results_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Compute the maximum value of a property in the results.
  ///
  /// @param out_max Where to write the result, if there were matching rows.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_max(
    ffi.Pointer<realm_results_t> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_max,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_max(
          arg0,
          arg1,
          out_max,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_results_t>,
              realm_property_key_t,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_results_max');
  late final _realm_results_max = _realm_results_maxPtr.asFunction<
      int Function(ffi.Pointer<realm_results_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Compute the sum value of a property in the results.
  ///
  /// @param out_sum Where to write the result. Zero if no rows matched.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_sum(
    ffi.Pointer<realm_results_t> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_sum,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_sum(
          arg0,
          arg1,
          out_sum,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_results_t>,
              realm_property_key_t,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_results_sum');
  late final _realm_results_sum = _realm_results_sumPtr.asFunction<
      int Function(ffi.Pointer<realm_results_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<ffi.Uint8>)>();

  /// Compute the average value of a property in the results.
  ///
  /// Note: For numeric columns, the average is always converted to double.
  ///
  /// @param out_average Where to write the result.
  /// @param out_found Set to true if there are matching rows.
  /// @return True if no exception occurred.
  bool realm_results_average(
    ffi.Pointer<realm_results_t> arg0,
    int arg1,
    ffi.Pointer<realm_value_t> out_average,
    ffi.Pointer<ffi.Uint8> out_found,
  ) {
    return _realm_results_average(
          arg0,
          arg1,
          out_average,
          out_found,
        ) !=
        0;
  }

  late final _realm_results_averagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_results_t>,
              realm_property_key_t,
              ffi.Pointer<realm_value_t>,
              ffi.Pointer<ffi.Uint8>)>>('realm_results_average');
  late final _realm_results_average = _realm_results_averagePtr.asFunction<
      int Function(ffi.Pointer<realm_results_t>, int,
          ffi.Pointer<realm_value_t>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<realm_notification_token_t>
      realm_results_add_notification_callback(
    ffi.Pointer<realm_results_t> arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg2,
    ffi.Pointer<realm_key_path_array_t> arg3,
    realm_on_collection_change_func_t arg4,
    realm_callback_error_func_t arg5,
    ffi.Pointer<realm_scheduler_t> arg6,
  ) {
    return _realm_results_add_notification_callback(
      arg0,
      userdata,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _realm_results_add_notification_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_notification_token_t> Function(
                  ffi.Pointer<realm_results_t>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t,
                  ffi.Pointer<realm_key_path_array_t>,
                  realm_on_collection_change_func_t,
                  realm_callback_error_func_t,
                  ffi.Pointer<realm_scheduler_t>)>>(
      'realm_results_add_notification_callback');
  late final _realm_results_add_notification_callback =
      _realm_results_add_notification_callbackPtr.asFunction<
          ffi.Pointer<realm_notification_token_t> Function(
              ffi.Pointer<realm_results_t>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t,
              ffi.Pointer<realm_key_path_array_t>,
              realm_on_collection_change_func_t,
              realm_callback_error_func_t,
              ffi.Pointer<realm_scheduler_t>)>();

  /// Get an results object from a thread-safe reference, potentially originating
  /// in a different `realm_t` instance
  ffi.Pointer<realm_results_t> realm_results_from_thread_safe_reference(
    ffi.Pointer<realm_t> arg0,
    ffi.Pointer<realm_thread_safe_reference_t> arg1,
  ) {
    return _realm_results_from_thread_safe_reference(
      arg0,
      arg1,
    );
  }

  late final _realm_results_from_thread_safe_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_t>,
                  ffi.Pointer<realm_thread_safe_reference_t>)>>(
      'realm_results_from_thread_safe_reference');
  late final _realm_results_from_thread_safe_reference =
      _realm_results_from_thread_safe_referencePtr.asFunction<
          ffi.Pointer<realm_results_t> Function(ffi.Pointer<realm_t>,
              ffi.Pointer<realm_thread_safe_reference_t>)>();

  /// Create a new HTTP transport with these callbacks implementing its functionality.
  ffi.Pointer<realm_http_transport_t> realm_http_transport_new(
    realm_http_request_func_t arg0,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg2,
  ) {
    return _realm_http_transport_new(
      arg0,
      userdata,
      arg2,
    );
  }

  late final _realm_http_transport_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_http_transport_t> Function(
              realm_http_request_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_http_transport_new');
  late final _realm_http_transport_new =
      _realm_http_transport_newPtr.asFunction<
          ffi.Pointer<realm_http_transport_t> Function(
              realm_http_request_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  /// Complete a HTTP request with the given response.
  ///
  /// @param request_context Internal state pointer passed by Core when invoking realm_http_request_func_t
  /// to start the request.
  /// @param response The server response to the HTTP request initiated by Core.
  void realm_http_transport_complete_request(
    ffi.Pointer<ffi.Void> request_context,
    ffi.Pointer<realm_http_response_t> response,
  ) {
    return _realm_http_transport_complete_request(
      request_context,
      response,
    );
  }

  late final _realm_http_transport_complete_requestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<realm_http_response_t>)>>(
      'realm_http_transport_complete_request');
  late final _realm_http_transport_complete_request =
      _realm_http_transport_complete_requestPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<realm_http_response_t>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_anonymous() {
    return _realm_app_credentials_new_anonymous();
  }

  late final _realm_app_credentials_new_anonymousPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<realm_app_credentials_t> Function()>>(
      'realm_app_credentials_new_anonymous');
  late final _realm_app_credentials_new_anonymous =
      _realm_app_credentials_new_anonymousPtr
          .asFunction<ffi.Pointer<realm_app_credentials_t> Function()>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_facebook(
    ffi.Pointer<ffi.Int8> access_token,
  ) {
    return _realm_app_credentials_new_facebook(
      access_token,
    );
  }

  late final _realm_app_credentials_new_facebookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_credentials_new_facebook');
  late final _realm_app_credentials_new_facebook =
      _realm_app_credentials_new_facebookPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_google(
    ffi.Pointer<ffi.Int8> id_token,
  ) {
    return _realm_app_credentials_new_google(
      id_token,
    );
  }

  late final _realm_app_credentials_new_googlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_credentials_new_google');
  late final _realm_app_credentials_new_google =
      _realm_app_credentials_new_googlePtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_apple(
    ffi.Pointer<ffi.Int8> id_token,
  ) {
    return _realm_app_credentials_new_apple(
      id_token,
    );
  }

  late final _realm_app_credentials_new_applePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_credentials_new_apple');
  late final _realm_app_credentials_new_apple =
      _realm_app_credentials_new_applePtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_jwt(
    ffi.Pointer<ffi.Int8> jwt_token,
  ) {
    return _realm_app_credentials_new_jwt(
      jwt_token,
    );
  }

  late final _realm_app_credentials_new_jwtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_credentials_new_jwt');
  late final _realm_app_credentials_new_jwt =
      _realm_app_credentials_new_jwtPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_email_password(
    ffi.Pointer<ffi.Int8> email,
    realm_string_t password,
  ) {
    return _realm_app_credentials_new_email_password(
      email,
      password,
    );
  }

  late final _realm_app_credentials_new_email_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(ffi.Pointer<ffi.Int8>,
              realm_string_t)>>('realm_app_credentials_new_email_password');
  late final _realm_app_credentials_new_email_password =
      _realm_app_credentials_new_email_passwordPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>, realm_string_t)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_user_api_key(
    ffi.Pointer<ffi.Int8> api_key,
  ) {
    return _realm_app_credentials_new_user_api_key(
      api_key,
    );
  }

  late final _realm_app_credentials_new_user_api_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_app_credentials_t> Function(
                  ffi.Pointer<ffi.Int8>)>>(
      'realm_app_credentials_new_user_api_key');
  late final _realm_app_credentials_new_user_api_key =
      _realm_app_credentials_new_user_api_keyPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_server_api_key(
    ffi.Pointer<ffi.Int8> api_key,
  ) {
    return _realm_app_credentials_new_server_api_key(
      api_key,
    );
  }

  late final _realm_app_credentials_new_server_api_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_app_credentials_t> Function(
                  ffi.Pointer<ffi.Int8>)>>(
      'realm_app_credentials_new_server_api_key');
  late final _realm_app_credentials_new_server_api_key =
      _realm_app_credentials_new_server_api_keyPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  /// Create Custom Function authentication app credentials.
  ///
  /// @param serialized_ejson_payload The arguments array to invoke the function with,
  /// serialized as an Extended JSON string.
  /// @return null, if an error occurred.
  ffi.Pointer<realm_app_credentials_t> realm_app_credentials_new_function(
    ffi.Pointer<ffi.Int8> serialized_ejson_payload,
  ) {
    return _realm_app_credentials_new_function(
      serialized_ejson_payload,
    );
  }

  late final _realm_app_credentials_new_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_credentials_new_function');
  late final _realm_app_credentials_new_function =
      _realm_app_credentials_new_functionPtr.asFunction<
          ffi.Pointer<realm_app_credentials_t> Function(
              ffi.Pointer<ffi.Int8>)>();

  int realm_auth_credentials_get_provider(
    ffi.Pointer<realm_app_credentials_t> arg0,
  ) {
    return _realm_auth_credentials_get_provider(
      arg0,
    );
  }

  late final _realm_auth_credentials_get_providerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<realm_app_credentials_t>)>>(
      'realm_auth_credentials_get_provider');
  late final _realm_auth_credentials_get_provider =
      _realm_auth_credentials_get_providerPtr
          .asFunction<int Function(ffi.Pointer<realm_app_credentials_t>)>();

  /// Create a new app configuration.
  ///
  /// @param app_id The MongoDB Realm app id.
  /// @param http_transport The HTTP transport used to make network calls.
  ffi.Pointer<realm_app_config_t> realm_app_config_new(
    ffi.Pointer<ffi.Int8> app_id,
    ffi.Pointer<realm_http_transport_t> http_transport,
  ) {
    return _realm_app_config_new(
      app_id,
      http_transport,
    );
  }

  late final _realm_app_config_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_config_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<realm_http_transport_t>)>>('realm_app_config_new');
  late final _realm_app_config_new = _realm_app_config_newPtr.asFunction<
      ffi.Pointer<realm_app_config_t> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<realm_http_transport_t>)>();

  void realm_app_config_set_base_url(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_base_url(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_base_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_app_config_set_base_url');
  late final _realm_app_config_set_base_url =
      _realm_app_config_set_base_urlPtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_app_config_set_local_app_name(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_local_app_name(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_local_app_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_app_config_set_local_app_name');
  late final _realm_app_config_set_local_app_name =
      _realm_app_config_set_local_app_namePtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_app_config_set_local_app_version(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_local_app_version(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_local_app_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>>(
      'realm_app_config_set_local_app_version');
  late final _realm_app_config_set_local_app_version =
      _realm_app_config_set_local_app_versionPtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_app_config_set_default_request_timeout(
    ffi.Pointer<realm_app_config_t> arg0,
    int ms,
  ) {
    return _realm_app_config_set_default_request_timeout(
      arg0,
      ms,
    );
  }

  late final _realm_app_config_set_default_request_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Uint64)>>('realm_app_config_set_default_request_timeout');
  late final _realm_app_config_set_default_request_timeout =
      _realm_app_config_set_default_request_timeoutPtr
          .asFunction<void Function(ffi.Pointer<realm_app_config_t>, int)>();

  void realm_app_config_set_platform(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_platform(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_platformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_app_config_set_platform');
  late final _realm_app_config_set_platform =
      _realm_app_config_set_platformPtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_app_config_set_platform_version(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_platform_version(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_platform_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_app_config_set_platform_version');
  late final _realm_app_config_set_platform_version =
      _realm_app_config_set_platform_versionPtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_app_config_set_sdk_version(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_app_config_set_sdk_version(
      arg0,
      arg1,
    );
  }

  late final _realm_app_config_set_sdk_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_app_config_set_sdk_version');
  late final _realm_app_config_set_sdk_version =
      _realm_app_config_set_sdk_versionPtr.asFunction<
          void Function(
              ffi.Pointer<realm_app_config_t>, ffi.Pointer<ffi.Int8>)>();

  /// Get an existing @a realm_app_t* instance with the same app id, or create it with the
  /// configuration if it doesn't exist.
  ///
  /// @return A non-null pointer if no error occurred.
  ffi.Pointer<realm_app_t> realm_app_get(
    ffi.Pointer<realm_app_config_t> arg0,
    ffi.Pointer<realm_sync_client_config_t> arg1,
  ) {
    return _realm_app_get(
      arg0,
      arg1,
    );
  }

  late final _realm_app_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_t> Function(ffi.Pointer<realm_app_config_t>,
              ffi.Pointer<realm_sync_client_config_t>)>>('realm_app_get');
  late final _realm_app_get = _realm_app_getPtr.asFunction<
      ffi.Pointer<realm_app_t> Function(ffi.Pointer<realm_app_config_t>,
          ffi.Pointer<realm_sync_client_config_t>)>();

  /// Get an existing @a realm_app_t* instance from the cache.
  ///
  /// @return Cached app instance, or null if no cached app exists for this @a app_id.
  ffi.Pointer<realm_app_t> realm_app_get_cached(
    ffi.Pointer<ffi.Int8> app_id,
  ) {
    return _realm_app_get_cached(
      app_id,
    );
  }

  late final _realm_app_get_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_app_t> Function(
              ffi.Pointer<ffi.Int8>)>>('realm_app_get_cached');
  late final _realm_app_get_cached = _realm_app_get_cachedPtr
      .asFunction<ffi.Pointer<realm_app_t> Function(ffi.Pointer<ffi.Int8>)>();

  /// Clear all the cached @a realm_app_t* instances in the process.
  ///
  /// @a realm_app_t* instances will need to be disposed with realm_release()
  /// for them to be fully destroyed after the cache is cleared.
  void realm_clear_cached_apps() {
    return _realm_clear_cached_apps();
  }

  late final _realm_clear_cached_appsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'realm_clear_cached_apps');
  late final _realm_clear_cached_apps =
      _realm_clear_cached_appsPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Int8> realm_app_get_app_id(
    ffi.Pointer<realm_app_t> arg0,
  ) {
    return _realm_app_get_app_id(
      arg0,
    );
  }

  late final _realm_app_get_app_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_app_t>)>>('realm_app_get_app_id');
  late final _realm_app_get_app_id = _realm_app_get_app_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_app_t>)>();

  ffi.Pointer<realm_user_t> realm_app_get_current_user(
    ffi.Pointer<realm_app_t> arg0,
  ) {
    return _realm_app_get_current_user(
      arg0,
    );
  }

  late final _realm_app_get_current_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_user_t> Function(
              ffi.Pointer<realm_app_t>)>>('realm_app_get_current_user');
  late final _realm_app_get_current_user =
      _realm_app_get_current_userPtr.asFunction<
          ffi.Pointer<realm_user_t> Function(ffi.Pointer<realm_app_t>)>();

  /// Get the list of active users in this @a app.
  ///
  /// @param out_users A pointer to an array of `realm_user_t*`, which
  /// will be populated with the list of active users in the app.
  /// May be NULL, in which case this function can be used to
  /// discover the number of active users by passing in just `out_n`.
  /// @param capacity The maximum number of elements `out_users` can hold.
  /// @param out_n The actual number of entries written to `out_users`.
  /// May be NULL.
  /// @return True if no exception occurred.
  bool realm_app_get_all_users(
    ffi.Pointer<realm_app_t> app,
    ffi.Pointer<ffi.Pointer<realm_user_t>> out_users,
    int capacity,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_app_get_all_users(
          app,
          out_users,
          capacity,
          out_n,
        ) !=
        0;
  }

  late final _realm_app_get_all_usersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<ffi.Pointer<realm_user_t>>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('realm_app_get_all_users');
  late final _realm_app_get_all_users = _realm_app_get_all_usersPtr.asFunction<
      int Function(
          ffi.Pointer<realm_app_t>,
          ffi.Pointer<ffi.Pointer<realm_user_t>>,
          int,
          ffi.Pointer<ffi.IntPtr>)>();

  bool realm_app_log_in_with_credentials(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_app_credentials_t> arg1,
    realm_app_user_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_log_in_with_credentials(
          arg0,
          arg1,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_log_in_with_credentialsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_app_credentials_t>,
                  realm_app_user_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_log_in_with_credentials');
  late final _realm_app_log_in_with_credentials =
      _realm_app_log_in_with_credentialsPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_app_credentials_t>,
              realm_app_user_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_log_out_current_user(
    ffi.Pointer<realm_app_t> arg0,
    realm_app_void_completion_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_app_log_out_current_user(
          arg0,
          arg1,
          userdata,
          arg3,
        ) !=
        0;
  }

  late final _realm_app_log_out_current_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_log_out_current_user');
  late final _realm_app_log_out_current_user =
      _realm_app_log_out_current_userPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_refresh_custom_data(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_refresh_custom_data(
          arg0,
          arg1,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_refresh_custom_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_refresh_custom_data');
  late final _realm_app_refresh_custom_data =
      _realm_app_refresh_custom_dataPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_log_out(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_log_out(
          arg0,
          arg1,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_log_outPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_log_out');
  late final _realm_app_log_out = _realm_app_log_outPtr.asFunction<
      int Function(
          ffi.Pointer<realm_app_t>,
          ffi.Pointer<realm_user_t>,
          realm_app_void_completion_func_t,
          ffi.Pointer<ffi.Void>,
          realm_free_userdata_func_t)>();

  bool realm_app_link_user(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<realm_app_credentials_t> arg2,
    realm_app_user_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_link_user(
          arg0,
          arg1,
          arg2,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_link_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<realm_app_credentials_t>,
              realm_app_user_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_link_user');
  late final _realm_app_link_user = _realm_app_link_userPtr.asFunction<
      int Function(
          ffi.Pointer<realm_app_t>,
          ffi.Pointer<realm_user_t>,
          ffi.Pointer<realm_app_credentials_t>,
          realm_app_user_completion_func_t,
          ffi.Pointer<ffi.Void>,
          realm_free_userdata_func_t)>();

  bool realm_app_switch_user(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<ffi.Pointer<realm_user_t>> new_user,
  ) {
    return _realm_app_switch_user(
          arg0,
          arg1,
          new_user,
        ) !=
        0;
  }

  late final _realm_app_switch_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  ffi.Pointer<ffi.Pointer<realm_user_t>>)>>(
      'realm_app_switch_user');
  late final _realm_app_switch_user = _realm_app_switch_userPtr.asFunction<
      int Function(ffi.Pointer<realm_app_t>, ffi.Pointer<realm_user_t>,
          ffi.Pointer<ffi.Pointer<realm_user_t>>)>();

  bool realm_app_remove_user(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_remove_user(
          arg0,
          arg1,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_remove_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_remove_user');
  late final _realm_app_remove_user = _realm_app_remove_userPtr.asFunction<
      int Function(
          ffi.Pointer<realm_app_t>,
          ffi.Pointer<realm_user_t>,
          realm_app_void_completion_func_t,
          ffi.Pointer<ffi.Void>,
          realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_register_email(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> email,
    realm_string_t password,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_email_password_provider_client_register_email(
          arg0,
          email,
          password,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_register_emailPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      realm_string_t,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_register_email');
  late final _realm_app_email_password_provider_client_register_email =
      _realm_app_email_password_provider_client_register_emailPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<ffi.Int8>,
              realm_string_t,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_confirm_user(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> token,
    ffi.Pointer<ffi.Int8> token_id,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_email_password_provider_client_confirm_user(
          arg0,
          token,
          token_id,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_confirm_userPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_confirm_user');
  late final _realm_app_email_password_provider_client_confirm_user =
      _realm_app_email_password_provider_client_confirm_userPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_resend_confirmation_email(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> email,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_email_password_provider_client_resend_confirmation_email(
          arg0,
          email,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_resend_confirmation_emailPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_resend_confirmation_email');
  late final _realm_app_email_password_provider_client_resend_confirmation_email =
      _realm_app_email_password_provider_client_resend_confirmation_emailPtr
          .asFunction<
              int Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_send_reset_password_email(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> email,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_email_password_provider_client_send_reset_password_email(
          arg0,
          email,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_send_reset_password_emailPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_send_reset_password_email');
  late final _realm_app_email_password_provider_client_send_reset_password_email =
      _realm_app_email_password_provider_client_send_reset_password_emailPtr
          .asFunction<
              int Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_retry_custom_confirmation(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> email,
    realm_app_void_completion_func_t arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_email_password_provider_client_retry_custom_confirmation(
          arg0,
          email,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_retry_custom_confirmationPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_retry_custom_confirmation');
  late final _realm_app_email_password_provider_client_retry_custom_confirmation =
      _realm_app_email_password_provider_client_retry_custom_confirmationPtr
          .asFunction<
              int Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>();

  bool realm_app_email_password_provider_client_reset_password(
    ffi.Pointer<realm_app_t> arg0,
    realm_string_t password,
    ffi.Pointer<ffi.Int8> token,
    ffi.Pointer<ffi.Int8> token_id,
    realm_app_void_completion_func_t arg4,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg6,
  ) {
    return _realm_app_email_password_provider_client_reset_password(
          arg0,
          password,
          token,
          token_id,
          arg4,
          userdata,
          arg6,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_reset_passwordPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      realm_string_t,
                      ffi.Pointer<ffi.Int8>,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_reset_password');
  late final _realm_app_email_password_provider_client_reset_password =
      _realm_app_email_password_provider_client_reset_passwordPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              realm_string_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  /// Run the Email/Password Authentication provider's password reset function.
  ///
  /// @param serialized_ejson_payload The arguments array to invoke the function with,
  /// serialized as an Extended JSON string.
  /// @return true, if no error occurred.
  bool realm_app_email_password_provider_client_call_reset_password_function(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<ffi.Int8> email,
    realm_string_t password,
    ffi.Pointer<ffi.Int8> serialized_ejson_payload,
    realm_app_void_completion_func_t arg4,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg6,
  ) {
    return _realm_app_email_password_provider_client_call_reset_password_function(
          arg0,
          email,
          password,
          serialized_ejson_payload,
          arg4,
          userdata,
          arg6,
        ) !=
        0;
  }

  late final _realm_app_email_password_provider_client_call_reset_password_functionPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<ffi.Int8>,
                      realm_string_t,
                      ffi.Pointer<ffi.Int8>,
                      realm_app_void_completion_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_app_email_password_provider_client_call_reset_password_function');
  late final _realm_app_email_password_provider_client_call_reset_password_function =
      _realm_app_email_password_provider_client_call_reset_password_functionPtr
          .asFunction<
              int Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<ffi.Int8>,
                  realm_string_t,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_create_apikey(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<realm_app_user_apikey_t>,
                    ffi.Pointer<realm_app_error_t>)>>
        arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_user_apikey_provider_client_create_apikey(
          arg0,
          arg1,
          name,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_create_apikeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<realm_app_user_apikey_t>,
                              ffi.Pointer<realm_app_error_t>)>>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_create_apikey');
  late final _realm_app_user_apikey_provider_client_create_apikey =
      _realm_app_user_apikey_provider_client_create_apikeyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<realm_app_user_apikey_t>,
                          ffi.Pointer<realm_app_error_t>)>>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_fetch_apikey(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_object_id_t id,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<realm_app_user_apikey_t>,
                    ffi.Pointer<realm_app_error_t>)>>
        arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_user_apikey_provider_client_fetch_apikey(
          arg0,
          arg1,
          id,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_fetch_apikeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  realm_object_id_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<realm_app_user_apikey_t>,
                              ffi.Pointer<realm_app_error_t>)>>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_fetch_apikey');
  late final _realm_app_user_apikey_provider_client_fetch_apikey =
      _realm_app_user_apikey_provider_client_fetch_apikeyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_object_id_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<realm_app_user_apikey_t>,
                          ffi.Pointer<realm_app_error_t>)>>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_fetch_apikeys(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<realm_app_user_apikey_t>,
                    ffi.IntPtr,
                    ffi.Pointer<realm_app_error_t>)>>
        arg2,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg4,
  ) {
    return _realm_app_user_apikey_provider_client_fetch_apikeys(
          arg0,
          arg1,
          arg2,
          userdata,
          arg4,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_fetch_apikeysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<realm_app_user_apikey_t>,
                              ffi.IntPtr,
                              ffi.Pointer<realm_app_error_t>)>>,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_fetch_apikeys');
  late final _realm_app_user_apikey_provider_client_fetch_apikeys =
      _realm_app_user_apikey_provider_client_fetch_apikeysPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<realm_app_user_apikey_t>,
                          ffi.IntPtr,
                          ffi.Pointer<realm_app_error_t>)>>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_delete_apikey(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_object_id_t id,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_user_apikey_provider_client_delete_apikey(
          arg0,
          arg1,
          id,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_delete_apikeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  realm_object_id_t,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_delete_apikey');
  late final _realm_app_user_apikey_provider_client_delete_apikey =
      _realm_app_user_apikey_provider_client_delete_apikeyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_object_id_t,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_enable_apikey(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_object_id_t id,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_user_apikey_provider_client_enable_apikey(
          arg0,
          arg1,
          id,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_enable_apikeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  realm_object_id_t,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_enable_apikey');
  late final _realm_app_user_apikey_provider_client_enable_apikey =
      _realm_app_user_apikey_provider_client_enable_apikeyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_object_id_t,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_user_apikey_provider_client_disable_apikey(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    realm_object_id_t id,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_user_apikey_provider_client_disable_apikey(
          arg0,
          arg1,
          id,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_user_apikey_provider_client_disable_apikeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  realm_object_id_t,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_user_apikey_provider_client_disable_apikey');
  late final _realm_app_user_apikey_provider_client_disable_apikey =
      _realm_app_user_apikey_provider_client_disable_apikeyPtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              realm_object_id_t,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_push_notification_client_register_device(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<ffi.Int8> service_name,
    ffi.Pointer<ffi.Int8> registration_token,
    realm_app_void_completion_func_t arg4,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg6,
  ) {
    return _realm_app_push_notification_client_register_device(
          arg0,
          arg1,
          service_name,
          registration_token,
          arg4,
          userdata,
          arg6,
        ) !=
        0;
  }

  late final _realm_app_push_notification_client_register_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_push_notification_client_register_device');
  late final _realm_app_push_notification_client_register_device =
      _realm_app_push_notification_client_register_devicePtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  bool realm_app_push_notification_client_deregister_device(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<ffi.Int8> service_name,
    realm_app_void_completion_func_t arg3,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg5,
  ) {
    return _realm_app_push_notification_client_deregister_device(
          arg0,
          arg1,
          service_name,
          arg3,
          userdata,
          arg5,
        ) !=
        0;
  }

  late final _realm_app_push_notification_client_deregister_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<realm_app_t>,
                  ffi.Pointer<realm_user_t>,
                  ffi.Pointer<ffi.Int8>,
                  realm_app_void_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_app_push_notification_client_deregister_device');
  late final _realm_app_push_notification_client_deregister_device =
      _realm_app_push_notification_client_deregister_devicePtr.asFunction<
          int Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<ffi.Int8>,
              realm_app_void_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  /// Run a named MongoDB Realm function.
  ///
  /// @param serialized_ejson_args The arguments array to invoke the function with,
  /// serialized as an Extended JSON string.
  /// @return true, if no error occurred.
  bool realm_app_call_function(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_user_t> arg1,
    ffi.Pointer<ffi.Int8> function_name,
    ffi.Pointer<ffi.Int8> serialized_ejson_args,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
                    ffi.Pointer<realm_app_error_t>)>>
        arg4,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg6,
  ) {
    return _realm_app_call_function(
          arg0,
          arg1,
          function_name,
          serialized_ejson_args,
          arg4,
          userdata,
          arg6,
        ) !=
        0;
  }

  late final _realm_app_call_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Int8>,
                          ffi.Pointer<realm_app_error_t>)>>,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_app_call_function');
  late final _realm_app_call_function = _realm_app_call_functionPtr.asFunction<
      int Function(
          ffi.Pointer<realm_app_t>,
          ffi.Pointer<realm_user_t>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Int8>, ffi.Pointer<realm_app_error_t>)>>,
          ffi.Pointer<ffi.Void>,
          realm_free_userdata_func_t)>();

  /// Instruct this app's sync client to immediately reconnect.
  /// Useful when the device has been offline and then receives a network reachability update.
  ///
  /// The sync client will always attempt to reconnect eventually, this is just a hint.
  void realm_app_sync_client_reconnect(
    ffi.Pointer<realm_app_t> arg0,
  ) {
    return _realm_app_sync_client_reconnect(
      arg0,
    );
  }

  late final _realm_app_sync_client_reconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<realm_app_t>)>>(
          'realm_app_sync_client_reconnect');
  late final _realm_app_sync_client_reconnect =
      _realm_app_sync_client_reconnectPtr
          .asFunction<void Function(ffi.Pointer<realm_app_t>)>();

  /// Get whether there are any active sync sessions for this app.
  bool realm_app_sync_client_has_sessions(
    ffi.Pointer<realm_app_t> arg0,
  ) {
    return _realm_app_sync_client_has_sessions(
          arg0,
        ) !=
        0;
  }

  late final _realm_app_sync_client_has_sessionsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_app_t>)>>(
          'realm_app_sync_client_has_sessions');
  late final _realm_app_sync_client_has_sessions =
      _realm_app_sync_client_has_sessionsPtr
          .asFunction<int Function(ffi.Pointer<realm_app_t>)>();

  /// Wait until the sync client has terminated all sessions and released all realm files
  /// it had open.
  ///
  /// WARNING: this is a blocking wait.
  void realm_app_sync_client_wait_for_sessions_to_terminate(
    ffi.Pointer<realm_app_t> arg0,
  ) {
    return _realm_app_sync_client_wait_for_sessions_to_terminate(
      arg0,
    );
  }

  late final _realm_app_sync_client_wait_for_sessions_to_terminatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<realm_app_t>)>>(
          'realm_app_sync_client_wait_for_sessions_to_terminate');
  late final _realm_app_sync_client_wait_for_sessions_to_terminate =
      _realm_app_sync_client_wait_for_sessions_to_terminatePtr
          .asFunction<void Function(ffi.Pointer<realm_app_t>)>();

  /// Get the default realm file path based on the user and partition value in the config.
  ///
  /// @param custom_filename custom name for the realm file itself. Can be null,
  /// in which case a default name based on the config will be used.
  ///
  /// Return value must be manually released with realm_free().
  ffi.Pointer<ffi.Int8> realm_app_sync_client_get_default_file_path_for_realm(
    ffi.Pointer<realm_app_t> arg0,
    ffi.Pointer<realm_sync_config_t> arg1,
    ffi.Pointer<ffi.Int8> custom_filename,
  ) {
    return _realm_app_sync_client_get_default_file_path_for_realm(
      arg0,
      arg1,
      custom_filename,
    );
  }

  late final _realm_app_sync_client_get_default_file_path_for_realmPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Int8> Function(
                      ffi.Pointer<realm_app_t>,
                      ffi.Pointer<realm_sync_config_t>,
                      ffi.Pointer<ffi.Int8>)>>(
          'realm_app_sync_client_get_default_file_path_for_realm');
  late final _realm_app_sync_client_get_default_file_path_for_realm =
      _realm_app_sync_client_get_default_file_path_for_realmPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_app_t>,
              ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> realm_user_get_identity(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_identity(
      arg0,
    );
  }

  late final _realm_user_get_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_user_t>)>>('realm_user_get_identity');
  late final _realm_user_get_identity = _realm_user_get_identityPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_user_t>)>();

  int realm_user_get_state(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_state(
      arg0,
    );
  }

  late final _realm_user_get_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<realm_user_t>)>>(
      'realm_user_get_state');
  late final _realm_user_get_state = _realm_user_get_statePtr
      .asFunction<int Function(ffi.Pointer<realm_user_t>)>();

  /// Get the list of identities of this @a user.
  ///
  /// @param out_identities A pointer to an array of `realm_user_identity_t`, which
  /// will be populated with the list of identities of this user.
  /// May be NULL, in which case this function can be used to
  /// discover the number of identities of this user by passing in NULL here
  /// and examining `*out_n`.
  /// @param capacity The maximum number of elements `out_identities` can hold.
  /// @param out_n The actual number of entries written to `out_identities`. May be NULL.
  /// @return true, if no errors occurred.
  bool realm_user_get_all_identities(
    ffi.Pointer<realm_user_t> user,
    ffi.Pointer<realm_user_identity_t> out_identities,
    int capacity,
    ffi.Pointer<ffi.IntPtr> out_n,
  ) {
    return _realm_user_get_all_identities(
          user,
          out_identities,
          capacity,
          out_n,
        ) !=
        0;
  }

  late final _realm_user_get_all_identitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<realm_user_identity_t>,
              ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('realm_user_get_all_identities');
  late final _realm_user_get_all_identities =
      _realm_user_get_all_identitiesPtr.asFunction<
          int Function(
              ffi.Pointer<realm_user_t>,
              ffi.Pointer<realm_user_identity_t>,
              int,
              ffi.Pointer<ffi.IntPtr>)>();

  ffi.Pointer<ffi.Int8> realm_user_get_local_identity(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_local_identity(
      arg0,
    );
  }

  late final _realm_user_get_local_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_user_t>)>>('realm_user_get_local_identity');
  late final _realm_user_get_local_identity = _realm_user_get_local_identityPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_user_t>)>();

  ffi.Pointer<ffi.Int8> realm_user_get_device_id(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_device_id(
      arg0,
    );
  }

  late final _realm_user_get_device_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_user_t>)>>('realm_user_get_device_id');
  late final _realm_user_get_device_id = _realm_user_get_device_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_user_t>)>();

  int realm_user_get_auth_provider(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_auth_provider(
      arg0,
    );
  }

  late final _realm_user_get_auth_providerPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<realm_user_t>)>>(
      'realm_user_get_auth_provider');
  late final _realm_user_get_auth_provider = _realm_user_get_auth_providerPtr
      .asFunction<int Function(ffi.Pointer<realm_user_t>)>();

  /// Log out the user and mark it as logged out.
  ///
  /// Any active sync sessions associated with this user will be stopped.
  ///
  /// @return true, if no errors occurred.
  bool realm_user_log_out(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_log_out(
          arg0,
        ) !=
        0;
  }

  late final _realm_user_log_outPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_user_t>)>>(
      'realm_user_log_out');
  late final _realm_user_log_out = _realm_user_log_outPtr
      .asFunction<int Function(ffi.Pointer<realm_user_t>)>();

  bool realm_user_is_logged_in(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_is_logged_in(
          arg0,
        ) !=
        0;
  }

  late final _realm_user_is_logged_inPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<realm_user_t>)>>(
      'realm_user_is_logged_in');
  late final _realm_user_is_logged_in = _realm_user_is_logged_inPtr
      .asFunction<int Function(ffi.Pointer<realm_user_t>)>();

  /// Get the custom user data from the user's access token.
  ///
  /// Returned value must be manually released with realm_free().
  ///
  /// @return An Extended JSON document serialized as string,
  /// or null if token doesn't have any custom data.
  ffi.Pointer<ffi.Int8> realm_user_get_custom_data(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_custom_data(
      arg0,
    );
  }

  late final _realm_user_get_custom_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_user_t>)>>('realm_user_get_custom_data');
  late final _realm_user_get_custom_data = _realm_user_get_custom_dataPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_user_t>)>();

  /// Get the user profile associated with this user.
  ///
  /// Returned value must be manually released with realm_free().
  ///
  /// @return An Extended JSON document serialized as string,
  /// or null if an error occurred.
  ffi.Pointer<ffi.Int8> realm_user_get_profile_data(
    ffi.Pointer<realm_user_t> arg0,
  ) {
    return _realm_user_get_profile_data(
      arg0,
    );
  }

  late final _realm_user_get_profile_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<realm_user_t>)>>('realm_user_get_profile_data');
  late final _realm_user_get_profile_data = _realm_user_get_profile_dataPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_user_t>)>();

  ffi.Pointer<realm_sync_client_config_t> realm_sync_client_config_new() {
    return _realm_sync_client_config_new();
  }

  late final _realm_sync_client_config_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_sync_client_config_t>
              Function()>>('realm_sync_client_config_new');
  late final _realm_sync_client_config_new = _realm_sync_client_config_newPtr
      .asFunction<ffi.Pointer<realm_sync_client_config_t> Function()>();

  void realm_sync_client_config_set_base_file_path(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_client_config_set_base_file_path(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_base_file_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
                  ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_client_config_set_base_file_path');
  late final _realm_sync_client_config_set_base_file_path =
      _realm_sync_client_config_set_base_file_pathPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Pointer<ffi.Int8>)>();

  void realm_sync_client_config_set_metadata_mode(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_metadata_mode(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_metadata_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Int32)>>('realm_sync_client_config_set_metadata_mode');
  late final _realm_sync_client_config_set_metadata_mode =
      _realm_sync_client_config_set_metadata_modePtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_metadata_encryption_key(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _realm_sync_client_config_set_metadata_encryption_key(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_metadata_encryption_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'realm_sync_client_config_set_metadata_encryption_key');
  late final _realm_sync_client_config_set_metadata_encryption_key =
      _realm_sync_client_config_set_metadata_encryption_keyPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Pointer<ffi.Uint8>)>();

  void realm_sync_client_config_set_reset_metadata_on_error(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    bool arg1,
  ) {
    return _realm_sync_client_config_set_reset_metadata_on_error(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_sync_client_config_set_reset_metadata_on_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>, ffi.Uint8)>>(
      'realm_sync_client_config_set_reset_metadata_on_error');
  late final _realm_sync_client_config_set_reset_metadata_on_error =
      _realm_sync_client_config_set_reset_metadata_on_errorPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_log_callback(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    realm_log_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_sync_client_config_set_log_callback(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_sync_client_config_set_log_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>,
                  realm_log_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_client_config_set_log_callback');
  late final _realm_sync_client_config_set_log_callback =
      _realm_sync_client_config_set_log_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_client_config_t>,
              realm_log_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_sync_client_config_set_log_level(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_log_level(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_log_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Int32)>>('realm_sync_client_config_set_log_level');
  late final _realm_sync_client_config_set_log_level =
      _realm_sync_client_config_set_log_levelPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_reconnect_mode(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_reconnect_mode(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_reconnect_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Int32)>>('realm_sync_client_config_set_reconnect_mode');
  late final _realm_sync_client_config_set_reconnect_mode =
      _realm_sync_client_config_set_reconnect_modePtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_multiplex_sessions(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    bool arg1,
  ) {
    return _realm_sync_client_config_set_multiplex_sessions(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_sync_client_config_set_multiplex_sessionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Uint8)>>('realm_sync_client_config_set_multiplex_sessions');
  late final _realm_sync_client_config_set_multiplex_sessions =
      _realm_sync_client_config_set_multiplex_sessionsPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_user_agent_binding_info(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_client_config_set_user_agent_binding_info(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_user_agent_binding_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
                  ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_client_config_set_user_agent_binding_info');
  late final _realm_sync_client_config_set_user_agent_binding_info =
      _realm_sync_client_config_set_user_agent_binding_infoPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Pointer<ffi.Int8>)>();

  void realm_sync_client_config_set_user_agent_application_info(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_client_config_set_user_agent_application_info(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_user_agent_application_infoPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
                      ffi.Pointer<ffi.Int8>)>>(
          'realm_sync_client_config_set_user_agent_application_info');
  late final _realm_sync_client_config_set_user_agent_application_info =
      _realm_sync_client_config_set_user_agent_application_infoPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Pointer<ffi.Int8>)>();

  void realm_sync_client_config_set_connect_timeout(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_connect_timeout(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_connect_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_client_config_t>,
              ffi.Uint64)>>('realm_sync_client_config_set_connect_timeout');
  late final _realm_sync_client_config_set_connect_timeout =
      _realm_sync_client_config_set_connect_timeoutPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_connection_linger_time(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_connection_linger_time(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_connection_linger_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>, ffi.Uint64)>>(
      'realm_sync_client_config_set_connection_linger_time');
  late final _realm_sync_client_config_set_connection_linger_time =
      _realm_sync_client_config_set_connection_linger_timePtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_ping_keepalive_period(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_ping_keepalive_period(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_ping_keepalive_periodPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>, ffi.Uint64)>>(
      'realm_sync_client_config_set_ping_keepalive_period');
  late final _realm_sync_client_config_set_ping_keepalive_period =
      _realm_sync_client_config_set_ping_keepalive_periodPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_pong_keepalive_timeout(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_pong_keepalive_timeout(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_pong_keepalive_timeoutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>, ffi.Uint64)>>(
      'realm_sync_client_config_set_pong_keepalive_timeout');
  late final _realm_sync_client_config_set_pong_keepalive_timeout =
      _realm_sync_client_config_set_pong_keepalive_timeoutPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  void realm_sync_client_config_set_fast_reconnect_limit(
    ffi.Pointer<realm_sync_client_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_client_config_set_fast_reconnect_limit(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_client_config_set_fast_reconnect_limitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_client_config_t>, ffi.Uint64)>>(
      'realm_sync_client_config_set_fast_reconnect_limit');
  late final _realm_sync_client_config_set_fast_reconnect_limit =
      _realm_sync_client_config_set_fast_reconnect_limitPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_client_config_t>, int)>();

  ffi.Pointer<realm_sync_config_t> realm_sync_config_new(
    ffi.Pointer<realm_user_t> arg0,
    ffi.Pointer<ffi.Int8> partition_value,
  ) {
    return _realm_sync_config_new(
      arg0,
      partition_value,
    );
  }

  late final _realm_sync_config_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_sync_config_t> Function(ffi.Pointer<realm_user_t>,
              ffi.Pointer<ffi.Int8>)>>('realm_sync_config_new');
  late final _realm_sync_config_new = _realm_sync_config_newPtr.asFunction<
      ffi.Pointer<realm_sync_config_t> Function(
          ffi.Pointer<realm_user_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_sync_config_set_session_stop_policy(
    ffi.Pointer<realm_sync_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_config_set_session_stop_policy(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_config_set_session_stop_policyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_config_t>,
              ffi.Int32)>>('realm_sync_config_set_session_stop_policy');
  late final _realm_sync_config_set_session_stop_policy =
      _realm_sync_config_set_session_stop_policyPtr
          .asFunction<void Function(ffi.Pointer<realm_sync_config_t>, int)>();

  void realm_sync_config_set_error_handler(
    ffi.Pointer<realm_sync_config_t> arg0,
    realm_sync_error_handler_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_sync_config_set_error_handler(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_sync_config_set_error_handlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_config_t>,
                  realm_sync_error_handler_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_config_set_error_handler');
  late final _realm_sync_config_set_error_handler =
      _realm_sync_config_set_error_handlerPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_config_t>,
              realm_sync_error_handler_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_sync_config_set_client_validate_ssl(
    ffi.Pointer<realm_sync_config_t> arg0,
    bool arg1,
  ) {
    return _realm_sync_config_set_client_validate_ssl(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_sync_config_set_client_validate_sslPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_config_t>,
              ffi.Uint8)>>('realm_sync_config_set_client_validate_ssl');
  late final _realm_sync_config_set_client_validate_ssl =
      _realm_sync_config_set_client_validate_sslPtr
          .asFunction<void Function(ffi.Pointer<realm_sync_config_t>, int)>();

  void realm_sync_config_set_ssl_trust_certificate_path(
    ffi.Pointer<realm_sync_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_config_set_ssl_trust_certificate_path(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_config_set_ssl_trust_certificate_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_config_set_ssl_trust_certificate_path');
  late final _realm_sync_config_set_ssl_trust_certificate_path =
      _realm_sync_config_set_ssl_trust_certificate_pathPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_sync_config_set_ssl_verify_callback(
    ffi.Pointer<realm_sync_config_t> arg0,
    realm_sync_ssl_verify_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_sync_config_set_ssl_verify_callback(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_sync_config_set_ssl_verify_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_config_t>,
                  realm_sync_ssl_verify_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_config_set_ssl_verify_callback');
  late final _realm_sync_config_set_ssl_verify_callback =
      _realm_sync_config_set_ssl_verify_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_config_t>,
              realm_sync_ssl_verify_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_sync_config_set_cancel_waits_on_nonfatal_error(
    ffi.Pointer<realm_sync_config_t> arg0,
    bool arg1,
  ) {
    return _realm_sync_config_set_cancel_waits_on_nonfatal_error(
      arg0,
      arg1 ? 1 : 0,
    );
  }

  late final _realm_sync_config_set_cancel_waits_on_nonfatal_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_sync_config_t>, ffi.Uint8)>>(
      'realm_sync_config_set_cancel_waits_on_nonfatal_error');
  late final _realm_sync_config_set_cancel_waits_on_nonfatal_error =
      _realm_sync_config_set_cancel_waits_on_nonfatal_errorPtr
          .asFunction<void Function(ffi.Pointer<realm_sync_config_t>, int)>();

  void realm_sync_config_set_authorization_header_name(
    ffi.Pointer<realm_sync_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_config_set_authorization_header_name(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_config_set_authorization_header_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_config_set_authorization_header_name');
  late final _realm_sync_config_set_authorization_header_name =
      _realm_sync_config_set_authorization_header_namePtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_sync_config_set_custom_http_header(
    ffi.Pointer<realm_sync_config_t> arg0,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _realm_sync_config_set_custom_http_header(
      arg0,
      name,
      value,
    );
  }

  late final _realm_sync_config_set_custom_http_headerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_sync_config_t>,
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_config_set_custom_http_header');
  late final _realm_sync_config_set_custom_http_header =
      _realm_sync_config_set_custom_http_headerPtr.asFunction<
          void Function(ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void realm_sync_config_set_recovery_directory_path(
    ffi.Pointer<realm_sync_config_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realm_sync_config_set_recovery_directory_path(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_config_set_recovery_directory_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>>(
      'realm_sync_config_set_recovery_directory_path');
  late final _realm_sync_config_set_recovery_directory_path =
      _realm_sync_config_set_recovery_directory_pathPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_config_t>, ffi.Pointer<ffi.Int8>)>();

  void realm_sync_config_set_resync_mode(
    ffi.Pointer<realm_sync_config_t> arg0,
    int arg1,
  ) {
    return _realm_sync_config_set_resync_mode(
      arg0,
      arg1,
    );
  }

  late final _realm_sync_config_set_resync_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_config_t>,
              ffi.Int32)>>('realm_sync_config_set_resync_mode');
  late final _realm_sync_config_set_resync_mode =
      _realm_sync_config_set_resync_modePtr
          .asFunction<void Function(ffi.Pointer<realm_sync_config_t>, int)>();

  /// Create a task that will open a realm with the specific configuration
  /// and also download all changes from the sync server.
  ///
  /// Use @a realm_async_open_task_start() to start the download process.
  ffi.Pointer<realm_async_open_task_t> realm_open_synchronized(
    ffi.Pointer<realm_config_t> arg0,
  ) {
    return _realm_open_synchronized(
      arg0,
    );
  }

  late final _realm_open_synchronizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_async_open_task_t> Function(
              ffi.Pointer<realm_config_t>)>>('realm_open_synchronized');
  late final _realm_open_synchronized = _realm_open_synchronizedPtr.asFunction<
      ffi.Pointer<realm_async_open_task_t> Function(
          ffi.Pointer<realm_config_t>)>();

  void realm_async_open_task_start(
    ffi.Pointer<realm_async_open_task_t> arg0,
    realm_async_open_task_completion_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_async_open_task_start(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_async_open_task_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_async_open_task_t>,
              realm_async_open_task_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>>('realm_async_open_task_start');
  late final _realm_async_open_task_start =
      _realm_async_open_task_startPtr.asFunction<
          void Function(
              ffi.Pointer<realm_async_open_task_t>,
              realm_async_open_task_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_async_open_task_cancel(
    ffi.Pointer<realm_async_open_task_t> arg0,
  ) {
    return _realm_async_open_task_cancel(
      arg0,
    );
  }

  late final _realm_async_open_task_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<realm_async_open_task_t>)>>(
      'realm_async_open_task_cancel');
  late final _realm_async_open_task_cancel = _realm_async_open_task_cancelPtr
      .asFunction<void Function(ffi.Pointer<realm_async_open_task_t>)>();

  int realm_async_open_task_register_download_progress_notifier(
    ffi.Pointer<realm_async_open_task_t> arg0,
    realm_sync_progress_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t arg3,
  ) {
    return _realm_async_open_task_register_download_progress_notifier(
      arg0,
      arg1,
      userdata,
      arg3,
    );
  }

  late final _realm_async_open_task_register_download_progress_notifierPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint64 Function(
                      ffi.Pointer<realm_async_open_task_t>,
                      realm_sync_progress_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_async_open_task_register_download_progress_notifier');
  late final _realm_async_open_task_register_download_progress_notifier =
      _realm_async_open_task_register_download_progress_notifierPtr.asFunction<
          int Function(
              ffi.Pointer<realm_async_open_task_t>,
              realm_sync_progress_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_async_open_task_unregister_download_progress_notifier(
    ffi.Pointer<realm_async_open_task_t> arg0,
    int token,
  ) {
    return _realm_async_open_task_unregister_download_progress_notifier(
      arg0,
      token,
    );
  }

  late final _realm_async_open_task_unregister_download_progress_notifierPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<realm_async_open_task_t>, ffi.Uint64)>>(
          'realm_async_open_task_unregister_download_progress_notifier');
  late final _realm_async_open_task_unregister_download_progress_notifier =
      _realm_async_open_task_unregister_download_progress_notifierPtr
          .asFunction<
              void Function(ffi.Pointer<realm_async_open_task_t>, int)>();

  /// Get the sync session for a specific realm.
  ///
  /// This function will not fail if the realm wasn't open with a sync configuration in place,
  /// but just return NULL;
  ///
  /// @return A non-null pointer if a session exists.
  ffi.Pointer<realm_sync_session_t> realm_sync_session_get(
    ffi.Pointer<realm_t> arg0,
  ) {
    return _realm_sync_session_get(
      arg0,
    );
  }

  late final _realm_sync_session_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_sync_session_t> Function(
              ffi.Pointer<realm_t>)>>('realm_sync_session_get');
  late final _realm_sync_session_get = _realm_sync_session_getPtr.asFunction<
      ffi.Pointer<realm_sync_session_t> Function(ffi.Pointer<realm_t>)>();

  int realm_sync_session_get_state(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_get_state(
      arg0,
    );
  }

  late final _realm_sync_session_get_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<realm_sync_session_t>)>>(
      'realm_sync_session_get_state');
  late final _realm_sync_session_get_state = _realm_sync_session_get_statePtr
      .asFunction<int Function(ffi.Pointer<realm_sync_session_t>)>();

  int realm_sync_session_get_connection_state(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_get_connection_state(
      arg0,
    );
  }

  late final _realm_sync_session_get_connection_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<realm_sync_session_t>)>>(
      'realm_sync_session_get_connection_state');
  late final _realm_sync_session_get_connection_state =
      _realm_sync_session_get_connection_statePtr
          .asFunction<int Function(ffi.Pointer<realm_sync_session_t>)>();

  ffi.Pointer<realm_user_t> realm_sync_session_get_user(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_get_user(
      arg0,
    );
  }

  late final _realm_sync_session_get_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<realm_user_t> Function(
                  ffi.Pointer<realm_sync_session_t>)>>(
      'realm_sync_session_get_user');
  late final _realm_sync_session_get_user =
      _realm_sync_session_get_userPtr.asFunction<
          ffi.Pointer<realm_user_t> Function(
              ffi.Pointer<realm_sync_session_t>)>();

  ffi.Pointer<ffi.Int8> realm_sync_session_get_partition_value(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_get_partition_value(
      arg0,
    );
  }

  late final _realm_sync_session_get_partition_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<realm_sync_session_t>)>>(
      'realm_sync_session_get_partition_value');
  late final _realm_sync_session_get_partition_value =
      _realm_sync_session_get_partition_valuePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_sync_session_t>)>();

  /// Get the filesystem path of the realm file backing this session.
  ffi.Pointer<ffi.Int8> realm_sync_session_get_file_path(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_get_file_path(
      arg0,
    );
  }

  late final _realm_sync_session_get_file_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<realm_sync_session_t>)>>(
      'realm_sync_session_get_file_path');
  late final _realm_sync_session_get_file_path =
      _realm_sync_session_get_file_pathPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<realm_sync_session_t>)>();

  /// Ask the session to pause synchronization.
  ///
  /// No-op if the session is already inactive.
  void realm_sync_session_pause(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_pause(
      arg0,
    );
  }

  late final _realm_sync_session_pausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_sync_session_t>)>>('realm_sync_session_pause');
  late final _realm_sync_session_pause = _realm_sync_session_pausePtr
      .asFunction<void Function(ffi.Pointer<realm_sync_session_t>)>();

  /// Ask the session to resume synchronization.
  ///
  /// No-op if the session is already active.
  void realm_sync_session_resume(
    ffi.Pointer<realm_sync_session_t> arg0,
  ) {
    return _realm_sync_session_resume(
      arg0,
    );
  }

  late final _realm_sync_session_resumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<realm_sync_session_t>)>>('realm_sync_session_resume');
  late final _realm_sync_session_resume = _realm_sync_session_resumePtr
      .asFunction<void Function(ffi.Pointer<realm_sync_session_t>)>();

  /// Register a callback that will be invoked every time the session's connection state changes.
  ///
  /// @return A token value that can be used to unregiser the callback.
  int realm_sync_session_register_connection_state_change_callback(
    ffi.Pointer<realm_sync_session_t> arg0,
    realm_sync_connection_state_changed_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t userdata_free,
  ) {
    return _realm_sync_session_register_connection_state_change_callback(
      arg0,
      arg1,
      userdata,
      userdata_free,
    );
  }

  late final _realm_sync_session_register_connection_state_change_callbackPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint64 Function(
                      ffi.Pointer<realm_sync_session_t>,
                      realm_sync_connection_state_changed_func_t,
                      ffi.Pointer<ffi.Void>,
                      realm_free_userdata_func_t)>>(
          'realm_sync_session_register_connection_state_change_callback');
  late final _realm_sync_session_register_connection_state_change_callback =
      _realm_sync_session_register_connection_state_change_callbackPtr
          .asFunction<
              int Function(
                  ffi.Pointer<realm_sync_session_t>,
                  realm_sync_connection_state_changed_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>();

  void realm_sync_session_unregister_connection_state_change_callback(
    ffi.Pointer<realm_sync_session_t> arg0,
    int token,
  ) {
    return _realm_sync_session_unregister_connection_state_change_callback(
      arg0,
      token,
    );
  }

  late final _realm_sync_session_unregister_connection_state_change_callbackPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<realm_sync_session_t>, ffi.Uint64)>>(
          'realm_sync_session_unregister_connection_state_change_callback');
  late final _realm_sync_session_unregister_connection_state_change_callback =
      _realm_sync_session_unregister_connection_state_change_callbackPtr
          .asFunction<void Function(ffi.Pointer<realm_sync_session_t>, int)>();

  /// Register a callback that will be invoked every time the session reports progress.
  ///
  /// @param is_streaming If true, then the notifier will be called forever, and will
  /// always contain the most up-to-date number of downloadable or uploadable bytes.
  /// Otherwise, the number of downloaded or uploaded bytes will always be reported
  /// relative to the number of downloadable or uploadable bytes at the point in time
  /// when the notifier was registered.
  /// @return A token value that can be used to unregiser the notifier.
  int realm_sync_session_register_progress_notifier(
    ffi.Pointer<realm_sync_session_t> arg0,
    realm_sync_progress_func_t arg1,
    int arg2,
    bool is_streaming,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t userdata_free,
  ) {
    return _realm_sync_session_register_progress_notifier(
      arg0,
      arg1,
      arg2,
      is_streaming ? 1 : 0,
      userdata,
      userdata_free,
    );
  }

  late final _realm_sync_session_register_progress_notifierPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(
                  ffi.Pointer<realm_sync_session_t>,
                  realm_sync_progress_func_t,
                  ffi.Int32,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_session_register_progress_notifier');
  late final _realm_sync_session_register_progress_notifier =
      _realm_sync_session_register_progress_notifierPtr.asFunction<
          int Function(
              ffi.Pointer<realm_sync_session_t>,
              realm_sync_progress_func_t,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_sync_session_unregister_progress_notifier(
    ffi.Pointer<realm_sync_session_t> arg0,
    int token,
  ) {
    return _realm_sync_session_unregister_progress_notifier(
      arg0,
      token,
    );
  }

  late final _realm_sync_session_unregister_progress_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<realm_sync_session_t>,
              ffi.Uint64)>>('realm_sync_session_unregister_progress_notifier');
  late final _realm_sync_session_unregister_progress_notifier =
      _realm_sync_session_unregister_progress_notifierPtr
          .asFunction<void Function(ffi.Pointer<realm_sync_session_t>, int)>();

  /// Register a callback that will be invoked when all pending downloads have completed.
  void realm_sync_session_wait_for_download_completion(
    ffi.Pointer<realm_sync_session_t> arg0,
    realm_sync_download_completion_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t userdata_free,
  ) {
    return _realm_sync_session_wait_for_download_completion(
      arg0,
      arg1,
      userdata,
      userdata_free,
    );
  }

  late final _realm_sync_session_wait_for_download_completionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_session_t>,
                  realm_sync_download_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_session_wait_for_download_completion');
  late final _realm_sync_session_wait_for_download_completion =
      _realm_sync_session_wait_for_download_completionPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_session_t>,
              realm_sync_download_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  /// Register a callback that will be invoked when all pending uploads have completed.
  void realm_sync_session_wait_for_upload_completion(
    ffi.Pointer<realm_sync_session_t> arg0,
    realm_sync_upload_completion_func_t arg1,
    ffi.Pointer<ffi.Void> userdata,
    realm_free_userdata_func_t userdata_free,
  ) {
    return _realm_sync_session_wait_for_upload_completion(
      arg0,
      arg1,
      userdata,
      userdata_free,
    );
  }

  late final _realm_sync_session_wait_for_upload_completionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<realm_sync_session_t>,
                  realm_sync_upload_completion_func_t,
                  ffi.Pointer<ffi.Void>,
                  realm_free_userdata_func_t)>>(
      'realm_sync_session_wait_for_upload_completion');
  late final _realm_sync_session_wait_for_upload_completion =
      _realm_sync_session_wait_for_upload_completionPtr.asFunction<
          void Function(
              ffi.Pointer<realm_sync_session_t>,
              realm_sync_upload_completion_func_t,
              ffi.Pointer<ffi.Void>,
              realm_free_userdata_func_t)>();

  void realm_initializeDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _realm_initializeDartApiDL(
      data,
    );
  }

  late final _realm_initializeDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'realm_initializeDartApiDL');
  late final _realm_initializeDartApiDL = _realm_initializeDartApiDLPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  Dart_FinalizableHandle realm_attach_finalizer(
    Object handle,
    ffi.Pointer<ffi.Void> realmPtr,
    int size,
  ) {
    return _realm_attach_finalizer(
      handle,
      realmPtr,
      size,
    );
  }

  late final _realm_attach_finalizerPtr = _lookup<
      ffi.NativeFunction<
          Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('realm_attach_finalizer');
  late final _realm_attach_finalizer = _realm_attach_finalizerPtr.asFunction<
      Dart_FinalizableHandle Function(Object, ffi.Pointer<ffi.Void>, int)>();

  void realm_delete_finalizable(
    Dart_FinalizableHandle finalizable_handle,
    Object handle,
  ) {
    return _realm_delete_finalizable(
      finalizable_handle,
      handle,
    );
  }

  late final _realm_delete_finalizablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_FinalizableHandle, ffi.Handle)>>('realm_delete_finalizable');
  late final _realm_delete_finalizable = _realm_delete_finalizablePtr
      .asFunction<void Function(Dart_FinalizableHandle, Object)>();

  ffi.Pointer<ffi.Void> object_to_weak_handle(
    Object handle,
  ) {
    return _object_to_weak_handle(
      handle,
    );
  }

  late final _object_to_weak_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Handle)>>(
          'object_to_weak_handle');
  late final _object_to_weak_handle = _object_to_weak_handlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(Object)>();

  Object weak_handle_to_object(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _weak_handle_to_object(
      handle,
    );
  }

  late final _weak_handle_to_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Void>)>>(
          'weak_handle_to_object');
  late final _weak_handle_to_object = _weak_handle_to_objectPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> object_to_persistent_handle(
    Object handle,
  ) {
    return _object_to_persistent_handle(
      handle,
    );
  }

  late final _object_to_persistent_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Handle)>>(
          'object_to_persistent_handle');
  late final _object_to_persistent_handle = _object_to_persistent_handlePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(Object)>();

  Object persistent_handle_to_object(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _persistent_handle_to_object(
      handle,
    );
  }

  late final _persistent_handle_to_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Void>)>>(
          'persistent_handle_to_object');
  late final _persistent_handle_to_object = _persistent_handle_to_objectPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Void>)>();

  void delete_persistent_handle(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _delete_persistent_handle(
      handle,
    );
  }

  late final _delete_persistent_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'delete_persistent_handle');
  late final _delete_persistent_handle = _delete_persistent_handlePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<realm_scheduler_t> realm_dart_create_scheduler(
    int isolateId,
    int port,
  ) {
    return _realm_dart_create_scheduler(
      isolateId,
      port,
    );
  }

  late final _realm_dart_create_schedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<realm_scheduler_t> Function(
              ffi.Uint64, Dart_Port)>>('realm_dart_create_scheduler');
  late final _realm_dart_create_scheduler = _realm_dart_create_schedulerPtr
      .asFunction<ffi.Pointer<realm_scheduler_t> Function(int, int)>();

  void realm_dart_scheduler_invoke(
    int isolateId,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _realm_dart_scheduler_invoke(
      isolateId,
      userData,
    );
  }

  late final _realm_dart_scheduler_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64,
              ffi.Pointer<ffi.Void>)>>('realm_dart_scheduler_invoke');
  late final _realm_dart_scheduler_invoke = _realm_dart_scheduler_invokePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  int get_thread_id() {
    return _get_thread_id();
  }

  late final _get_thread_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('get_thread_id');
  late final _get_thread_id = _get_thread_idPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> realm_dart_get_files_path() {
    return _realm_dart_get_files_path();
  }

  late final _realm_dart_get_files_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'realm_dart_get_files_path');
  late final _realm_dart_get_files_path = _realm_dart_get_files_pathPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function()>();
}

class shared_realm extends ffi.Opaque {}

class realm_schema extends ffi.Opaque {}

class realm_scheduler extends ffi.Opaque {}

class realm_thread_safe_reference extends ffi.Opaque {}

class realm_object extends ffi.Opaque {}

class realm_list extends ffi.Opaque {}

class realm_set extends ffi.Opaque {}

class realm_dictionary extends ffi.Opaque {}

class realm_query extends ffi.Opaque {}

class realm_results extends ffi.Opaque {}

class realm_config extends ffi.Opaque {}

class realm_app_config extends ffi.Opaque {}

class realm_sync_client_config extends ffi.Opaque {}

class realm_sync_config extends ffi.Opaque {}

abstract class realm_schema_mode {
  static const int RLM_SCHEMA_MODE_AUTOMATIC = 0;
  static const int RLM_SCHEMA_MODE_IMMUTABLE = 1;
  static const int RLM_SCHEMA_MODE_READ_ONLY = 2;
  static const int RLM_SCHEMA_MODE_SOFT_RESET_FILE = 3;
  static const int RLM_SCHEMA_MODE_HARD_RESET_FILE = 4;
  static const int RLM_SCHEMA_MODE_ADDITIVE_DISCOVERED = 5;
  static const int RLM_SCHEMA_MODE_ADDITIVE_EXPLICIT = 6;
  static const int RLM_SCHEMA_MODE_MANUAL = 7;
}

abstract class realm_value_type {
  static const int RLM_TYPE_NULL = 0;
  static const int RLM_TYPE_INT = 1;
  static const int RLM_TYPE_BOOL = 2;
  static const int RLM_TYPE_STRING = 3;
  static const int RLM_TYPE_BINARY = 4;
  static const int RLM_TYPE_TIMESTAMP = 5;
  static const int RLM_TYPE_FLOAT = 6;
  static const int RLM_TYPE_DOUBLE = 7;
  static const int RLM_TYPE_DECIMAL128 = 8;
  static const int RLM_TYPE_OBJECT_ID = 9;
  static const int RLM_TYPE_LINK = 10;
  static const int RLM_TYPE_UUID = 11;
}

abstract class realm_schema_validation_mode {
  static const int RLM_SCHEMA_VALIDATION_BASIC = 0;
  static const int RLM_SCHEMA_VALIDATION_SYNC = 1;
  static const int RLM_SCHEMA_VALIDATION_REJECT_EMBEDDED_ORPHANS = 2;
}

class realm_string extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  @ffi.IntPtr()
  external int size;
}

class realm_binary extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.IntPtr()
  external int size;
}

class realm_timestamp extends ffi.Struct {
  @ffi.Int64()
  external int seconds;

  @ffi.Int32()
  external int nanoseconds;
}

class realm_decimal128 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> w;
}

class realm_link extends ffi.Struct {
  @realm_class_key_t()
  external int target_table;

  @realm_object_key_t()
  external int target;
}

typedef realm_class_key_t = ffi.Uint32;
typedef realm_object_key_t = ffi.Int64;

class realm_object_id extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint8> bytes;
}

class realm_uuid extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> bytes;
}

class realm_value extends ffi.Struct {
  external UnnamedUnion1 values;

  @ffi.Int32()
  external int type;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Int64()
  external int integer;

  @ffi.Uint8()
  external int boolean;

  external realm_string_t string;

  external realm_binary_t binary;

  external realm_timestamp_t timestamp;

  @ffi.Float()
  external double fnum;

  @ffi.Double()
  external double dnum;

  external realm_decimal128_t decimal128;

  external realm_object_id_t object_id;

  external realm_uuid_t uuid;

  external realm_link_t link;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> data;
}

typedef realm_string_t = realm_string;
typedef realm_binary_t = realm_binary;
typedef realm_timestamp_t = realm_timestamp;
typedef realm_decimal128_t = realm_decimal128;
typedef realm_object_id_t = realm_object_id;
typedef realm_uuid_t = realm_uuid;
typedef realm_link_t = realm_link;

class realm_key_path_elem extends ffi.Struct {
  @realm_class_key_t()
  external int object;

  @realm_property_key_t()
  external int property;
}

typedef realm_property_key_t = ffi.Int64;

class realm_key_path extends ffi.Struct {
  @ffi.IntPtr()
  external int nb_elements;

  external ffi.Pointer<realm_key_path_elem_t> path_elements;
}

typedef realm_key_path_elem_t = realm_key_path_elem;

class realm_key_path_array extends ffi.Struct {
  @ffi.IntPtr()
  external int nb_elements;

  external ffi.Pointer<realm_key_path_t> paths;
}

typedef realm_key_path_t = realm_key_path;

class realm_version_id extends ffi.Struct {
  @ffi.Uint64()
  external int version;

  @ffi.Uint64()
  external int index;
}

class realm_async_error extends ffi.Opaque {}

abstract class realm_errno {
  static const int RLM_ERR_NONE = 0;
  static const int RLM_ERR_UNKNOWN = 1;
  static const int RLM_ERR_OTHER_EXCEPTION = 2;
  static const int RLM_ERR_OUT_OF_MEMORY = 3;
  static const int RLM_ERR_NOT_CLONABLE = 4;
  static const int RLM_ERR_NOT_IN_A_TRANSACTION = 5;
  static const int RLM_ERR_WRONG_THREAD = 6;
  static const int RLM_ERR_INVALIDATED_OBJECT = 7;
  static const int RLM_ERR_INVALID_PROPERTY = 8;
  static const int RLM_ERR_MISSING_PROPERTY_VALUE = 9;
  static const int RLM_ERR_PROPERTY_TYPE_MISMATCH = 10;
  static const int RLM_ERR_MISSING_PRIMARY_KEY = 11;
  static const int RLM_ERR_UNEXPECTED_PRIMARY_KEY = 12;
  static const int RLM_ERR_WRONG_PRIMARY_KEY_TYPE = 13;
  static const int RLM_ERR_MODIFY_PRIMARY_KEY = 14;
  static const int RLM_ERR_READ_ONLY_PROPERTY = 15;
  static const int RLM_ERR_PROPERTY_NOT_NULLABLE = 16;
  static const int RLM_ERR_INVALID_ARGUMENT = 17;
  static const int RLM_ERR_LOGIC = 18;
  static const int RLM_ERR_NO_SUCH_TABLE = 19;
  static const int RLM_ERR_NO_SUCH_OBJECT = 20;
  static const int RLM_ERR_CROSS_TABLE_LINK_TARGET = 21;
  static const int RLM_ERR_UNSUPPORTED_FILE_FORMAT_VERSION = 22;
  static const int RLM_ERR_MULTIPLE_SYNC_AGENTS = 23;
  static const int RLM_ERR_ADDRESS_SPACE_EXHAUSTED = 24;
  static const int RLM_ERR_MAXIMUM_FILE_SIZE_EXCEEDED = 25;
  static const int RLM_ERR_OUT_OF_DISK_SPACE = 26;
  static const int RLM_ERR_KEY_NOT_FOUND = 27;
  static const int RLM_ERR_COLUMN_NOT_FOUND = 28;
  static const int RLM_ERR_COLUMN_ALREADY_EXISTS = 29;
  static const int RLM_ERR_KEY_ALREADY_USED = 30;
  static const int RLM_ERR_SERIALIZATION_ERROR = 31;
  static const int RLM_ERR_INVALID_PATH_ERROR = 32;
  static const int RLM_ERR_DUPLICATE_PRIMARY_KEY_VALUE = 33;
  static const int RLM_ERR_INDEX_OUT_OF_BOUNDS = 34;
  static const int RLM_ERR_INVALID_QUERY_STRING = 35;
  static const int RLM_ERR_INVALID_QUERY = 36;
  static const int RLM_ERR_FILE_ACCESS_ERROR = 37;
  static const int RLM_ERR_FILE_PERMISSION_DENIED = 38;
  static const int RLM_ERR_DELETE_OPENED_REALM = 39;

  /// < A user-provided callback failed.
  static const int RLM_ERR_CALLBACK = 1000000;
}

abstract class realm_logic_error_kind {
  static const int RLM_LOGIC_ERR_NONE = 0;
  static const int RLM_LOGIC_ERR_STRING_TOO_BIG = 1;
}

class realm_error extends ffi.Struct {
  @ffi.Int32()
  external int error;

  external ffi.Pointer<ffi.Int8> message;

  external UnnamedUnion2 kind;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Int32()
  external int code;

  @ffi.Int32()
  external int logic_error_kind;
}

abstract class realm_column_attr {
  static const int RLM_COLUMN_ATTR_NONE = 0;
  static const int RLM_COLUMN_ATTR_INDEXED = 1;
  static const int RLM_COLUMN_ATTR_UNIQUE = 2;
  static const int RLM_COLUMN_ATTR_RESERVED = 4;
  static const int RLM_COLUMN_ATTR_STRONG_LINKS = 8;
  static const int RLM_COLUMN_ATTR_NULLABLE = 16;
  static const int RLM_COLUMN_ATTR_LIST = 32;
  static const int RLM_COLUMN_ATTR_DICTIONARY = 64;
  static const int RLM_COLUMN_ATTR_COLLECTION = 96;
}

abstract class realm_property_type {
  static const int RLM_PROPERTY_TYPE_INT = 0;
  static const int RLM_PROPERTY_TYPE_BOOL = 1;
  static const int RLM_PROPERTY_TYPE_STRING = 2;
  static const int RLM_PROPERTY_TYPE_BINARY = 4;
  static const int RLM_PROPERTY_TYPE_MIXED = 6;
  static const int RLM_PROPERTY_TYPE_TIMESTAMP = 8;
  static const int RLM_PROPERTY_TYPE_FLOAT = 9;
  static const int RLM_PROPERTY_TYPE_DOUBLE = 10;
  static const int RLM_PROPERTY_TYPE_DECIMAL128 = 11;
  static const int RLM_PROPERTY_TYPE_OBJECT = 12;
  static const int RLM_PROPERTY_TYPE_LINKING_OBJECTS = 14;
  static const int RLM_PROPERTY_TYPE_OBJECT_ID = 15;
  static const int RLM_PROPERTY_TYPE_UUID = 17;
}

abstract class realm_collection_type {
  static const int RLM_COLLECTION_TYPE_NONE = 0;
  static const int RLM_COLLECTION_TYPE_LIST = 1;
  static const int RLM_COLLECTION_TYPE_SET = 2;
  static const int RLM_COLLECTION_TYPE_DICTIONARY = 4;
}

class realm_property_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> public_name;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int collection_type;

  external ffi.Pointer<ffi.Int8> link_target;

  external ffi.Pointer<ffi.Int8> link_origin_property_name;

  @realm_property_key_t()
  external int key;

  @ffi.Int32()
  external int flags;
}

class realm_class_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> primary_key;

  @ffi.IntPtr()
  external int num_properties;

  @ffi.IntPtr()
  external int num_computed_properties;

  @realm_class_key_t()
  external int key;

  @ffi.Int32()
  external int flags;
}

abstract class realm_class_flags {
  static const int RLM_CLASS_NORMAL = 0;
  static const int RLM_CLASS_EMBEDDED = 1;
}

abstract class realm_property_flags {
  static const int RLM_PROPERTY_NORMAL = 0;
  static const int RLM_PROPERTY_NULLABLE = 1;
  static const int RLM_PROPERTY_PRIMARY_KEY = 2;
  static const int RLM_PROPERTY_INDEXED = 4;
}

class realm_notification_token extends ffi.Opaque {}

class realm_object_changes extends ffi.Opaque {}

class realm_collection_changes extends ffi.Opaque {}

typedef realm_t = shared_realm;
typedef realm_version_id_t = realm_version_id;
typedef realm_error_t = realm_error;
typedef realm_async_error_t = realm_async_error;
typedef realm_thread_safe_reference_t = realm_thread_safe_reference;
typedef realm_config_t = realm_config;
typedef realm_schema_t = realm_schema;
typedef realm_migration_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<realm_t>,
            ffi.Pointer<realm_t>, ffi.Pointer<realm_schema_t>)>>;
typedef realm_data_initialization_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<realm_t>)>>;
typedef realm_should_compact_on_launch_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Uint64, ffi.Uint64)>>;
typedef realm_scheduler_t = realm_scheduler;
typedef realm_sync_config_t = realm_sync_config;
typedef realm_free_userdata_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_scheduler_notify_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_scheduler_is_on_thread_func_t = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_scheduler_is_same_as_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef realm_scheduler_can_deliver_notifications_func_t = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_scheduler_default_factory_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<realm_scheduler_t> Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_on_realm_change_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef realm_class_info_t = realm_class_info;
typedef realm_property_info_t = realm_property_info;

/// Callback for realm schema changed notifications.
///
/// @param new_schema The new schema. This object is released after the callback returns.
/// Preserve it with realm_clone() if you wish to keep it around for longer.
typedef realm_on_schema_change_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<realm_schema_t>)>>;
typedef realm_object_t = realm_object;
typedef realm_value_t = realm_value;
typedef realm_results_t = realm_results;
typedef realm_notification_token_t = realm_notification_token;
typedef realm_key_path_array_t = realm_key_path_array;
typedef realm_on_object_change_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_object_changes_t>)>>;
typedef realm_object_changes_t = realm_object_changes;
typedef realm_callback_error_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_async_error_t>)>>;
typedef realm_list_t = realm_list;
typedef realm_on_collection_change_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_collection_changes_t>)>>;
typedef realm_collection_changes_t = realm_collection_changes;

class realm_collection_move extends ffi.Struct {
  @ffi.IntPtr()
  external int from;

  @ffi.IntPtr()
  external int to;
}

class realm_index_range extends ffi.Struct {
  @ffi.IntPtr()
  external int from;

  @ffi.IntPtr()
  external int to;
}

typedef realm_collection_move_t = realm_collection_move;
typedef realm_index_range_t = realm_index_range;
typedef realm_set_t = realm_set;
typedef realm_dictionary_t = realm_dictionary;
typedef realm_query_t = realm_query;

abstract class realm_log_level {
  static const int RLM_LOG_LEVEL_ALL = 0;
  static const int RLM_LOG_LEVEL_TRACE = 1;
  static const int RLM_LOG_LEVEL_DEBUG = 2;
  static const int RLM_LOG_LEVEL_DETAIL = 3;
  static const int RLM_LOG_LEVEL_INFO = 4;
  static const int RLM_LOG_LEVEL_WARNING = 5;
  static const int RLM_LOG_LEVEL_ERROR = 6;
  static const int RLM_LOG_LEVEL_FATAL = 7;
  static const int RLM_LOG_LEVEL_OFF = 8;
}

abstract class realm_http_request_method {
  static const int RLM_HTTP_REQUEST_METHOD_GET = 0;
  static const int RLM_HTTP_REQUEST_METHOD_POST = 1;
  static const int RLM_HTTP_REQUEST_METHOD_PATCH = 2;
  static const int RLM_HTTP_REQUEST_METHOD_PUT = 3;
  static const int RLM_HTTP_REQUEST_METHOD_DELETE = 4;
}

class realm_http_header extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> value;
}

class realm_http_request extends ffi.Struct {
  @ffi.Int32()
  external int method;

  external ffi.Pointer<ffi.Int8> url;

  @ffi.Uint64()
  external int timeout_ms;

  external ffi.Pointer<realm_http_header_t> headers;

  @ffi.IntPtr()
  external int num_headers;

  external ffi.Pointer<ffi.Int8> body;

  @ffi.IntPtr()
  external int body_size;
}

typedef realm_http_header_t = realm_http_header;

class realm_http_response extends ffi.Struct {
  @ffi.Int32()
  external int status_code;

  @ffi.Int32()
  external int custom_status_code;

  external ffi.Pointer<realm_http_header_t> headers;

  @ffi.IntPtr()
  external int num_headers;

  external ffi.Pointer<ffi.Int8> body;

  @ffi.IntPtr()
  external int body_size;
}

class realm_http_transport extends ffi.Opaque {}

typedef realm_http_transport_t = realm_http_transport;

/// Callback function used by Core to make a HTTP request.
///
/// Complete the request by calling realm_http_transport_complete_request(),
/// passing in the request_context pointer here and the received response.
/// Network request are expected to be asynchronous and can be completed on any thread.
///
/// @param userdata The userdata pointer passed to realm_http_transport_new().
/// @param request The request to send.
/// @param request_context Internal state pointer of Core, needed by realm_http_transport_complete_request().
typedef realm_http_request_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, realm_http_request_t,
            ffi.Pointer<ffi.Void>)>>;
typedef realm_http_request_t = realm_http_request;
typedef realm_http_response_t = realm_http_response;

class realm_app extends ffi.Opaque {}

class realm_app_credentials extends ffi.Opaque {}

class realm_user extends ffi.Opaque {}

abstract class realm_user_state {
  static const int RLM_USER_STATE_LOGGED_OUT = 0;
  static const int RLM_USER_STATE_LOGGED_IN = 1;
  static const int RLM_USER_STATE_REMOVED = 2;
}

/// Possible error categories the realm_app_error_t error code can fall in.
abstract class realm_app_error_category {
  /// Error category for HTTP-related errors. The error code value can be interpreted as a HTTP status code.
  static const int RLM_APP_ERROR_CATEGORY_HTTP = 0;

  /// JSON response parsing related errors. The error code is a member of realm_app_errno_json_e.
  static const int RLM_APP_ERROR_CATEGORY_JSON = 1;

  /// Client-side related errors. The error code is a member of realm_app_errno_client_e.
  static const int RLM_APP_ERROR_CATEGORY_CLIENT = 2;

  /// Errors reported by the backend. The error code is a member of realm_app_errno_service_e.
  static const int RLM_APP_ERROR_CATEGORY_SERVICE = 3;

  /// Custom error code was set in realm_http_response_t.custom_status_code.
  /// The error code is the custom_status_code value.
  static const int RLM_APP_ERROR_CATEGORY_CUSTOM = 4;
}

abstract class realm_app_errno_json {
  static const int RLM_APP_ERR_JSON_BAD_TOKEN = 1;
  static const int RLM_APP_ERR_JSON_MALFORMED_JSON = 2;
  static const int RLM_APP_ERR_JSON_MISSING_JSON_KEY = 3;
  static const int RLM_APP_ERR_JSON_BAD_BSON_PARSE = 4;
}

abstract class realm_app_errno_client {
  static const int RLM_APP_ERR_CLIENT_USER_NOT_FOUND = 1;
  static const int RLM_APP_ERR_CLIENT_USER_NOT_LOGGED_IN = 2;
  static const int RLM_APP_ERR_CLIENT_APP_DEALLOCATED = 3;
}

abstract class realm_app_errno_service {
  static const int RLM_APP_ERR_SERVICE_MISSING_AUTH_REQ = 1;
  static const int RLM_APP_ERR_SERVICE_INVALID_SESSION = 2;
  static const int RLM_APP_ERR_SERVICE_USER_APP_DOMAIN_MISMATCH = 3;
  static const int RLM_APP_ERR_SERVICE_DOMAIN_NOT_ALLOWED = 4;
  static const int RLM_APP_ERR_SERVICE_READ_SIZE_LIMIT_EXCEEDED = 5;
  static const int RLM_APP_ERR_SERVICE_INVALID_PARAMETER = 6;
  static const int RLM_APP_ERR_SERVICE_MISSING_PARAMETER = 7;
  static const int RLM_APP_ERR_SERVICE_TWILIO_ERROR = 8;
  static const int RLM_APP_ERR_SERVICE_GCM_ERROR = 9;
  static const int RLM_APP_ERR_SERVICE_HTTP_ERROR = 10;
  static const int RLM_APP_ERR_SERVICE_AWS_ERROR = 11;
  static const int RLM_APP_ERR_SERVICE_MONGODB_ERROR = 12;
  static const int RLM_APP_ERR_SERVICE_ARGUMENTS_NOT_ALLOWED = 13;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_EXECUTION_ERROR = 14;
  static const int RLM_APP_ERR_SERVICE_NO_MATCHING_RULE_FOUND = 15;
  static const int RLM_APP_ERR_SERVICE_INTERNAL_SERVER_ERROR = 16;
  static const int RLM_APP_ERR_SERVICE_AUTH_PROVIDER_NOT_FOUND = 17;
  static const int RLM_APP_ERR_SERVICE_AUTH_PROVIDER_ALREADY_EXISTS = 18;
  static const int RLM_APP_ERR_SERVICE_SERVICE_NOT_FOUND = 19;
  static const int RLM_APP_ERR_SERVICE_SERVICE_TYPE_NOT_FOUND = 20;
  static const int RLM_APP_ERR_SERVICE_SERVICE_ALREADY_EXISTS = 21;
  static const int RLM_APP_ERR_SERVICE_SERVICE_COMMAND_NOT_FOUND = 22;
  static const int RLM_APP_ERR_SERVICE_VALUE_NOT_FOUND = 23;
  static const int RLM_APP_ERR_SERVICE_VALUE_ALREADY_EXISTS = 24;
  static const int RLM_APP_ERR_SERVICE_VALUE_DUPLICATE_NAME = 25;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_NOT_FOUND = 26;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_ALREADY_EXISTS = 27;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_DUPLICATE_NAME = 28;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_SYNTAX_ERROR = 29;
  static const int RLM_APP_ERR_SERVICE_FUNCTION_INVALID = 30;
  static const int RLM_APP_ERR_SERVICE_INCOMING_WEBHOOK_NOT_FOUND = 31;
  static const int RLM_APP_ERR_SERVICE_INCOMING_WEBHOOK_ALREADY_EXISTS = 32;
  static const int RLM_APP_ERR_SERVICE_INCOMING_WEBHOOK_DUPLICATE_NAME = 33;
  static const int RLM_APP_ERR_SERVICE_RULE_NOT_FOUND = 34;
  static const int RLM_APP_ERR_SERVICE_API_KEY_NOT_FOUND = 35;
  static const int RLM_APP_ERR_SERVICE_RULE_ALREADY_EXISTS = 36;
  static const int RLM_APP_ERR_SERVICE_RULE_DUPLICATE_NAME = 37;
  static const int RLM_APP_ERR_SERVICE_AUTH_PROVIDER_DUPLICATE_NAME = 38;
  static const int RLM_APP_ERR_SERVICE_RESTRICTED_HOST = 39;
  static const int RLM_APP_ERR_SERVICE_API_KEY_ALREADY_EXISTS = 40;
  static const int RLM_APP_ERR_SERVICE_INCOMING_WEBHOOK_AUTH_FAILED = 41;
  static const int RLM_APP_ERR_SERVICE_EXECUTION_TIME_LIMIT_EXCEEDED = 42;
  static const int RLM_APP_ERR_SERVICE_NOT_CALLABLE = 43;
  static const int RLM_APP_ERR_SERVICE_USER_ALREADY_CONFIRMED = 44;
  static const int RLM_APP_ERR_SERVICE_USER_NOT_FOUND = 45;
  static const int RLM_APP_ERR_SERVICE_USER_DISABLED = 46;
  static const int RLM_APP_ERR_SERVICE_AUTH_ERROR = 47;
  static const int RLM_APP_ERR_SERVICE_BAD_REQUEST = 48;
  static const int RLM_APP_ERR_SERVICE_ACCOUNT_NAME_IN_USE = 49;
  static const int RLM_APP_ERR_SERVICE_INVALID_EMAIL_PASSWORD = 50;
  static const int RLM_APP_ERR_SERVICE_UNKNOWN = -1;
  static const int RLM_APP_ERR_SERVICE_NONE = 0;
}

abstract class realm_auth_provider {
  static const int RLM_AUTH_PROVIDER_ANONYMOUS = 0;
  static const int RLM_AUTH_PROVIDER_FACEBOOK = 1;
  static const int RLM_AUTH_PROVIDER_GOOGLE = 2;
  static const int RLM_AUTH_PROVIDER_APPLE = 3;
  static const int RLM_AUTH_PROVIDER_CUSTOM = 4;
  static const int RLM_AUTH_PROVIDER_EMAIL_PASSWORD = 5;
  static const int RLM_AUTH_PROVIDER_FUNCTION = 6;
  static const int RLM_AUTH_PROVIDER_USER_API_KEY = 7;
  static const int RLM_AUTH_PROVIDER_SERVER_API_KEY = 8;
}

class realm_app_user_apikey extends ffi.Struct {
  external realm_object_id_t id;

  external ffi.Pointer<ffi.Int8> key;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint8()
  external int disabled;
}

class realm_app_error extends ffi.Struct {
  @ffi.Int32()
  external int error_category;

  @ffi.Int32()
  external int error_code;

  /// The underlying HTTP status code returned by the server,
  /// otherwise zero.
  @ffi.Int32()
  external int http_status_code;

  external ffi.Pointer<ffi.Int8> message;

  /// A link to MongoDB Realm server logs related to the error,
  /// or NULL if error response didn't contain log information.
  external ffi.Pointer<ffi.Int8> link_to_server_logs;
}

typedef realm_app_credentials_t = realm_app_credentials;
typedef realm_app_config_t = realm_app_config;
typedef realm_app_t = realm_app;
typedef realm_sync_client_config_t = realm_sync_client_config;
typedef realm_user_t = realm_user;

/// Completion callback for asynchronous Realm App operations that yield a user object.
///
/// @param userdata The userdata pointer the asynchronous operation was started with.
/// @param user User object produced by the operation, or null if it failed.
/// The pointer is alive only for the duration of the callback,
/// if you wish to use it further make a copy with realm_clone().
/// @param error Pointer to an error object if the operation failed, otherwise null if it completed successfully.
typedef realm_app_user_completion_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<realm_user_t>,
            ffi.Pointer<realm_app_error_t>)>>;
typedef realm_app_error_t = realm_app_error;

/// Generic completion callback for asynchronous Realm App operations.
///
/// @param userdata The userdata pointer the asynchronous operation was started with.
/// @param error Pointer to an error object if the operation failed, otherwise null if it completed successfully.
typedef realm_app_void_completion_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_app_error_t>)>>;
typedef realm_app_user_apikey_t = realm_app_user_apikey;

class realm_user_identity_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Int32()
  external int provider_type;
}

abstract class realm_sync_client_metadata_mode {
  static const int RLM_SYNC_CLIENT_METADATA_MODE_PLAINTEXT = 0;
  static const int RLM_SYNC_CLIENT_METADATA_MODE_ENCRYPTED = 1;
  static const int RLM_SYNC_CLIENT_METADATA_MODE_DISABLED = 2;
}

abstract class realm_sync_client_reconnect_mode {
  static const int RLM_SYNC_CLIENT_RECONNECT_MODE_NORMAL = 0;
  static const int RLM_SYNC_CLIENT_RECONNECT_MODE_TESTING = 1;
}

abstract class realm_sync_session_resync_mode {
  static const int RLM_SYNC_SESSION_RESYNC_MODE_MANUAL = 0;
  static const int RLM_SYNC_SESSION_RESYNC_MODE_DISCARD_LOCAL = 1;
}

abstract class realm_sync_session_stop_policy {
  static const int RLM_SYNC_SESSION_STOP_POLICY_IMMEDIATELY = 0;
  static const int RLM_SYNC_SESSION_STOP_POLICY_LIVE_INDEFINITELY = 1;
  static const int RLM_SYNC_SESSION_STOP_POLICY_AFTER_CHANGES_UPLOADED = 2;
}

abstract class realm_sync_session_state {
  static const int RLM_SYNC_SESSION_STATE_ACTIVE = 0;
  static const int RLM_SYNC_SESSION_STATE_DYING = 1;
  static const int RLM_SYNC_SESSION_STATE_INACTIVE = 2;
  static const int RLM_SYNC_SESSION_STATE_WAITING_FOR_ACCESS_TOKEN = 3;
}

abstract class realm_sync_connection_state {
  static const int RLM_SYNC_CONNECTION_STATE_DISCONNECTED = 0;
  static const int RLM_SYNC_CONNECTION_STATE_CONNECTING = 1;
  static const int RLM_SYNC_CONNECTION_STATE_CONNECTED = 2;
}

abstract class realm_sync_progress_direction {
  static const int RLM_SYNC_PROGRESS_DIRECTION_UPLOAD = 0;
  static const int RLM_SYNC_PROGRESS_DIRECTION_DOWNLOAD = 1;
}

/// Possible error categories realm_sync_error_code_t can fall in.
abstract class realm_sync_error_category {
  static const int RLM_SYNC_ERROR_CATEGORY_CLIENT = 0;
  static const int RLM_SYNC_ERROR_CATEGORY_CONNECTION = 1;
  static const int RLM_SYNC_ERROR_CATEGORY_SESSION = 2;

  /// System error - POSIX errno, Win32 HRESULT, etc.
  static const int RLM_SYNC_ERROR_CATEGORY_SYSTEM = 3;

  /// Unknown source of error.
  static const int RLM_SYNC_ERROR_CATEGORY_UNKNOWN = 4;
}

abstract class realm_sync_errno_client {
  static const int RLM_SYNC_ERR_CLIENT_CONNECTION_CLOSED = 100;
  static const int RLM_SYNC_ERR_CLIENT_UNKNOWN_MESSAGE = 101;
  static const int RLM_SYNC_ERR_CLIENT_BAD_SYNTAX = 102;
  static const int RLM_SYNC_ERR_CLIENT_LIMITS_EXCEEDED = 103;
  static const int RLM_SYNC_ERR_CLIENT_BAD_SESSION_IDENT = 104;
  static const int RLM_SYNC_ERR_CLIENT_BAD_MESSAGE_ORDER = 105;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CLIENT_FILE_IDENT = 106;
  static const int RLM_SYNC_ERR_CLIENT_BAD_PROGRESS = 107;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CHANGESET_HEADER_SYNTAX = 108;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CHANGESET_SIZE = 109;
  static const int RLM_SYNC_ERR_CLIENT_BAD_ORIGIN_FILE_IDENT = 110;
  static const int RLM_SYNC_ERR_CLIENT_BAD_SERVER_VERSION = 111;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CHANGESET = 112;
  static const int RLM_SYNC_ERR_CLIENT_BAD_REQUEST_IDENT = 113;
  static const int RLM_SYNC_ERR_CLIENT_BAD_ERROR_CODE = 114;
  static const int RLM_SYNC_ERR_CLIENT_BAD_COMPRESSION = 115;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CLIENT_VERSION = 116;
  static const int RLM_SYNC_ERR_CLIENT_SSL_SERVER_CERT_REJECTED = 117;
  static const int RLM_SYNC_ERR_CLIENT_PONG_TIMEOUT = 118;
  static const int RLM_SYNC_ERR_CLIENT_BAD_CLIENT_FILE_IDENT_SALT = 119;
  static const int RLM_SYNC_ERR_CLIENT_BAD_FILE_IDENT = 120;
  static const int RLM_SYNC_ERR_CLIENT_CONNECT_TIMEOUT = 121;
  static const int RLM_SYNC_ERR_CLIENT_BAD_TIMESTAMP = 122;
  static const int RLM_SYNC_ERR_CLIENT_BAD_PROTOCOL_FROM_SERVER = 123;
  static const int RLM_SYNC_ERR_CLIENT_CLIENT_TOO_OLD_FOR_SERVER = 124;
  static const int RLM_SYNC_ERR_CLIENT_CLIENT_TOO_NEW_FOR_SERVER = 125;
  static const int RLM_SYNC_ERR_CLIENT_PROTOCOL_MISMATCH = 126;
  static const int RLM_SYNC_ERR_CLIENT_BAD_STATE_MESSAGE = 127;
  static const int RLM_SYNC_ERR_CLIENT_MISSING_PROTOCOL_FEATURE = 128;
  static const int RLM_SYNC_ERR_CLIENT_HTTP_TUNNEL_FAILED = 131;
}

abstract class realm_sync_errno_connection {
  static const int RLM_SYNC_ERR_CONNECTION_CONNECTION_CLOSED = 100;
  static const int RLM_SYNC_ERR_CONNECTION_OTHER_ERROR = 101;
  static const int RLM_SYNC_ERR_CONNECTION_UNKNOWN_MESSAGE = 102;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_SYNTAX = 103;
  static const int RLM_SYNC_ERR_CONNECTION_LIMITS_EXCEEDED = 104;
  static const int RLM_SYNC_ERR_CONNECTION_WRONG_PROTOCOL_VERSION = 105;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_SESSION_IDENT = 106;
  static const int RLM_SYNC_ERR_CONNECTION_REUSE_OF_SESSION_IDENT = 107;
  static const int RLM_SYNC_ERR_CONNECTION_BOUND_IN_OTHER_SESSION = 108;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_MESSAGE_ORDER = 109;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_DECOMPRESSION = 110;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_CHANGESET_HEADER_SYNTAX = 111;
  static const int RLM_SYNC_ERR_CONNECTION_BAD_CHANGESET_SIZE = 112;
  static const int RLM_SYNC_ERR_CONNECTION_SWITCH_TO_FLX_SYNC = 113;
  static const int RLM_SYNC_ERR_CONNECTION_SWITCH_TO_PBS = 114;
}

abstract class realm_sync_errno_session {
  static const int RLM_SYNC_ERR_SESSION_SESSION_CLOSED = 200;
  static const int RLM_SYNC_ERR_SESSION_OTHER_SESSION_ERROR = 201;
  static const int RLM_SYNC_ERR_SESSION_TOKEN_EXPIRED = 202;
  static const int RLM_SYNC_ERR_SESSION_BAD_AUTHENTICATION = 203;
  static const int RLM_SYNC_ERR_SESSION_ILLEGAL_REALM_PATH = 204;
  static const int RLM_SYNC_ERR_SESSION_NO_SUCH_REALM = 205;
  static const int RLM_SYNC_ERR_SESSION_PERMISSION_DENIED = 206;
  static const int RLM_SYNC_ERR_SESSION_BAD_SERVER_FILE_IDENT = 207;
  static const int RLM_SYNC_ERR_SESSION_BAD_CLIENT_FILE_IDENT = 208;
  static const int RLM_SYNC_ERR_SESSION_BAD_SERVER_VERSION = 209;
  static const int RLM_SYNC_ERR_SESSION_BAD_CLIENT_VERSION = 210;
  static const int RLM_SYNC_ERR_SESSION_DIVERGING_HISTORIES = 211;
  static const int RLM_SYNC_ERR_SESSION_BAD_CHANGESET = 212;
  static const int RLM_SYNC_ERR_SESSION_SUPERSEDED = 213;
  static const int RLM_SYNC_ERR_SESSION_DISABLED_SESSION = 213;
  static const int RLM_SYNC_ERR_SESSION_PARTIAL_SYNC_DISABLED = 214;
  static const int RLM_SYNC_ERR_SESSION_UNSUPPORTED_SESSION_FEATURE = 215;
  static const int RLM_SYNC_ERR_SESSION_BAD_ORIGIN_FILE_IDENT = 216;
  static const int RLM_SYNC_ERR_SESSION_BAD_CLIENT_FILE = 217;
  static const int RLM_SYNC_ERR_SESSION_SERVER_FILE_DELETED = 218;
  static const int RLM_SYNC_ERR_SESSION_CLIENT_FILE_BLACKLISTED = 219;
  static const int RLM_SYNC_ERR_SESSION_USER_BLACKLISTED = 220;
  static const int RLM_SYNC_ERR_SESSION_TRANSACT_BEFORE_UPLOAD = 221;
  static const int RLM_SYNC_ERR_SESSION_CLIENT_FILE_EXPIRED = 222;
  static const int RLM_SYNC_ERR_SESSION_USER_MISMATCH = 223;
  static const int RLM_SYNC_ERR_SESSION_TOO_MANY_SESSIONS = 224;
  static const int RLM_SYNC_ERR_SESSION_INVALID_SCHEMA_CHANGE = 225;
}

class realm_sync_session extends ffi.Opaque {}

class realm_async_open_task extends ffi.Opaque {}

class realm_sync_error_code extends ffi.Struct {
  @ffi.Int32()
  external int category;

  @ffi.Int32()
  external int value;

  external ffi.Pointer<ffi.Int8> message;
}

class realm_sync_error_user_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> key;

  external ffi.Pointer<ffi.Int8> value;
}

class realm_sync_error extends ffi.Struct {
  external realm_sync_error_code_t error_code;

  external ffi.Pointer<ffi.Int8> detailed_message;

  @ffi.Uint8()
  external int is_fatal;

  @ffi.Uint8()
  external int is_unrecognized_by_client;

  external ffi.Pointer<realm_sync_error_user_info_t> user_info_map;

  @ffi.IntPtr()
  external int user_info_length;
}

typedef realm_sync_error_code_t = realm_sync_error_code;
typedef realm_sync_error_user_info_t = realm_sync_error_user_info;
typedef realm_log_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Pointer<ffi.Int8>)>>;
typedef realm_sync_error_handler_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<realm_sync_session_t>, realm_sync_error_t)>>;
typedef realm_sync_session_t = realm_sync_session;
typedef realm_sync_error_t = realm_sync_error;
typedef realm_sync_ssl_verify_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Int8>,
            ffi.Int16,
            ffi.Pointer<ffi.Int8>,
            ffi.IntPtr,
            ffi.Int32,
            ffi.Int32)>>;
typedef realm_async_open_task_t = realm_async_open_task;

/// Callback function invoked by the async open task once the realm is open and fully synchronized.
///
/// This callback is invoked on the sync client's worker thread.
///
/// @param realm Downloaded realm instance, or null if an error occurred.
/// Move to the thread you want to use it on and
/// thaw with @a realm_from_thread_safe_reference().
/// @param error Null, if the operation complete successfully.
typedef realm_async_open_task_completion_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<realm_thread_safe_reference_t>,
            ffi.Pointer<realm_async_error_t>)>>;
typedef realm_sync_progress_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64, ffi.Uint64)>>;
typedef realm_sync_connection_state_changed_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>;
typedef realm_sync_download_completion_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_sync_error_code_t>)>>;
typedef realm_sync_upload_completion_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<realm_sync_error_code_t>)>>;
typedef Dart_FinalizableHandle = ffi.Pointer<_Dart_FinalizableHandle>;

class _Dart_FinalizableHandle extends ffi.Opaque {}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
