name: Dart desktop tests

on:
  workflow_call:
    inputs:
      os:
        description: OS to execute on.
        required: true
        type: string
      runner:
        description: GitHub runner image to execute on.
        required: true
        type: string
      architecture:
        description: Architecture to execute on.
        required: false
        type: string
      app:
        description: App name prefix.
        required: true
        type: string
      cluster:
        description: Cluster name to deploy.
        required: true
        type: string

env:
  BAAS_URL: ${{ secrets.REALM_QA_URL }}
  BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
  BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
  BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
  REALM_CI: true

jobs:
  dart-tests:
    runs-on: ${{ inputs.runner }}
    name: Dart tests on ${{inputs.os }} ${{ inputs.architecture }}
    timeout-minutes: 45
    env:
      BAAS_CLUSTER: ${{ inputs.cluster }}
      BAAS_DIFFERENTIATOR: ${{ inputs.app }}${{ github.run_id }}${{ github.run_attempt }}

    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          submodules: false

      - name: Cleanup Workspace
        run: git clean -fdx

      - name: Fetch artifacts
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7
        with:
          name: librealm-${{ inputs.os }}
          path: binary/${{ inputs.os }}

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: ${{ contains(inputs.os, 'linux') && '3.0.6' || 'stable'}}
          architecture: ${{ inputs.architecture == 'arm' && 'arm64' || 'x64'}}

      - name: Install dependencies
        run: dart pub get

      # This will be a no-op under normal circumstances since the cluster would have been deployed
      # in deploy-cluster. It is needed in case we want to re-run the job after the cluster has been reaped.
      - name: Create cluster
        uses: realm/ci-actions/mdb-realm/deploy@338bf3e7575015a28faec8b67614385d122aece7
        with:
          realmUrl: ${{ env.BAAS_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ env.BAAS_PROJECT_ID }}
          apiKey: ${{ env.BAAS_API_KEY }}
          privateApiKey: ${{ env.BAAS_PRIVATE_API_KEY }}
          clusterName: ${{ env.BAAS_CLUSTER }}

      - name: Run tests
        run: ${{ inputs.architecture == 'arm' && 'arch -arm64 ' || '' }}dart test -r expanded --coverage ./coverage/ -j 1 --test-randomize-ordering-seed random

      # we're pruning generated files, the cli folder, as well as realm_bindings.dart from our coverage reports
      - name: Generate realm_dart coverage report
        if: inputs.runner == 'ubuntu-latest'
        run: |
          sudo apt-get install -y lcov
          dart run coverage:format_coverage \
            --in coverage/ \
            --out ./coverage/lcov.info \
            --check-ignore \
            --lcov \
            --packages .dart_tool/package_config.json \
            --report-on lib
          lcov --remove ./coverage/lcov.info '*.g.dart' '*/lib/src/cli/*' '*/lib/src/native/realm_bindings.dart' -o coverage/pruned-lcov.info

      - name: Publish realm_dart coverage
        if: inputs.runner == 'ubuntu-latest'
        id: publish-coverage
        uses: coverallsapp/github-action@f350da2c033043742f89e8c0b7b5145a1616da6d
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: realm_dart
          path-to-lcov: ./coverage/pruned-lcov.info
          parallel: true

      - name: Output Coveralls response
        if: inputs.runner == 'ubuntu-latest'
        run: echo ${{ steps.publish-coverage.outputs.coveralls-api-result }}