name: Realm Dart CI

on:
  push:
    branches:
      - master
  pull_request:
env:
  REALM_CI: true

jobs:

  baas_matrix:
    strategy:
      matrix:
        package: [flutter, dart]
        platform: [linux, windows, macos]
        include:
          - platform: ios
            package: flutter
          - platform: android
            package: flutter
    runs-on: ubuntu-latest
    name: BaaS ${{ matrix.platform }} for ${{ matrix.package }}
    outputs:
      dart-linux-clusterName: ${{ steps.set-output.outputs.dart-linux-clusterName }}
      dart-windows-clusterName: ${{ steps.set-output.outputs.dart-windows-clusterName }}
      dart-macos-clusterName: ${{ steps.set-output.outputs.dart-macos-clusterName }}
      flutter-linux-clusterName: ${{ steps.set-output.outputs.flutter-linux-clusterName }}
      flutter-windows-clusterName: ${{ steps.set-output.outputs.flutter-windows-clusterName }}
      flutter-macos-clusterName: ${{ steps.set-output.outputs.flutter-macos-clusterName }}
      flutter-ios-clusterName: ${{ steps.set-output.outputs.flutter-ios-clusterName }}
      flutter-android-clusterName: ${{ steps.set-output.outputs.flutter-android-clusterName }}
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: realm/ci-actions/mdb-realm/deployApps@fac1d6958f03d71de743305ce3ab27594efbe7b7
        id: deploy-mdb-apps
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: ${{ matrix.package }}-${{ matrix.platform }}

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable

      - name: Deploy Apps
        run: |
          dart run realm_dart deploy-apps \
            --baas-url ${{ secrets.REALM_QA_URL }} \
            --atlas-cluster ${{ steps.deploy-mdb-apps.outputs.clusterName }} \
            --api-key ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }} \
            --private-api-key ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }} \
            --project-id ${{ secrets.ATLAS_QA_PROJECT_ID }}

      - name: Set ${{ matrix.package }}-${{ matrix.platform }} outputs
        id: set-output
        run: echo '::set-output name=${{ matrix.package }}-${{ matrix.platform }}-clusterName::${{ steps.deploy-mdb-apps.outputs.clusterName }}'

  cleanup-matrix:
    strategy:
      matrix:
        package: [flutter, dart]
        platform: [linux, windows, macos]
        include:
          - platform: ios
            package: flutter
    runs-on: ubuntu-latest
    name: Cleanup ${{ matrix.platform }} for ${{ matrix.package }}
    needs:
      - tests-linux
      - flutter-linux
      - tests-macos
      - flutter-macos
      - tests-windows
      - flutter-windows
      - flutter-ios
    if: always()
    timeout-minutes: 5
    steps:
      - uses: realm/ci-actions/mdb-realm/cleanup@fac1d6958f03d71de743305ce3ab27594efbe7b7
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID}}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY}}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: ${{ matrix.package }}-${{ matrix.platform }}

  cleanup-android:
    runs-on: ubuntu-latest
    name: Cleanup flutter for android
    needs:
      - flutter-android
    if: always()
    timeout-minutes: 5
    steps:
      - uses: realm/ci-actions/mdb-realm/cleanup@fac1d6958f03d71de743305ce3ab27594efbe7b7
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID}}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY}}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: flutter-android

# Linux jobs

  build-linux:
    runs-on: ubuntu-latest
    name: Build Linux
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/linux/**
          key: binaries-linux-${{hashFiles('./src/**')}}

      - name: Setup Ninja
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Build Realm for Linux
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: ./scripts/build-linux.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-linux
          path: binary/linux/**
          retention-days: 1

  tests-linux:
    runs-on: ubuntu-latest
    name: Tests Linux
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.dart-linux-clusterName }}
    needs:
      - baas_matrix
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-linux
          path: binary/linux

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: dart test -r expanded -j 1 --test-randomize-ordering-seed random

  flutter-linux:
    runs-on: ubuntu-latest
    name: Flutter Tests Linux
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.flutter-linux-clusterName }}
    needs:
      - baas_matrix
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Setup GTK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev xvfb

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-linux
          path: binary/linux

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Enable Flutter Desktop support
        run: flutter config --enable-linux-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: xvfb-run flutter drive -d linux --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

# macOS jobs

  build-macos:
    runs-on: macos-latest
    name: Build macOS
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
      REALM_USE_CCACHE: "TRUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/macos/**
          key: binaries-macos-${{hashFiles('./src/**')}}

      - name: Install ccache
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-macos

      - name: Enable ccache
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      - name: Build Realm for macOS
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: ./scripts/build-macos.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-macos
          path: binary/macos/**
          retention-days: 1

  tests-macos:
    runs-on: macos-latest
    name: Tests macOS
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.dart-macos-clusterName }}
    needs:
      - baas_matrix
      - build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-macos
          path: binary/macos

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: dart test -r expanded -j 1 --test-randomize-ordering-seed random

  flutter-macos:
    runs-on: macos-latest
    name: Flutter Tests macOS
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.flutter-macos-clusterName }}
    needs:
      - baas_matrix
      - build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-macos
          path: binary/macos

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Enable Flutter Desktop support
        run: flutter config --enable-macos-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter drive -d macos --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

# Windows jobs

  build-windows:
    # TODO: build on windows-latest
    runs-on: windows-2022
    name: Build Windows
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/windows/**
          key: binaries-windows-${{hashFiles('./src/**')}}

      - name: Setup Vcpkg
        if: contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true'
        uses: friendlyanon/setup-vcpkg@v1
        with:
          path: src/realm-core/tools/vcpkg/ports
          cache-key: vcpkg-windows-x64
          cache-restore-keys: vcpkg-windows-x64

      - name: Build Realm for Windows
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: scripts\build.bat

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-windows
          path: binary/windows/**
          retention-days: 1

  tests-windows:
    runs-on: windows-latest
    name: Tests Windows
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.dart-windows-clusterName }}
    needs:
      - baas_matrix
      - build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-windows
          path: binary/windows

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: |
          dart test -r expanded -j 1 --test-randomize-ordering-seed random

  flutter-windows:
    # TODO: build on windows-latest
    runs-on: windows-2019
    name: Flutter Tests Windows
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.flutter-windows-clusterName }}
    needs:
      - baas_matrix
      - build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-windows
          path: binary/windows

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Enable Flutter Desktop support
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter drive -d windows --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

# iOS jobs

  build-ios:
    runs-on: macos-latest
    name: Build iOS
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
      REALM_USE_CCACHE: "TRUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/ios/**
          key: binaries-ios-${{hashFiles('./src/**')}}

      - name: Install ccache
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-ios

      - name: Enable ccache
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      - name: Build Realm for iOS
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        # TODO: paralellize build to build for all architectures
        run: ./scripts/build-ios.sh simulator

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-ios
          path: binary/ios/**
          retention-days: 1

  flutter-ios:
    runs-on: macos-latest
    name: Flutter Tests iOS
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.flutter-ios-clusterName }}
    needs:
      - baas_matrix
      - build-ios
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Enable ccache
        run: echo "PATH=/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH" >> $GITHUB_ENV

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios
          path: binary/ios

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Launch Simulator
        uses: futureware-tech/simulator-action@v1
        with:
          model: 'iPhone 8'
          os: 'iOS'
          os_version: '>= 14.0'

      - name: Run tests on iOS Simulator
        run: |
          flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
        working-directory: ./flutter/realm_flutter/tests

# Android jobs

  build-android:
    runs-on: ubuntu-latest
    name: Build Android
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/android/**
          key: binaries-android-${{hashFiles('./src/**')}}

      - name: Setup Ninja
        if: contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true'
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Build Realm for Android
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        # TODO: parallelize build for all architectures
        run: |
          export ANDROID_NDK=$ANDROID_NDK_HOME
          ./scripts/build-android.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-android
          path: binary/android/**
          retention-days: 1

  flutter-android:
    runs-on: macos-latest
    name: Flutter Tests Android
    env:
      BAAS_CLUSTER: ${{ needs.baas_matrix.outputs.flutter-android-clusterName }}
    needs:
      - baas_matrix
      - build-android
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-android
          path: binary/android

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      # TODO: move this to device farm
      - name: Setup Android Emulator cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: Create Android Emulator and generate snapshot for caching
        if: ${{ steps.avd-cache.outputs.cache-hit != 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          arch: x86
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          script: echo "Generated Emulator snapshot for caching."

      - name: Run tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          api-level: 29
          ndk: 21.0.6113669
          arch: x86
          cmake: 3.10.2.4988404
          script: flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
          working-directory: ./flutter/realm_flutter/tests

# Generator jobs

  generator:
    runs-on: ubuntu-latest
    name: Generator Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Run generator tests
        run: |
          dart pub get
          dart test --reporter expanded --coverage ./coverage/ --test-randomize-ordering-seed random
        working-directory: ./generator/

      - name: Delete generated files
        run: find . -name "*.g.dart" -not -path "./generator/*" -delete

      - name: Run generator in realm-dart repo
        run: |
          dart pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Run generator in realm_flutter/example
        run: |
          dart pub get
          dart run build_runner build --delete-conflicting-outputs
        working-directory: ./flutter/realm_flutter/example/

      - name: Install LLVM
        run: sudo apt update && sudo apt-get install -y libclang-dev

      - name: Run ffigen
        run: dart run ffigen
        working-directory: ./ffigen

      - name: Validate there are no uncommitted changes
        run: |
          status=$(git status --porcelain)
          if [ -n "$status" ]; then
            echo "$status"
            git diff
            exit 1
          fi

      - name: Generate generator coverage report
        if: ${{ false }}
        run: |
          dart run coverage:format_coverage \
            --in coverage/ \
            --out ./coverage/lcov.info \
            --check-ignore \
            --lcov \
            --packages .packages \
            --report-on lib
        working-directory: ./generator/

      - name: Publish Generator Coverage
        if: ${{ false }}
        id: publish-generator-coverage
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: realm_generator
          path-to-lcov: ./generator/coverage/lcov.info
        continue-on-error: true

      - name: Output Coveralls response
        if: ${{ false }}
        run: echo ${{ steps.publish-generator-coverage.outputs.coveralls-api-result }}
