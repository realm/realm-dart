name: Realm Dart CI

on:
  push:
    branches:
      - master
  pull_request:
env:
  BAAS_URL: ${{ secrets.REALM_QA_URL }}
  BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
  BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
  BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
  REALM_CI: true

jobs:

  deploy-cluster:
    runs-on: ubuntu-latest
    name: Deploy Cluster
    outputs:
      clusterName: ${{ steps.deploy-mdb-apps.outputs.clusterName }}
    steps:
      - uses: realm/ci-actions/mdb-realm/deployApps@fac1d6958f03d71de743305ce3ab27594efbe7b7
        id: deploy-mdb-apps
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: realm-dart

  baas-matrix:
    needs:
      - deploy-cluster
    strategy:
      fail-fast: false
      matrix:
        package: [flutter, dart]
        platform: [linux, windows, macos]
        include:
          - platform: ios
            package: flutter
          - platform: android
            package: flutter
          - platform: macos-arm
            package: dart
    runs-on: ubuntu-latest
    name: Deploy apps ${{ matrix.platform }} for ${{ matrix.package }}
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable

      - name: Deploy Apps
        run: |
          dart run realm_dart deploy-apps \
            --baas-url ${{ secrets.REALM_QA_URL }} \
            --atlas-cluster ${{ needs.deploy-cluster.outputs.clusterName }} \
            --api-key ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }} \
            --private-api-key ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }} \
            --project-id ${{ secrets.ATLAS_QA_PROJECT_ID }} \
            --differentiator "${{ matrix.package }}-${{ matrix.platform }}"

  cleanup-cluster:
    runs-on: ubuntu-latest
    name: Cleanup cluster
    needs:
      - flutter-desktop
      - flutter-ios
      - flutter-android
      - tests-dart
    if: always()
    timeout-minutes: 5
    steps:
      - uses: realm/ci-actions/mdb-realm/cleanup@fac1d6958f03d71de743305ce3ab27594efbe7b7
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID}}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY}}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: realm-dart

  build-native:
    runs-on: ${{ matrix.runner }}-latest
    name: Build native
    strategy:
      fail-fast: false
      matrix:
        include:
          - { preset: windows, runner: windows }
          - { preset: macos, runner: macos }
          - { preset: linux, runner: ubuntu }
          - { preset: ios, build: ios-device, runner: macos }
          - { preset: ios, build: ios-simulator, runner: macos }
          - { preset: ios, build: ios-catalyst, runner: macos }
          - { preset: android-x86, binary: android, runner: ubuntu }
          - { preset: android-x86_64, binary: android, runner: ubuntu }
          - { preset: android-armeabi-v7a, binary: android, runner: ubuntu }
          - { preset: android-arm64-v8a, binary: android, runner: ubuntu }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check cache
        id: check-cache
        if: ${{ !contains(github.head_ref, 'release/') }}
        uses: actions/cache@v3
        with:
          path: ./binary/**
          key: binaries-${{ matrix.build || matrix.preset }}-${{hashFiles('./src/**')}}

      - name: Setup Ninja
        if: contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true'
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Get vcpkg submodule commit sha
        id: vcpkg_cache_key
        if: contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true'
        working-directory: src/realm-core/tools/vcpkg/ports
        shell: bash
        run: echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Setup Vcpkg
        continue-on-error: true
        if: contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true'
        uses: friendlyanon/setup-vcpkg@v1
        with:
          path: src/realm-core/tools/vcpkg/ports
          cache-key: vcpkg-${{ matrix.preset }}-${{ hashFiles('./src/realm-core/tools/vcpkg/vcpkg.json') }}-${{ steps.vcpkg_cache_key.outputs.commit }}
          cache-restore-keys: vcpkg-${{ matrix.preset }}-

      - name: Setup Android NDK
        if: startsWith(matrix.preset, 'android-')
        run: echo "ANDROID_NDK=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV

      - name: Build
        if: ${{ contains(github.head_ref, 'release/') || steps.check-cache.outputs.cache-hit != 'true' }}
        run: |
          cmake --preset ${{ matrix.preset }}
          cmake --build --preset ${{ matrix.build || matrix.preset }} --config Release

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-${{ matrix.build || matrix.preset }}
          path: binary/${{ matrix.binary || matrix.preset }}/**
          retention-days: 1

  build-ios-xcframework:
    name: Combine .xcframework
    runs-on: macos-latest
    needs: build-native

    steps:
      - name: Fetch device build
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios-device
          path: binary/ios
      - name: Fetch simulator build
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios-simulator
          path: binary/ios
      - name: Fetch catalyst build
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios-catalyst
          path: binary/ios

      - name: Build .xcframework
        run: |
          xcodebuild -create-xcframework \
            -framework ./binary/ios/Release-iphoneos/realm_dart.framework \
            -framework ./binary/ios/Release-iphonesimulator/realm_dart.framework \
            -framework ./binary/ios/Release-maccatalyst/realm_dart.framework \
            -output ./binary/ios/realm_dart.xcframework
          rm -rf ./binary/ios/Release-*

      - name: Store .xcframework artifact
        uses: actions/upload-artifact@v2
        with:
          name: librealm-ios
          path: binary/ios
          retention-days: 1

      - name: Delete individual framework artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            librealm-ios-device
            librealm-ios-simulator
            librealm-ios-catalyst

  build-android-combined:
    name: Combine Android binaries
    runs-on: ubuntu-latest
    needs: build-native

    steps:
      - name: Fetch x86 build
        uses: actions/download-artifact@v2
        with:
          name: librealm-android-x86
          path: binary/android
      - name: Fetch x86_64 build
        uses: actions/download-artifact@v2
        with:
          name: librealm-android-x86_64
          path: binary/android
      - name: Fetch armeabi-v7a build
        uses: actions/download-artifact@v2
        with:
          name: librealm-android-armeabi-v7a
          path: binary/android
      - name: Fetch arm64-v8a build
        uses: actions/download-artifact@v2
        with:
          name: librealm-android-arm64-v8a
          path: binary/android

      - name: Store combined artifact
        uses: actions/upload-artifact@v2
        with:
          name: librealm-android
          path: binary/android
          retention-days: 1

      - name: Delete individual build artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            librealm-android-x86
            librealm-android-x86_64
            librealm-android-armeabi-v7a
            librealm-android-arm64-v8a

# Dart jobs

  tests-dart:
    runs-on: ${{ matrix.platform == 'linux' && 'ubuntu' || matrix.platform }}-${{ matrix.architecture || 'latest' }}
    name: Tests ${{ matrix.platform }} ${{ matrix.architecture }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos
          - platform: macos
            architecture: arm
          - platform: windows
          - platform: linux
    env:
      BAAS_CLUSTER: ${{ needs.deploy-cluster.outputs.clusterName }}
      BAAS_DIFFERENTIATOR: dart-${{ matrix.platform }}${{ matrix.architecture && format('-{0}', matrix.architecture) || '' }}
    needs:
      - baas-matrix
      - deploy-cluster
      - build-native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Cleanup Workspace
        run: git clean -fdx

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-${{ matrix.platform }}
          path: binary/${{ matrix.platform }}

      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
          architecture: ${{ matrix.architecture == 'arm' && 'arm64' || 'x64'}}

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: ${{ matrix.architecture == 'arm' && 'arch -arm64 ' || '' }}dart test -r expanded -j 1 --test-randomize-ordering-seed random

# Flutter jobs

  flutter-desktop:
    runs-on: ${{ matrix.platform == 'linux' && 'ubuntu' || matrix.platform }}-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ 'macos', 'windows', 'linux']
    name: Flutter ${{ matrix.platform }}
    env:
      BAAS_CLUSTER: ${{ needs.deploy-cluster.outputs.clusterName }}
      BAAS_DIFFERENTIATOR: flutter-${{ matrix.platform }}
    needs:
      - baas-matrix
      - deploy-cluster
      - build-native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Setup GTK
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev xvfb

      - name: Setup Ninja
        if: ${{ matrix.platform == 'linux' }}
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-${{ matrix.platform }}
          path: binary/${{ matrix.platform }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Enable Flutter Desktop support
        run: flutter config --enable-${{ matrix.platform }}-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: ${{ matrix.platform == 'linux' && 'xvfb-run ' || '' }}flutter drive -d ${{ matrix.platform }} --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

  flutter-ios:
    runs-on: macos-latest
    name: Flutter Tests iOS
    env:
      BAAS_CLUSTER: ${{ needs.deploy-cluster.outputs.clusterName }}
      BAAS_DIFFERENTIATOR: flutter-ios
    needs:
      - baas-matrix
      - deploy-cluster
      - build-ios-xcframework
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Enable ccache
        run: echo "PATH=/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH" >> $GITHUB_ENV

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios
          path: binary/ios

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Launch Simulator
        uses: futureware-tech/simulator-action@v1
        with:
          model: 'iPhone 8'
          os: 'iOS'
          os_version: '>= 14.0'

      - name: Run tests on iOS Simulator
        run: |
          flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
        working-directory: ./flutter/realm_flutter/tests

  flutter-android:
    runs-on: macos-latest
    name: Flutter Tests Android
    env:
      BAAS_CLUSTER: ${{ needs.deploy-cluster.outputs.clusterName }}
      BAAS_DIFFERENTIATOR: flutter-android
    needs:
      - baas-matrix
      - deploy-cluster
      - build-android-combined
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-android
          path: binary/android

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      # TODO: move this to device farm
      - name: Setup Android Emulator cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: Create Android Emulator and generate snapshot for caching
        if: ${{ steps.avd-cache.outputs.cache-hit != 'true' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          arch: x86
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          script: echo "Generated Emulator snapshot for caching."

      - name: Run tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          api-level: 29
          ndk: 21.0.6113669
          arch: x86
          cmake: 3.10.2.4988404
          script: flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
          working-directory: ./flutter/realm_flutter/tests

# Generator jobs

  generator:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    name: Generator Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Delete generated files
        run: find . -name "*.g.dart" -not -path "./generator/*" -delete
        shell: bash

      - name: Run generator in realm-dart repo
        run: |
          dart pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Run generator in realm_flutter/example
        run: |
          dart pub get
          dart run build_runner build --delete-conflicting-outputs
        working-directory: ./flutter/realm_flutter/example/

      - name: Install LLVM
        run: sudo apt update && sudo apt-get install -y libclang-dev
        if: ${{ matrix.os == 'ubuntu' }}

      - name: Run ffigen
        run: dart run ffigen --config config.yaml
        working-directory: ./ffigen

      - name: Validate there are no uncommitted changes
        run: |
          changedFiles=$(git --no-pager diff -w)
          if [ "$changedFiles" ]; then
            git --no-pager diff -w
            exit 1
          fi
        shell: bash

      - name: Run generator tests
        run: |
          dart pub get
          dart test --reporter expanded --coverage ./coverage/ --test-randomize-ordering-seed random
        working-directory: ./generator/

      - name: Generate generator coverage report
        if: ${{ false && matrix.os == 'ubuntu' }}
        run: |
          dart run coverage:format_coverage \
            --in coverage/ \
            --out ./coverage/lcov.info \
            --check-ignore \
            --lcov \
            --packages .packages \
            --report-on lib
        working-directory: ./generator/

      - name: Publish Generator Coverage
        if: ${{ false && matrix.os == 'ubuntu' }}
        id: publish-generator-coverage
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: realm_generator
          path-to-lcov: ./generator/coverage/lcov.info
        continue-on-error: true

      - name: Output Coveralls response
        if: ${{ false && matrix.os == 'ubuntu' }}
        run: echo ${{ steps.publish-generator-coverage.outputs.coveralls-api-result }}
