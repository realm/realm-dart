name: PR Build

on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+**' # matches tags like number(s).number(s).number(s)(any) for ex: 1.0.0 and also 1.0.0+beta
  pull_request:
env:
  REALM_CI: true

jobs:
# Linux jobs

  baas-linux:
    runs-on: ubuntu-latest
    name: BaaS Linux
    outputs:
      clusterName: ${{ steps.deploy-mdb-apps.outputs.clusterName }}
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - uses: realm/ci-actions/mdb-realm/deployApps@fac1d6958f03d71de743305ce3ab27594efbe7b7
        id: deploy-mdb-apps
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: dart-linux
      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
      - name: Deploy Apps
        run: |
          dart run realm_dart deploy-apps \
            --baas-url ${{ secrets.REALM_QA_URL }} \
            --atlas-cluster ${{ steps.deploy-mdb-apps.outputs.clusterName }} \
            --api-key ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }} \
            --private-api-key ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }} \
            --project-id ${{ secrets.ATLAS_QA_PROJECT_ID }}
  build-linux:
    runs-on: ubuntu-latest
    name: Build Linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build Realm for Linux
        run: ./scripts/build-linux.sh
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-linux
          path: binary/**
          retention-days: 1
  tests-linux:
    runs-on: ubuntu-latest
    name: Tests Linux
    env:
      BAAS_URL: ${{ secrets.REALM_QA_URL }}
      BAAS_CLUSTER: ${{ needs.baas-linux.outputs.clusterName }}
      BAAS_API_KEY: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY }}
      BAAS_PRIVATE_API_KEY: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
      BAAS_PROJECT_ID: ${{ secrets.ATLAS_QA_PROJECT_ID}}
    needs:
      - baas-linux
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-linux
          path: binary
      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
      - name: Install dependencies
        run: dart pub get
      - name: Run tests
        run: dart test -r expanded -j 1 --test-randomize-ordering-seed random

      # TODO: these should go away once we have a proper release workflow
      - name: Archive binary
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        run: |
          echo "ARCHIVE_PATH=$(pwd)/binary/linux.tar.gz" >> $GITHUB_ENV
          dart run realm_dart archive --source-dir $(pwd)/binary/linux --output-file $ARCHIVE_PATH
      - name: Release artifacts
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates:  true
          artifactErrorsFailBuild: true
          draft: true
          omitNameDuringUpdate: true
          prerelease: false
          omitPrereleaseDuringUpdate: true
          artifacts: ${{ env.ARCHIVE_PATH }}
          body: "ADD RELEASE NOTES"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
  flutter-linux:
    runs-on: ubuntu-latest
    name: Flutter Tests Linux
    needs:
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Setup GTK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev xvfb
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-linux
          path: binary
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Enable Flutter Desktop support
        run: flutter config --enable-linux-desktop
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: xvfb-run flutter drive -d linux --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests
  cleanup-linux:
    runs-on: ubuntu-latest
    name: Cleanup Linux
    needs:
      - tests-linux
    if: always()
    timeout-minutes: 5
    steps:
      - uses: realm/ci-actions/mdb-realm/cleanup@fac1d6958f03d71de743305ce3ab27594efbe7b7
        with:
          realmUrl: ${{ secrets.REALM_QA_URL }}
          atlasUrl: ${{ secrets.ATLAS_QA_URL }}
          projectId: ${{ secrets.ATLAS_QA_PROJECT_ID}}
          apiKey: ${{ secrets.ATLAS_QA_PUBLIC_API_KEY}}
          privateApiKey: ${{ secrets.ATLAS_QA_PRIVATE_API_KEY }}
          differentiator: dart-linux

# macOS jobs
  build-macos:
    runs-on: macos-latest
    name: Build macOS
    env:
      REALM_USE_CCACHE: "TRUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-macos
      - name: Enable ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      - name: Build Realm for macOS
        run: ./scripts/build-macos.sh
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-macos
          path: binary/**
          retention-days: 1
  tests-macos:
    runs-on: macos-latest
    name: Tests macOS
    needs:
      - build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-macos
          path: binary
      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
      - name: Install dependencies
        run: dart pub get
      - name: Run tests
        run: dart test -r expanded -j 1 --test-randomize-ordering-seed random

      # TODO: these should go away once we have a proper release workflow
      - name: Archive binary
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        run: |
          echo "ARCHIVE_PATH=$(pwd)/binary/macos.tar.gz" >> $GITHUB_ENV
          dart run realm_dart archive --source-dir $(pwd)/binary/macos --output-file $ARCHIVE_PATH
      - name: Release artifacts
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates:  true
          artifactErrorsFailBuild: true
          draft: true
          omitNameDuringUpdate: true
          prerelease: false
          omitPrereleaseDuringUpdate: true
          artifacts: ${{ env.ARCHIVE_PATH }}
          body: "ADD RELEASE NOTES"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
  flutter-macos:
    runs-on: macos-latest
    name: Flutter Tests macOS
    needs:
      - build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-macos
          path: binary
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Enable Flutter Desktop support
        run: flutter config --enable-macos-desktop
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: flutter drive -d macos --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

# Windows jobs
  build-windows:
    # TODO: build on windows-latest
    runs-on: windows-2019
    name: Build Windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build Realm for Windows
        run: scripts\build.bat
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-windows
          path: binary/**
          retention-days: 1
  tests-windows:
    runs-on: windows-latest
    name: Tests Windows
    needs:
      - build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-windows
          path: binary
      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
      - name: Install dependencies
        run: dart pub get
      - name: Run tests
        run: |
          dart test -r expanded -j 1 --test-randomize-ordering-seed random

      # TODO: these should go away once we have a proper release workflow
      - name: Archive binary
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        run: |
          echo "ARCHIVE_PATH=$(pwd)\\binary\\windows.tar.gz" >> $env:GITHUB_ENV
          echo "ARCHIVE_SOURCE_PATH=$(pwd)\\binary\\windows" >> $env:GITHUB_ENV
          dart run realm_dart archive --source-dir ${{ env.ARCHIVE_SOURCE_PATH }} --output-file ${{ env.ARCHIVE_PATH }}
      - name: Release artifacts
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates:  true
          artifactErrorsFailBuild: true
          draft: true
          omitNameDuringUpdate: true
          prerelease: false
          omitPrereleaseDuringUpdate: true
          artifacts: ${{ env.ARCHIVE_PATH }}
          body: "ADD RELEASE NOTES"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
  flutter-windows:
    # TODO: build on windows-latest
    runs-on: windows-2019
    name: Flutter Tests Windows
    needs:
      - build-windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-windows
          path: binary
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Enable Flutter Desktop support
        run: flutter config --enable-windows-desktop
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        run: flutter drive -d windows --target=test_driver/app.dart --suppress-analytics --dart-entrypoint-args="" #--verbose #-a="Some test name"
        working-directory: ./flutter/realm_flutter/tests

# iOS jobs
  build-ios:
    runs-on: macos-latest
    name: Build iOS
    env:
      REALM_USE_CCACHE: "TRUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-ios
      - name: Enable ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      - name: Build Realm for iOS
        # empty (all) for tags, simulator for PR/main builds
        run: ./scripts/build-ios.sh ${{ (github.event_name == 'push' && github.ref_type == 'tag' && '') || 'simulator' }}
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-ios
          path: binary/**
          retention-days: 1
  flutter-ios:
    runs-on: macos-latest
    name: Flutter Tests iOS
    env:
      REALM_USE_CCACHE: "TRUE"
    needs:
      - build-ios
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Enable ccache
        run: echo "PATH=/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-ios
          path: binary
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
      - name: Launch Simulator
        uses: futureware-tech/simulator-action@v1
        with:
          model: 'iPhone 8'
          os: 'iOS'
          os_version: '>= 14.0'
      - name: Run tests on iOS Simulator
        run: |
          flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
        working-directory: ./flutter/realm_flutter/tests

      # TODO: these should go away once we have a proper release workflow
      - name: Archive binary
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        run: |
          echo "ARCHIVE_PATH=$(pwd)/binary/ios.tar.gz" >> $GITHUB_ENV
          dart run realm_dart archive --source-dir $(pwd)/binary/ios --output-file $ARCHIVE_PATH
      - name: Release artifacts
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates:  true
          artifactErrorsFailBuild: true
          draft: true
          omitNameDuringUpdate: true
          prerelease: false
          omitPrereleaseDuringUpdate: true
          artifacts: ${{ env.ARCHIVE_PATH }}
          body: "ADD RELEASE NOTES"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

# Android jobs
  build-android:
    runs-on: ubuntu-latest
    name: Build Android
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build Realm for Android
        # all for tags, empty (implicitly x86) for PR/main builds
        run: |
          export ANDROID_NDK=$ANDROID_NDK_HOME
          ./scripts/build-android.sh ${{ (github.event_name == 'push' && github.ref_type == 'tag' && 'all') || '' }}
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: librealm-android
          path: binary/**
          retention-days: 1
  flutter-android:
    runs-on: macos-latest
    name: Flutter Tests Android
    needs:
      - build-android
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-android
          path: binary
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get

      # TODO: move this to device farm
      - name: Setup Android Emulator cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29
      - name: Create Android Emulator and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          arch: x86
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          script: echo "Generated Emulator snapshot for caching."
      - name: Run tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          api-level: 29
          ndk: 21.0.6113669
          arch: x86
          cmake: 3.10.2.4988404
          script: flutter drive --target=test_driver/app.dart --dart-define=testName="" --suppress-analytics
          working-directory: ./flutter/realm_flutter/tests

      # TODO: these should go away once we have a proper release workflow
      - name: Archive binary
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        run: |
          echo "ARCHIVE_PATH=$(pwd)/binary/android.tar.gz" >> $GITHUB_ENV
          dart run realm_dart archive --source-dir $(pwd)/binary/android --output-file $ARCHIVE_PATH
      - name: Release artifacts
        if: ${{ success() && github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates:  true
          artifactErrorsFailBuild: true
          draft: true
          omitNameDuringUpdate: true
          prerelease: false
          omitPrereleaseDuringUpdate: true
          artifacts: ${{ env.ARCHIVE_PATH }}
          body: "ADD RELEASE NOTES"
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

# generator
  generator:
    runs-on: ubuntu-latest
    name: Generator Tests
    needs:
      - build-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
      - name : Setup Dart SDK
        uses: dart-lang/setup-dart@main
        with:
          sdk: stable
      - name: Install generator dependencies
        run: dart pub get
        working-directory: ./generator/
      - name: Run generator tests
        run: dart test --reporter expanded --coverage ./coverage/ --test-randomize-ordering-seed random
        working-directory: ./generator/
      - name: Install realm_dart dependencies
        run: dart pub get
      - name: Run generator in realm-dart repo
        run: |
          find . -name "*.g.dart" -delete
          dart run build_runner build --delete-conflicting-outputs

      # TODO: fail the build if there are uncommitted changes as
      # that would mean the generated files weren't pushed.
      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: librealm-linux
          path: binary
      - name: Run realm_dart tests
        run: dart test -r expanded -j 1 --test-randomize-ordering-seed random
      - name: Generate generator coverage report
        run: |
          dart run coverage:format_coverage \
            --in coverage/ \
            --out ./coverage/lcov.info \
            --check-ignore \
            --lcov \
            --packages .packages \
            --report-on lib
        working-directory: ./generator/
      - name: Publish Generator Coverage
        id: publish-generator-coverage
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: realm_generator
          path-to-lcov: ./generator/coverage/lcov.info
        continue-on-error: true
      - name: Output Coveralls response
        if: ${{ success() }}
        run: echo ${{ steps.publish-generator-coverage.outputs.coveralls-api-result }}
        working-directory: ./generator/
