// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'realm_set.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Car extends _Car with RealmEntity, RealmObjectBase, RealmObject {
  Car(
    String make,
  ) {
    RealmObjectBase.set(this, 'make', make);
  }

  Car._();

  @override
  String get make => RealmObjectBase.get<String>(this, 'make') as String;
  @override
  set make(String value) => RealmObjectBase.set(this, 'make', value);

  @override
  Stream<RealmObjectChanges<Car>> get changes =>
      RealmObjectBase.getChanges<Car>(this);

  @override
  Car freeze() => RealmObjectBase.freezeObject<Car>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'make': make.toEJson(),
    };
  }

  static EJsonValue _toEJson(Car value) => value.toEJson();
  static Car _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'make': EJsonValue make,
      } =>
        Car(
          fromEJson(make),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Car._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, Car, 'Car', [
      SchemaProperty('make', RealmPropertyType.string, primaryKey: true),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}

class RealmSets extends _RealmSets
    with RealmEntity, RealmObjectBase, RealmObject {
  RealmSets(
    int key, {
    Set<bool> boolSet = const {},
    Set<bool?> nullableBoolSet = const {},
    Set<int> intSet = const {},
    Set<int?> nullableintSet = const {},
    Set<String> stringSet = const {},
    Set<String?> nullablestringSet = const {},
    Set<double> doubleSet = const {},
    Set<double?> nullabledoubleSet = const {},
    Set<DateTime> dateTimeSet = const {},
    Set<DateTime?> nullabledateTimeSet = const {},
    Set<ObjectId> objectIdSet = const {},
    Set<ObjectId?> nullableobjectIdSet = const {},
    Set<Uuid> uuidSet = const {},
    Set<Uuid?> nullableuuidSet = const {},
    Set<RealmValue> realmValueSet = const {},
    Set<Car> realmObjectsSet = const {},
  }) {
    RealmObjectBase.set(this, 'key', key);
    RealmObjectBase.set<RealmSet<bool>>(
        this, 'boolSet', RealmSet<bool>(boolSet));
    RealmObjectBase.set<RealmSet<bool?>>(
        this, 'nullableBoolSet', RealmSet<bool?>(nullableBoolSet));
    RealmObjectBase.set<RealmSet<int>>(this, 'intSet', RealmSet<int>(intSet));
    RealmObjectBase.set<RealmSet<int?>>(
        this, 'nullableintSet', RealmSet<int?>(nullableintSet));
    RealmObjectBase.set<RealmSet<String>>(
        this, 'stringSet', RealmSet<String>(stringSet));
    RealmObjectBase.set<RealmSet<String?>>(
        this, 'nullablestringSet', RealmSet<String?>(nullablestringSet));
    RealmObjectBase.set<RealmSet<double>>(
        this, 'doubleSet', RealmSet<double>(doubleSet));
    RealmObjectBase.set<RealmSet<double?>>(
        this, 'nullabledoubleSet', RealmSet<double?>(nullabledoubleSet));
    RealmObjectBase.set<RealmSet<DateTime>>(
        this, 'dateTimeSet', RealmSet<DateTime>(dateTimeSet));
    RealmObjectBase.set<RealmSet<DateTime?>>(
        this, 'nullabledateTimeSet', RealmSet<DateTime?>(nullabledateTimeSet));
    RealmObjectBase.set<RealmSet<ObjectId>>(
        this, 'objectIdSet', RealmSet<ObjectId>(objectIdSet));
    RealmObjectBase.set<RealmSet<ObjectId?>>(
        this, 'nullableobjectIdSet', RealmSet<ObjectId?>(nullableobjectIdSet));
    RealmObjectBase.set<RealmSet<Uuid>>(
        this, 'uuidSet', RealmSet<Uuid>(uuidSet));
    RealmObjectBase.set<RealmSet<Uuid?>>(
        this, 'nullableuuidSet', RealmSet<Uuid?>(nullableuuidSet));
    RealmObjectBase.set<RealmSet<RealmValue>>(
        this, 'realmValueSet', RealmSet<RealmValue>(realmValueSet));
    RealmObjectBase.set<RealmSet<Car>>(
        this, 'realmObjectsSet', RealmSet<Car>(realmObjectsSet));
  }

  RealmSets._();

  @override
  int get key => RealmObjectBase.get<int>(this, 'key') as int;
  @override
  set key(int value) => RealmObjectBase.set(this, 'key', value);

  @override
  RealmSet<bool> get boolSet =>
      RealmObjectBase.get<bool>(this, 'boolSet') as RealmSet<bool>;
  @override
  set boolSet(covariant RealmSet<bool> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<bool?> get nullableBoolSet =>
      RealmObjectBase.get<bool?>(this, 'nullableBoolSet') as RealmSet<bool?>;
  @override
  set nullableBoolSet(covariant RealmSet<bool?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<int> get intSet =>
      RealmObjectBase.get<int>(this, 'intSet') as RealmSet<int>;
  @override
  set intSet(covariant RealmSet<int> value) => throw RealmUnsupportedSetError();

  @override
  RealmSet<int?> get nullableintSet =>
      RealmObjectBase.get<int?>(this, 'nullableintSet') as RealmSet<int?>;
  @override
  set nullableintSet(covariant RealmSet<int?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<String> get stringSet =>
      RealmObjectBase.get<String>(this, 'stringSet') as RealmSet<String>;
  @override
  set stringSet(covariant RealmSet<String> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<String?> get nullablestringSet =>
      RealmObjectBase.get<String?>(this, 'nullablestringSet')
          as RealmSet<String?>;
  @override
  set nullablestringSet(covariant RealmSet<String?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<double> get doubleSet =>
      RealmObjectBase.get<double>(this, 'doubleSet') as RealmSet<double>;
  @override
  set doubleSet(covariant RealmSet<double> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<double?> get nullabledoubleSet =>
      RealmObjectBase.get<double?>(this, 'nullabledoubleSet')
          as RealmSet<double?>;
  @override
  set nullabledoubleSet(covariant RealmSet<double?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<DateTime> get dateTimeSet =>
      RealmObjectBase.get<DateTime>(this, 'dateTimeSet') as RealmSet<DateTime>;
  @override
  set dateTimeSet(covariant RealmSet<DateTime> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<DateTime?> get nullabledateTimeSet =>
      RealmObjectBase.get<DateTime?>(this, 'nullabledateTimeSet')
          as RealmSet<DateTime?>;
  @override
  set nullabledateTimeSet(covariant RealmSet<DateTime?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<ObjectId> get objectIdSet =>
      RealmObjectBase.get<ObjectId>(this, 'objectIdSet') as RealmSet<ObjectId>;
  @override
  set objectIdSet(covariant RealmSet<ObjectId> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<ObjectId?> get nullableobjectIdSet =>
      RealmObjectBase.get<ObjectId?>(this, 'nullableobjectIdSet')
          as RealmSet<ObjectId?>;
  @override
  set nullableobjectIdSet(covariant RealmSet<ObjectId?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<Uuid> get uuidSet =>
      RealmObjectBase.get<Uuid>(this, 'uuidSet') as RealmSet<Uuid>;
  @override
  set uuidSet(covariant RealmSet<Uuid> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<Uuid?> get nullableuuidSet =>
      RealmObjectBase.get<Uuid?>(this, 'nullableuuidSet') as RealmSet<Uuid?>;
  @override
  set nullableuuidSet(covariant RealmSet<Uuid?> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<RealmValue> get realmValueSet =>
      RealmObjectBase.get<RealmValue>(this, 'realmValueSet')
          as RealmSet<RealmValue>;
  @override
  set realmValueSet(covariant RealmSet<RealmValue> value) =>
      throw RealmUnsupportedSetError();

  @override
  RealmSet<Car> get realmObjectsSet =>
      RealmObjectBase.get<Car>(this, 'realmObjectsSet') as RealmSet<Car>;
  @override
  set realmObjectsSet(covariant RealmSet<Car> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<RealmSets>> get changes =>
      RealmObjectBase.getChanges<RealmSets>(this);

  @override
  RealmSets freeze() => RealmObjectBase.freezeObject<RealmSets>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'key': key.toEJson(),
      'boolSet': boolSet.toEJson(),
      'nullableBoolSet': nullableBoolSet.toEJson(),
      'intSet': intSet.toEJson(),
      'nullableintSet': nullableintSet.toEJson(),
      'stringSet': stringSet.toEJson(),
      'nullablestringSet': nullablestringSet.toEJson(),
      'doubleSet': doubleSet.toEJson(),
      'nullabledoubleSet': nullabledoubleSet.toEJson(),
      'dateTimeSet': dateTimeSet.toEJson(),
      'nullabledateTimeSet': nullabledateTimeSet.toEJson(),
      'objectIdSet': objectIdSet.toEJson(),
      'nullableobjectIdSet': nullableobjectIdSet.toEJson(),
      'uuidSet': uuidSet.toEJson(),
      'nullableuuidSet': nullableuuidSet.toEJson(),
      'realmValueSet': realmValueSet.toEJson(),
      'realmObjectsSet': realmObjectsSet.toEJson(),
    };
  }

  static EJsonValue _toEJson(RealmSets value) => value.toEJson();
  static RealmSets _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'key': EJsonValue key,
        'boolSet': EJsonValue boolSet,
        'nullableBoolSet': EJsonValue nullableBoolSet,
        'intSet': EJsonValue intSet,
        'nullableintSet': EJsonValue nullableintSet,
        'stringSet': EJsonValue stringSet,
        'nullablestringSet': EJsonValue nullablestringSet,
        'doubleSet': EJsonValue doubleSet,
        'nullabledoubleSet': EJsonValue nullabledoubleSet,
        'dateTimeSet': EJsonValue dateTimeSet,
        'nullabledateTimeSet': EJsonValue nullabledateTimeSet,
        'objectIdSet': EJsonValue objectIdSet,
        'nullableobjectIdSet': EJsonValue nullableobjectIdSet,
        'uuidSet': EJsonValue uuidSet,
        'nullableuuidSet': EJsonValue nullableuuidSet,
        'realmValueSet': EJsonValue realmValueSet,
        'realmObjectsSet': EJsonValue realmObjectsSet,
      } =>
        RealmSets(
          fromEJson(key),
          boolSet: fromEJson(boolSet),
          nullableBoolSet: fromEJson(nullableBoolSet),
          intSet: fromEJson(intSet),
          nullableintSet: fromEJson(nullableintSet),
          stringSet: fromEJson(stringSet),
          nullablestringSet: fromEJson(nullablestringSet),
          doubleSet: fromEJson(doubleSet),
          nullabledoubleSet: fromEJson(nullabledoubleSet),
          dateTimeSet: fromEJson(dateTimeSet),
          nullabledateTimeSet: fromEJson(nullabledateTimeSet),
          objectIdSet: fromEJson(objectIdSet),
          nullableobjectIdSet: fromEJson(nullableobjectIdSet),
          uuidSet: fromEJson(uuidSet),
          nullableuuidSet: fromEJson(nullableuuidSet),
          realmValueSet: fromEJson(realmValueSet),
          realmObjectsSet: fromEJson(realmObjectsSet),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(RealmSets._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, RealmSets, 'RealmSets', [
      SchemaProperty('key', RealmPropertyType.int, primaryKey: true),
      SchemaProperty('boolSet', RealmPropertyType.bool,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullableBoolSet', RealmPropertyType.bool,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('intSet', RealmPropertyType.int,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullableintSet', RealmPropertyType.int,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('stringSet', RealmPropertyType.string,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullablestringSet', RealmPropertyType.string,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('doubleSet', RealmPropertyType.double,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullabledoubleSet', RealmPropertyType.double,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('dateTimeSet', RealmPropertyType.timestamp,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullabledateTimeSet', RealmPropertyType.timestamp,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('objectIdSet', RealmPropertyType.objectid,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullableobjectIdSet', RealmPropertyType.objectid,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('uuidSet', RealmPropertyType.uuid,
          collectionType: RealmCollectionType.set),
      SchemaProperty('nullableuuidSet', RealmPropertyType.uuid,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('realmValueSet', RealmPropertyType.mixed,
          optional: true, collectionType: RealmCollectionType.set),
      SchemaProperty('realmObjectsSet', RealmPropertyType.object,
          linkTarget: 'Car', collectionType: RealmCollectionType.set),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}