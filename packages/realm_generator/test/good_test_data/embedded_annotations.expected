// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'embedded_annotations.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Parent extends _Parent with RealmEntity, RealmObjectBase, RealmObject {
  Parent({
    Child1? child,
    Iterable<Child1> children = const [],
  }) {
    RealmObjectBase.set(this, 'single child', child);
    RealmObjectBase.set<RealmList<Child1>>(
        this, 'CHILDREN', RealmList<Child1>(children));
  }

  Parent._();

  @override
  Child1? get child =>
      RealmObjectBase.get<Child1>(this, 'single child') as Child1?;
  @override
  set child(covariant Child1? value) =>
      RealmObjectBase.set(this, 'single child', value);

  @override
  RealmList<Child1> get children =>
      RealmObjectBase.get<Child1>(this, 'CHILDREN') as RealmList<Child1>;
  @override
  set children(covariant RealmList<Child1> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<Parent>> get changes =>
      RealmObjectBase.getChanges<Parent>(this);

  @override
  Parent freeze() => RealmObjectBase.freezeObject<Parent>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'single child': child.toEJson(),
      'CHILDREN': children.toEJson(),
    };
  }

  static EJsonValue _toEJson(Parent value) => value.toEJson();
  static Parent _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'single child': EJsonValue child,
        'CHILDREN': EJsonValue children,
      } =>
        Parent(
          child: fromEJson(child),
          children: fromEJson(children),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Parent._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, Parent, 'Parent', [
      SchemaProperty('child', RealmPropertyType.object,
          mapTo: 'single child', optional: true, linkTarget: 'MySuperChild'),
      SchemaProperty('children', RealmPropertyType.object,
          mapTo: 'CHILDREN',
          linkTarget: 'MySuperChild',
          collectionType: RealmCollectionType.list),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}

class Child1 extends _Child1 with RealmEntity, RealmObjectBase, EmbeddedObject {
  Child1(
    String value,
    String indexedString, {
    Parent? linkToParent,
  }) {
    RealmObjectBase.set(this, '_value', value);
    RealmObjectBase.set(this, '_parent', linkToParent);
    RealmObjectBase.set(this, 'indexedString', indexedString);
  }

  Child1._();

  @override
  String get value => RealmObjectBase.get<String>(this, '_value') as String;
  @override
  set value(String value) => RealmObjectBase.set(this, '_value', value);

  @override
  Parent? get linkToParent =>
      RealmObjectBase.get<Parent>(this, '_parent') as Parent?;
  @override
  set linkToParent(covariant Parent? value) =>
      RealmObjectBase.set(this, '_parent', value);

  @override
  String get indexedString =>
      RealmObjectBase.get<String>(this, 'indexedString') as String;
  @override
  set indexedString(String value) =>
      RealmObjectBase.set(this, 'indexedString', value);

  @override
  Stream<RealmObjectChanges<Child1>> get changes =>
      RealmObjectBase.getChanges<Child1>(this);

  @override
  Child1 freeze() => RealmObjectBase.freezeObject<Child1>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      '_value': value.toEJson(),
      '_parent': linkToParent.toEJson(),
      'indexedString': indexedString.toEJson(),
    };
  }

  static EJsonValue _toEJson(Child1 value) => value.toEJson();
  static Child1 _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        '_value': EJsonValue value,
        '_parent': EJsonValue linkToParent,
        'indexedString': EJsonValue indexedString,
      } =>
        Child1(
          fromEJson(value),
          fromEJson(indexedString),
          linkToParent: fromEJson(linkToParent),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Child1._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.embeddedObject, Child1, 'MySuperChild', [
      SchemaProperty('value', RealmPropertyType.string, mapTo: '_value'),
      SchemaProperty('linkToParent', RealmPropertyType.object,
          mapTo: '_parent', optional: true, linkTarget: 'Parent'),
      SchemaProperty('indexedString', RealmPropertyType.string,
          indexType: RealmIndexType.regular),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}
