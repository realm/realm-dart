// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'another_mapto.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class MappedToo extends _MappedToo
    with RealmEntity, RealmObjectBase, RealmObject {
  MappedToo({
    Original? singleLink,
    Iterable<Original> listLink = const [],
  }) {
    RealmObjectBase.set(this, 'singleLink', singleLink);
    RealmObjectBase.set<RealmList<Original>>(
        this, 'listLink', RealmList<Original>(listLink));
  }

  MappedToo._();

  @override
  Original? get singleLink =>
      RealmObjectBase.get<Original>(this, 'singleLink') as Original?;
  @override
  set singleLink(covariant Original? value) =>
      RealmObjectBase.set(this, 'singleLink', value);

  @override
  RealmList<Original> get listLink =>
      RealmObjectBase.get<Original>(this, 'listLink') as RealmList<Original>;
  @override
  set listLink(covariant RealmList<Original> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<MappedToo>> get changes =>
      RealmObjectBase.getChanges<MappedToo>(this);

  @override
  MappedToo freeze() => RealmObjectBase.freezeObject<MappedToo>(this);

  static EJsonValue _encodeMappedToo(MappedToo value) {
    return <String, dynamic>{
      'singleLink': toEJson(value.singleLink),
      'listLink': toEJson(value.listLink),
    };
  }

  static MappedToo _decodeMappedToo(EJsonValue ejson) {
    return switch (ejson) {
      {
        'singleLink': EJsonValue singleLink,
        'listLink': EJsonValue listLink,
      } =>
        MappedToo(
          singleLink: fromEJson(singleLink),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(MappedToo._);
    register(_encodeMappedToo, _decodeMappedToo);
    return const SchemaObject(
        ObjectType.realmObject, MappedToo, 'this is also mapped', [
      SchemaProperty('singleLink', RealmPropertyType.object,
          optional: true, linkTarget: 'another type'),
      SchemaProperty('listLink', RealmPropertyType.object,
          linkTarget: 'another type', collectionType: RealmCollectionType.list),
    ]);
  }();
}
