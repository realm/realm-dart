// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'mapto.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Original extends $Original
    with RealmEntity, RealmObjectBase, RealmObject {
  static var _defaultsSet = false;

  Original({
    int primitiveProperty = 0,
    Original? objectProperty,
    Iterable<Original> listProperty = const [],
  }) {
    if (!_defaultsSet) {
      _defaultsSet = RealmObjectBase.setDefaults<Original>({
        'remapped primitive': 0,
      });
    }
    RealmObjectBase.set(this, 'remapped primitive', primitiveProperty);
    RealmObjectBase.set(this, 'remapped object', objectProperty);
    RealmObjectBase.set<RealmList<Original>>(
        this, 'remapped list', RealmList<Original>(listProperty));
  }

  Original._();

  @override
  int get primitiveProperty =>
      RealmObjectBase.get<int>(this, 'remapped primitive') as int;
  @override
  set primitiveProperty(int value) =>
      RealmObjectBase.set(this, 'remapped primitive', value);

  @override
  Original? get objectProperty =>
      RealmObjectBase.get<Original>(this, 'remapped object') as Original?;
  @override
  set objectProperty(covariant Original? value) =>
      RealmObjectBase.set(this, 'remapped object', value);

  @override
  RealmList<Original> get listProperty =>
      RealmObjectBase.get<Original>(this, 'remapped list')
          as RealmList<Original>;
  @override
  set listProperty(covariant RealmList<Original> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<Original>> get changes =>
      RealmObjectBase.getChanges<Original>(this);

  @override
  Stream<RealmObjectChanges<Original>> changesFor([List<String>? keyPaths]) =>
      RealmObjectBase.getChangesFor<Original>(this, keyPaths);

  @override
  Original freeze() => RealmObjectBase.freezeObject<Original>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'remapped primitive': primitiveProperty.toEJson(),
      'remapped object': objectProperty.toEJson(),
      'remapped list': listProperty.toEJson(),
    };
  }

  static EJsonValue _toEJson(Original value) => value.toEJson();
  static Original _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'remapped primitive': EJsonValue primitiveProperty,
        'remapped object': EJsonValue objectProperty,
        'remapped list': EJsonValue listProperty,
      } =>
        Original(
          primitiveProperty: fromEJson(primitiveProperty),
          objectProperty: fromEJson(objectProperty),
          listProperty: fromEJson(listProperty),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Original._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, Original, 'another type', [
      SchemaProperty('primitiveProperty', RealmPropertyType.int,
          mapTo: 'remapped primitive'),
      SchemaProperty('objectProperty', RealmPropertyType.object,
          mapTo: 'remapped object', optional: true, linkTarget: 'another type'),
      SchemaProperty('listProperty', RealmPropertyType.object,
          mapTo: 'remapped list',
          linkTarget: 'another type',
          collectionType: RealmCollectionType.list),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}
