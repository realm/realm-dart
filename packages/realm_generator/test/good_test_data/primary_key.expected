// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'primary_key.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class IntPK extends _IntPK with RealmEntity, RealmObjectBase, RealmObject {
  IntPK(
    int id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  IntPK._();

  @override
  int get id => RealmObjectBase.get<int>(this, 'id') as int;
  @override
  set id(int value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<IntPK>> get changes =>
      RealmObjectBase.getChanges<IntPK>(this);

  @override
  IntPK freeze() => RealmObjectBase.freezeObject<IntPK>(this);

  static EJsonValue _encodeIntPK(IntPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static IntPK _decodeIntPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        IntPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(IntPK._);
    register(_encodeIntPK, _decodeIntPK);
    return const SchemaObject(ObjectType.realmObject, IntPK, 'IntPK', [
      SchemaProperty('id', RealmPropertyType.int, primaryKey: true),
    ]);
  }();
}

class NullableIntPK extends _NullableIntPK
    with RealmEntity, RealmObjectBase, RealmObject {
  NullableIntPK(
    int? id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  NullableIntPK._();

  @override
  int? get id => RealmObjectBase.get<int>(this, 'id') as int?;
  @override
  set id(int? value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<NullableIntPK>> get changes =>
      RealmObjectBase.getChanges<NullableIntPK>(this);

  @override
  NullableIntPK freeze() => RealmObjectBase.freezeObject<NullableIntPK>(this);

  static EJsonValue _encodeNullableIntPK(NullableIntPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static NullableIntPK _decodeNullableIntPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        NullableIntPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(NullableIntPK._);
    register(_encodeNullableIntPK, _decodeNullableIntPK);
    return const SchemaObject(
        ObjectType.realmObject, NullableIntPK, 'NullableIntPK', [
      SchemaProperty('id', RealmPropertyType.int,
          optional: true, primaryKey: true),
    ]);
  }();
}

class StringPK extends _StringPK
    with RealmEntity, RealmObjectBase, RealmObject {
  StringPK(
    String id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  StringPK._();

  @override
  String get id => RealmObjectBase.get<String>(this, 'id') as String;
  @override
  set id(String value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<StringPK>> get changes =>
      RealmObjectBase.getChanges<StringPK>(this);

  @override
  StringPK freeze() => RealmObjectBase.freezeObject<StringPK>(this);

  static EJsonValue _encodeStringPK(StringPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static StringPK _decodeStringPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        StringPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(StringPK._);
    register(_encodeStringPK, _decodeStringPK);
    return const SchemaObject(ObjectType.realmObject, StringPK, 'StringPK', [
      SchemaProperty('id', RealmPropertyType.string, primaryKey: true),
    ]);
  }();
}

class NullableStringPK extends _NullableStringPK
    with RealmEntity, RealmObjectBase, RealmObject {
  NullableStringPK(
    String? id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  NullableStringPK._();

  @override
  String? get id => RealmObjectBase.get<String>(this, 'id') as String?;
  @override
  set id(String? value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<NullableStringPK>> get changes =>
      RealmObjectBase.getChanges<NullableStringPK>(this);

  @override
  NullableStringPK freeze() =>
      RealmObjectBase.freezeObject<NullableStringPK>(this);

  static EJsonValue _encodeNullableStringPK(NullableStringPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static NullableStringPK _decodeNullableStringPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        NullableStringPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(NullableStringPK._);
    register(_encodeNullableStringPK, _decodeNullableStringPK);
    return const SchemaObject(
        ObjectType.realmObject, NullableStringPK, 'NullableStringPK', [
      SchemaProperty('id', RealmPropertyType.string,
          optional: true, primaryKey: true),
    ]);
  }();
}

class ObjectIdPK extends _ObjectIdPK
    with RealmEntity, RealmObjectBase, RealmObject {
  ObjectIdPK(
    ObjectId id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  ObjectIdPK._();

  @override
  ObjectId get id => RealmObjectBase.get<ObjectId>(this, 'id') as ObjectId;
  @override
  set id(ObjectId value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<ObjectIdPK>> get changes =>
      RealmObjectBase.getChanges<ObjectIdPK>(this);

  @override
  ObjectIdPK freeze() => RealmObjectBase.freezeObject<ObjectIdPK>(this);

  static EJsonValue _encodeObjectIdPK(ObjectIdPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static ObjectIdPK _decodeObjectIdPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        ObjectIdPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(ObjectIdPK._);
    register(_encodeObjectIdPK, _decodeObjectIdPK);
    return const SchemaObject(
        ObjectType.realmObject, ObjectIdPK, 'ObjectIdPK', [
      SchemaProperty('id', RealmPropertyType.objectid, primaryKey: true),
    ]);
  }();
}

class NullableObjectIdPK extends _NullableObjectIdPK
    with RealmEntity, RealmObjectBase, RealmObject {
  NullableObjectIdPK(
    ObjectId? id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  NullableObjectIdPK._();

  @override
  ObjectId? get id => RealmObjectBase.get<ObjectId>(this, 'id') as ObjectId?;
  @override
  set id(ObjectId? value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<NullableObjectIdPK>> get changes =>
      RealmObjectBase.getChanges<NullableObjectIdPK>(this);

  @override
  NullableObjectIdPK freeze() =>
      RealmObjectBase.freezeObject<NullableObjectIdPK>(this);

  static EJsonValue _encodeNullableObjectIdPK(NullableObjectIdPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static NullableObjectIdPK _decodeNullableObjectIdPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        NullableObjectIdPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(NullableObjectIdPK._);
    register(_encodeNullableObjectIdPK, _decodeNullableObjectIdPK);
    return const SchemaObject(
        ObjectType.realmObject, NullableObjectIdPK, 'NullableObjectIdPK', [
      SchemaProperty('id', RealmPropertyType.objectid,
          optional: true, primaryKey: true),
    ]);
  }();
}

class UuidPK extends _UuidPK with RealmEntity, RealmObjectBase, RealmObject {
  UuidPK(
    Uuid id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  UuidPK._();

  @override
  Uuid get id => RealmObjectBase.get<Uuid>(this, 'id') as Uuid;
  @override
  set id(Uuid value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<UuidPK>> get changes =>
      RealmObjectBase.getChanges<UuidPK>(this);

  @override
  UuidPK freeze() => RealmObjectBase.freezeObject<UuidPK>(this);

  static EJsonValue _encodeUuidPK(UuidPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static UuidPK _decodeUuidPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        UuidPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(UuidPK._);
    register(_encodeUuidPK, _decodeUuidPK);
    return const SchemaObject(ObjectType.realmObject, UuidPK, 'UuidPK', [
      SchemaProperty('id', RealmPropertyType.uuid, primaryKey: true),
    ]);
  }();
}

class NullableUuidPK extends _NullableUuidPK
    with RealmEntity, RealmObjectBase, RealmObject {
  NullableUuidPK(
    Uuid? id,
  ) {
    RealmObjectBase.set(this, 'id', id);
  }

  NullableUuidPK._();

  @override
  Uuid? get id => RealmObjectBase.get<Uuid>(this, 'id') as Uuid?;
  @override
  set id(Uuid? value) => RealmObjectBase.set(this, 'id', value);

  @override
  Stream<RealmObjectChanges<NullableUuidPK>> get changes =>
      RealmObjectBase.getChanges<NullableUuidPK>(this);

  @override
  NullableUuidPK freeze() => RealmObjectBase.freezeObject<NullableUuidPK>(this);

  static EJsonValue _encodeNullableUuidPK(NullableUuidPK value) {
    return <String, dynamic>{
      'id': toEJson(value.id),
    };
  }

  static NullableUuidPK _decodeNullableUuidPK(EJsonValue ejson) {
    return switch (ejson) {
      {
        'id': EJsonValue id,
      } =>
        NullableUuidPK(
          fromEJson(id),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(NullableUuidPK._);
    register(_encodeNullableUuidPK, _decodeNullableUuidPK);
    return const SchemaObject(
        ObjectType.realmObject, NullableUuidPK, 'NullableUuidPK', [
      SchemaProperty('id', RealmPropertyType.uuid,
          optional: true, primaryKey: true),
    ]);
  }();
}
