// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'all_types.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Foo extends _Foo with RealmEntity, RealmObjectBase, RealmObject {
  static var _defaultsSet = false;

  Foo({
    int x = 0,
    Bar? bar,
  }) {
    if (!_defaultsSet) {
      _defaultsSet = RealmObjectBase.setDefaults<Foo>({
        'x': 0,
      });
    }
    RealmObjectBase.set(this, 'x', x);
    RealmObjectBase.set(this, 'bar', bar);
  }

  Foo._();

  @override
  int get x => RealmObjectBase.get<int>(this, 'x') as int;
  @override
  set x(int value) => RealmObjectBase.set(this, 'x', value);

  @override
  Bar? get bar => RealmObjectBase.get<Bar>(this, 'bar') as Bar?;
  @override
  set bar(covariant Bar? value) => RealmObjectBase.set(this, 'bar', value);

  @override
  Stream<RealmObjectChanges<Foo>> get changes =>
      RealmObjectBase.getChanges<Foo>(this);

  @override
  Foo freeze() => RealmObjectBase.freezeObject<Foo>(this);

  static SchemaObject get schema => _schema ??= _initSchema();
  static SchemaObject? _schema;
  static SchemaObject _initSchema() {
    RealmObjectBase.registerFactory(Foo._);
    return const SchemaObject(ObjectType.realmObject, Foo, 'MyFoo', [
      SchemaProperty('x', RealmPropertyType.int, indexType: RealmIndexType.regular),
      SchemaProperty('bar', RealmPropertyType.object,
          optional: true, linkTarget: 'Bar'),
    ]);
  }
}

class Bar extends _Bar with RealmEntity, RealmObjectBase, RealmObject {
  static var _defaultsSet = false;

  Bar(
    String name,
    bool aBool,
    bool another,
    ObjectId objectId,
    Uuid uuid,
    Decimal128 decimal, {
    Uint8List? data,
    DateTime timestamp = DateTime.now(),
    double aDouble = 0.0,
    Foo? foo,
    String? anOptionalString,
    RealmValue any = const RealmValue.nullValue(),
    Iterable<int> list = const [],
    Iterable<RealmValue> manyAny = const [],
    Set<int> set = const {},
    Map<String, int> map = const {},
  }) {
    if (!_defaultsSet) {
      _defaultsSet = RealmObjectBase.setDefaults<Bar>({
        'tidspunkt': DateTime.now(),
        'aDouble': 0.0,
      });
    }
    RealmObjectBase.set(this, 'name', name);
    RealmObjectBase.set(this, 'aBool', aBool);
    RealmObjectBase.set(this, 'another', another);
    RealmObjectBase.set(this, 'data', data ?? Uint8List(16));
    RealmObjectBase.set(this, 'tidspunkt', timestamp);
    RealmObjectBase.set(this, 'aDouble', aDouble);
    RealmObjectBase.set(this, 'foo', foo);
    RealmObjectBase.set(this, 'objectId', objectId);
    RealmObjectBase.set(this, 'uuid', uuid);
    RealmObjectBase.set(this, 'anOptionalString', anOptionalString);
    RealmObjectBase.set(this, 'any', any);
    RealmObjectBase.set(this, 'decimal', decimal);
    RealmObjectBase.set<RealmList<int>>(this, 'list', RealmList<int>(list));
    RealmObjectBase.set<RealmList<RealmValue>>(this, 'manyAny', RealmList<RealmValue>(manyAny));
    RealmObjectBase.set<RealmSet<int>>(this, 'set', RealmSet<int>(set));
    RealmObjectBase.set<RealmMap<int>>(
        this, 'map', RealmMap<int>(map));
  }

  Bar._();

  @override
  String get name => RealmObjectBase.get<String>(this, 'name') as String;
  @override
  set name(String value) => RealmObjectBase.set(this, 'name', value);

  @override
  bool get aBool => RealmObjectBase.get<bool>(this, 'aBool') as bool;
  @override
  set aBool(bool value) => RealmObjectBase.set(this, 'aBool', value);

  @override
  bool get another => RealmObjectBase.get<bool>(this, 'another') as bool;
  @override
  set another(bool value) => RealmObjectBase.set(this, 'another', value);

  @override
  Uint8List get data =>
      RealmObjectBase.get<Uint8List>(this, 'data') as Uint8List;
  @override
  set data(Uint8List value) => RealmObjectBase.set(this, 'data', value);

  @override
  DateTime get timestamp =>
      RealmObjectBase.get<DateTime>(this, 'tidspunkt') as DateTime;
  @override
  set timestamp(DateTime value) =>
      RealmObjectBase.set(this, 'tidspunkt', value);

  @override
  double get aDouble => RealmObjectBase.get<double>(this, 'aDouble') as double;
  @override
  set aDouble(double value) => RealmObjectBase.set(this, 'aDouble', value);

  @override
  Foo? get foo => RealmObjectBase.get<Foo>(this, 'foo') as Foo?;
  @override
  set foo(covariant Foo? value) => RealmObjectBase.set(this, 'foo', value);

  @override
  ObjectId get objectId =>
      RealmObjectBase.get<ObjectId>(this, 'objectId') as ObjectId;
  @override
  set objectId(ObjectId value) => RealmObjectBase.set(this, 'objectId', value);

  @override
  Uuid get uuid => RealmObjectBase.get<Uuid>(this, 'uuid') as Uuid;
  @override
  set uuid(Uuid value) => RealmObjectBase.set(this, 'uuid', value);

  @override
  RealmList<int> get list =>
      RealmObjectBase.get<int>(this, 'list') as RealmList<int>;
  @override
  set list(covariant RealmList<int> value) => throw RealmUnsupportedSetError();

  @override
  RealmSet<int> get set =>
      RealmObjectBase.get<int>(this, 'set') as RealmSet<int>;
  @override
  set set(covariant RealmSet<int> value) => throw RealmUnsupportedSetError();

  @override
  RealmMap<int> get map =>
      RealmObjectBase.get<int>(this, 'map') as RealmMap<int>;
  @override
  set map(covariant RealmMap<int> value) =>
      throw RealmUnsupportedSetError();

  @override
  String? get anOptionalString =>
      RealmObjectBase.get<String>(this, 'anOptionalString') as String?;
  @override
  set anOptionalString(String? value) =>
      RealmObjectBase.set(this, 'anOptionalString', value);

  @override
  RealmValue get any =>
      RealmObjectBase.get<RealmValue>(this, 'any') as RealmValue;
  @override
  set any(RealmValue value) => RealmObjectBase.set(this, 'any', value);

  @override
  RealmList<RealmValue> get manyAny =>
      RealmObjectBase.get<RealmValue>(this, 'manyAny') as RealmList<RealmValue>;
  @override
  set manyAny(covariant RealmList<RealmValue> value) =>
      throw RealmUnsupportedSetError();

  @override
  Decimal128 get decimal =>
      RealmObjectBase.get<Decimal128>(this, 'decimal') as Decimal128;
  @override
  set decimal(Decimal128 value) => RealmObjectBase.set(this, 'decimal', value);

  @override
  RealmResults<Foo> get foos {
    if (!isManaged) {
      throw RealmError(
          'Using backlinks is only possible for managed objects.');
    }
    return RealmObjectBase.get<Foo>(this, 'foos') as RealmResults<Foo>;
  }

  @override
  set foos(covariant RealmResults<Foo> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<Bar>> get changes =>
      RealmObjectBase.getChanges<Bar>(this);

  @override
  Bar freeze() => RealmObjectBase.freezeObject<Bar>(this);

  static SchemaObject get schema => _schema ??= _initSchema();
  static SchemaObject? _schema;
  static SchemaObject _initSchema() {
    RealmObjectBase.registerFactory(Bar._);
    return const SchemaObject(ObjectType.realmObject, Bar, 'Bar', [
      SchemaProperty('name', RealmPropertyType.string, primaryKey: true),
      SchemaProperty('aBool', RealmPropertyType.bool, indexType: RealmIndexType.regular),
      SchemaProperty('another', RealmPropertyType.bool, indexType: RealmIndexType.regular),
      SchemaProperty('data', RealmPropertyType.binary),
      SchemaProperty('timestamp', RealmPropertyType.timestamp,
          mapTo: 'tidspunkt', indexType: RealmIndexType.regular),
      SchemaProperty('aDouble', RealmPropertyType.double),
      SchemaProperty('foo', RealmPropertyType.object,
          optional: true, linkTarget: 'MyFoo'),
      SchemaProperty('objectId', RealmPropertyType.objectid, indexType: RealmIndexType.regular),
      SchemaProperty('uuid', RealmPropertyType.uuid, indexType: RealmIndexType.regular),
      SchemaProperty('list', RealmPropertyType.int,
          collectionType: RealmCollectionType.list),
      SchemaProperty('set', RealmPropertyType.int,
          collectionType: RealmCollectionType.set),
      SchemaProperty('map', RealmPropertyType.int,
          collectionType: RealmCollectionType.map),
      SchemaProperty('anOptionalString', RealmPropertyType.string,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('any', RealmPropertyType.mixed, optional: true),
      SchemaProperty('manyAny', RealmPropertyType.mixed,
          optional: true, collectionType: RealmCollectionType.list),
      SchemaProperty('decimal', RealmPropertyType.decimal128),
      SchemaProperty('foos', RealmPropertyType.linkingObjects,
          linkOriginProperty: 'bar',
          collectionType: RealmCollectionType.list,
          linkTarget: 'MyFoo'),
    ]);
  }
}

class PrimitiveTypes extends _PrimitiveTypes
    with RealmEntity, RealmObjectBase, RealmObject {
  PrimitiveTypes(
    String stringProp,
    bool boolProp,
    DateTime dateProp,
    double doubleProp,
    ObjectId objectIdProp,
  ) {
    RealmObjectBase.set(this, 'stringProp', stringProp);
    RealmObjectBase.set(this, 'boolProp', boolProp);
    RealmObjectBase.set(this, 'dateProp', dateProp);
    RealmObjectBase.set(this, 'doubleProp', doubleProp);
    RealmObjectBase.set(this, 'objectIdProp', objectIdProp);
  }

  PrimitiveTypes._();

  @override
  String get stringProp =>
      RealmObjectBase.get<String>(this, 'stringProp') as String;
  @override
  set stringProp(String value) =>
      RealmObjectBase.set(this, 'stringProp', value);

  @override
  bool get boolProp => RealmObjectBase.get<bool>(this, 'boolProp') as bool;
  @override
  set boolProp(bool value) => RealmObjectBase.set(this, 'boolProp', value);

  @override
  DateTime get dateProp =>
      RealmObjectBase.get<DateTime>(this, 'dateProp') as DateTime;
  @override
  set dateProp(DateTime value) => RealmObjectBase.set(this, 'dateProp', value);

  @override
  double get doubleProp =>
      RealmObjectBase.get<double>(this, 'doubleProp') as double;
  @override
  set doubleProp(double value) =>
      RealmObjectBase.set(this, 'doubleProp', value);

  @override
  ObjectId get objectIdProp =>
      RealmObjectBase.get<ObjectId>(this, 'objectIdProp') as ObjectId;
  @override
  set objectIdProp(ObjectId value) =>
      RealmObjectBase.set(this, 'objectIdProp', value);

  @override
  Stream<RealmObjectChanges<PrimitiveTypes>> get changes =>
      RealmObjectBase.getChanges<PrimitiveTypes>(this);

  @override
  PrimitiveTypes freeze() => RealmObjectBase.freezeObject<PrimitiveTypes>(this);

  static SchemaObject get schema => _schema ??= _initSchema();
  static SchemaObject? _schema;
  static SchemaObject _initSchema() {
    RealmObjectBase.registerFactory(PrimitiveTypes._);
    return const SchemaObject(
        ObjectType.realmObject, PrimitiveTypes, 'PrimitiveTypes', [
      SchemaProperty('stringProp', RealmPropertyType.string),
      SchemaProperty('boolProp', RealmPropertyType.bool),
      SchemaProperty('dateProp', RealmPropertyType.timestamp),
      SchemaProperty('doubleProp', RealmPropertyType.double),
      SchemaProperty('objectIdProp', RealmPropertyType.objectid),
    ]);
  }
}
