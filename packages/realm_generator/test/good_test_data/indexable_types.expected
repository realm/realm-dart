// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'indexable_types.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Indexable extends _Indexable
    with RealmEntity, RealmObjectBase, RealmObject {
  Indexable(
    bool aBool,
    int anInt,
    String aString,
    ObjectId anObjectId,
    Uuid anUuid,
    DateTime aDateTime,
    String generalStringIndex,
    String ftsStringValue, {
    bool? aNullableBool,
    int? aNullableInt,
    String? aNullableString,
    ObjectId? aNullableObjectId,
    Uuid? aNullableUuid,
    DateTime? aNullableDateTime,
    RealmValue aRealmValue = const RealmValue.nullValue(),
    String? nullableFtsStringValue,
  }) {
    RealmObjectBase.set(this, 'aBool', aBool);
    RealmObjectBase.set(this, 'aNullableBool', aNullableBool);
    RealmObjectBase.set(this, 'anInt', anInt);
    RealmObjectBase.set(this, 'aNullableInt', aNullableInt);
    RealmObjectBase.set(this, 'aString', aString);
    RealmObjectBase.set(this, 'aNullableString', aNullableString);
    RealmObjectBase.set(this, 'anObjectId', anObjectId);
    RealmObjectBase.set(this, 'aNullableObjectId', aNullableObjectId);
    RealmObjectBase.set(this, 'anUuid', anUuid);
    RealmObjectBase.set(this, 'aNullableUuid', aNullableUuid);
    RealmObjectBase.set(this, 'aDateTime', aDateTime);
    RealmObjectBase.set(this, 'aNullableDateTime', aNullableDateTime);
    RealmObjectBase.set(this, 'aRealmValue', aRealmValue);
    RealmObjectBase.set(this, 'generalStringIndex', generalStringIndex);
    RealmObjectBase.set(this, 'ftsStringValue', ftsStringValue);
    RealmObjectBase.set(this, 'nullableFtsStringValue', nullableFtsStringValue);
  }

  Indexable._();

  @override
  bool get aBool => RealmObjectBase.get<bool>(this, 'aBool') as bool;
  @override
  set aBool(bool value) => RealmObjectBase.set(this, 'aBool', value);

  @override
  bool? get aNullableBool =>
      RealmObjectBase.get<bool>(this, 'aNullableBool') as bool?;
  @override
  set aNullableBool(bool? value) =>
      RealmObjectBase.set(this, 'aNullableBool', value);

  @override
  int get anInt => RealmObjectBase.get<int>(this, 'anInt') as int;
  @override
  set anInt(int value) => RealmObjectBase.set(this, 'anInt', value);

  @override
  int? get aNullableInt =>
      RealmObjectBase.get<int>(this, 'aNullableInt') as int?;
  @override
  set aNullableInt(int? value) =>
      RealmObjectBase.set(this, 'aNullableInt', value);

  @override
  String get aString => RealmObjectBase.get<String>(this, 'aString') as String;
  @override
  set aString(String value) => RealmObjectBase.set(this, 'aString', value);

  @override
  String? get aNullableString =>
      RealmObjectBase.get<String>(this, 'aNullableString') as String?;
  @override
  set aNullableString(String? value) =>
      RealmObjectBase.set(this, 'aNullableString', value);

  @override
  ObjectId get anObjectId =>
      RealmObjectBase.get<ObjectId>(this, 'anObjectId') as ObjectId;
  @override
  set anObjectId(ObjectId value) =>
      RealmObjectBase.set(this, 'anObjectId', value);

  @override
  ObjectId? get aNullableObjectId =>
      RealmObjectBase.get<ObjectId>(this, 'aNullableObjectId') as ObjectId?;
  @override
  set aNullableObjectId(ObjectId? value) =>
      RealmObjectBase.set(this, 'aNullableObjectId', value);

  @override
  Uuid get anUuid => RealmObjectBase.get<Uuid>(this, 'anUuid') as Uuid;
  @override
  set anUuid(Uuid value) => RealmObjectBase.set(this, 'anUuid', value);

  @override
  Uuid? get aNullableUuid =>
      RealmObjectBase.get<Uuid>(this, 'aNullableUuid') as Uuid?;
  @override
  set aNullableUuid(Uuid? value) =>
      RealmObjectBase.set(this, 'aNullableUuid', value);

  @override
  DateTime get aDateTime =>
      RealmObjectBase.get<DateTime>(this, 'aDateTime') as DateTime;
  @override
  set aDateTime(DateTime value) =>
      RealmObjectBase.set(this, 'aDateTime', value);

  @override
  DateTime? get aNullableDateTime =>
      RealmObjectBase.get<DateTime>(this, 'aNullableDateTime') as DateTime?;
  @override
  set aNullableDateTime(DateTime? value) =>
      RealmObjectBase.set(this, 'aNullableDateTime', value);

  @override
  RealmValue get aRealmValue =>
      RealmObjectBase.get<RealmValue>(this, 'aRealmValue') as RealmValue;
  @override
  set aRealmValue(RealmValue value) =>
      RealmObjectBase.set(this, 'aRealmValue', value);

  @override
  String get generalStringIndex =>
      RealmObjectBase.get<String>(this, 'generalStringIndex') as String;
  @override
  set generalStringIndex(String value) =>
      RealmObjectBase.set(this, 'generalStringIndex', value);

  @override
  String get ftsStringValue =>
      RealmObjectBase.get<String>(this, 'ftsStringValue') as String;
  @override
  set ftsStringValue(String value) =>
      RealmObjectBase.set(this, 'ftsStringValue', value);

  @override
  String? get nullableFtsStringValue =>
      RealmObjectBase.get<String>(this, 'nullableFtsStringValue') as String?;
  @override
  set nullableFtsStringValue(String? value) =>
      RealmObjectBase.set(this, 'nullableFtsStringValue', value);

  @override
  Stream<RealmObjectChanges<Indexable>> get changes =>
      RealmObjectBase.getChanges<Indexable>(this);

  @override
  Stream<RealmObjectChanges<Indexable>> changesFor([List<String>? keyPaths]) =>
      RealmObjectBase.getChangesFor<Indexable>(this, keyPaths);

  @override
  Indexable freeze() => RealmObjectBase.freezeObject<Indexable>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'aBool': aBool.toEJson(),
      'aNullableBool': aNullableBool.toEJson(),
      'anInt': anInt.toEJson(),
      'aNullableInt': aNullableInt.toEJson(),
      'aString': aString.toEJson(),
      'aNullableString': aNullableString.toEJson(),
      'anObjectId': anObjectId.toEJson(),
      'aNullableObjectId': aNullableObjectId.toEJson(),
      'anUuid': anUuid.toEJson(),
      'aNullableUuid': aNullableUuid.toEJson(),
      'aDateTime': aDateTime.toEJson(),
      'aNullableDateTime': aNullableDateTime.toEJson(),
      'aRealmValue': aRealmValue.toEJson(),
      'generalStringIndex': generalStringIndex.toEJson(),
      'ftsStringValue': ftsStringValue.toEJson(),
      'nullableFtsStringValue': nullableFtsStringValue.toEJson(),
    };
  }

  static EJsonValue _toEJson(Indexable value) => value.toEJson();
  static Indexable _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'aBool': EJsonValue aBool,
        'aNullableBool': EJsonValue aNullableBool,
        'anInt': EJsonValue anInt,
        'aNullableInt': EJsonValue aNullableInt,
        'aString': EJsonValue aString,
        'aNullableString': EJsonValue aNullableString,
        'anObjectId': EJsonValue anObjectId,
        'aNullableObjectId': EJsonValue aNullableObjectId,
        'anUuid': EJsonValue anUuid,
        'aNullableUuid': EJsonValue aNullableUuid,
        'aDateTime': EJsonValue aDateTime,
        'aNullableDateTime': EJsonValue aNullableDateTime,
        'aRealmValue': EJsonValue aRealmValue,
        'generalStringIndex': EJsonValue generalStringIndex,
        'ftsStringValue': EJsonValue ftsStringValue,
        'nullableFtsStringValue': EJsonValue nullableFtsStringValue,
      } =>
        Indexable(
          fromEJson(aBool),
          fromEJson(anInt),
          fromEJson(aString),
          fromEJson(anObjectId),
          fromEJson(anUuid),
          fromEJson(aDateTime),
          fromEJson(generalStringIndex),
          fromEJson(ftsStringValue),
          aNullableBool: fromEJson(aNullableBool),
          aNullableInt: fromEJson(aNullableInt),
          aNullableString: fromEJson(aNullableString),
          aNullableObjectId: fromEJson(aNullableObjectId),
          aNullableUuid: fromEJson(aNullableUuid),
          aNullableDateTime: fromEJson(aNullableDateTime),
          aRealmValue: fromEJson(aRealmValue),
          nullableFtsStringValue: fromEJson(nullableFtsStringValue),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Indexable._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, Indexable, 'Indexable', [
      SchemaProperty('aBool', RealmPropertyType.bool,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableBool', RealmPropertyType.bool,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('anInt', RealmPropertyType.int,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableInt', RealmPropertyType.int,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('aString', RealmPropertyType.string,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableString', RealmPropertyType.string,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('anObjectId', RealmPropertyType.objectid,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableObjectId', RealmPropertyType.objectid,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('anUuid', RealmPropertyType.uuid,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableUuid', RealmPropertyType.uuid,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('aDateTime', RealmPropertyType.timestamp,
          indexType: RealmIndexType.regular),
      SchemaProperty('aNullableDateTime', RealmPropertyType.timestamp,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('aRealmValue', RealmPropertyType.mixed,
          optional: true, indexType: RealmIndexType.regular),
      SchemaProperty('generalStringIndex', RealmPropertyType.string,
          indexType: RealmIndexType.regular),
      SchemaProperty('ftsStringValue', RealmPropertyType.string,
          indexType: RealmIndexType.fullText),
      SchemaProperty('nullableFtsStringValue', RealmPropertyType.string,
          optional: true, indexType: RealmIndexType.fullText),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}
