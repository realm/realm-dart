// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'asymmetric_object.dart';

// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Asymmetric extends _Asymmetric
    with RealmEntity, RealmObjectBase, RealmObject {
  Asymmetric(
    ObjectId id, {
    Iterable<Embedded> children = const [],
    Embedded? father,
    Embedded? mother,
  }) {
    RealmObjectBase.set(this, '_id', id);
    RealmObjectBase.set<RealmList<Embedded>>(
        this, 'children', RealmList<Embedded>(children));
    RealmObjectBase.set(this, 'father', father);
    RealmObjectBase.set(this, 'mother', mother);
  }

  Asymmetric._();

  @override
  ObjectId get id => RealmObjectBase.get<ObjectId>(this, '_id') as ObjectId;
  @override
  set id(ObjectId value) => RealmObjectBase.set(this, '_id', value);

  @override
  RealmList<Embedded> get children =>
      RealmObjectBase.get<Embedded>(this, 'children') as RealmList<Embedded>;
  @override
  set children(covariant RealmList<Embedded> value) =>
      throw RealmUnsupportedSetError();

  @override
  Embedded? get father =>
      RealmObjectBase.get<Embedded>(this, 'father') as Embedded?;
  @override
  set father(covariant Embedded? value) =>
      RealmObjectBase.set(this, 'father', value);

  @override
  Embedded? get mother =>
      RealmObjectBase.get<Embedded>(this, 'mother') as Embedded?;
  @override
  set mother(covariant Embedded? value) =>
      RealmObjectBase.set(this, 'mother', value);

  @override
  Stream<RealmObjectChanges<Asymmetric>> get changes =>
      RealmObjectBase.getChanges<Asymmetric>(this);

  @override
  Stream<RealmObjectChanges<Asymmetric>> changesFor([List<String>? keyPaths]) =>
      RealmObjectBase.getChangesFor<Asymmetric>(this, keyPaths);

  @override
  Asymmetric freeze() => RealmObjectBase.freezeObject<Asymmetric>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      '_id': id.toEJson(),
      'children': children.toEJson(),
      'father': father.toEJson(),
      'mother': mother.toEJson(),
    };
  }

  static EJsonValue _toEJson(Asymmetric value) => value.toEJson();
  static Asymmetric _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        '_id': EJsonValue id,
        'children': EJsonValue children,
        'father': EJsonValue father,
        'mother': EJsonValue mother,
      } =>
        Asymmetric(
          fromEJson(id),
          children: fromEJson(children),
          father: fromEJson(father),
          mother: fromEJson(mother),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Asymmetric._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.realmObject, Asymmetric, 'Asymmetric', [
      SchemaProperty('id', RealmPropertyType.objectid,
          mapTo: '_id', primaryKey: true),
      SchemaProperty('children', RealmPropertyType.object,
          linkTarget: 'Embedded', collectionType: RealmCollectionType.list),
      SchemaProperty('father', RealmPropertyType.object,
          optional: true, linkTarget: 'Embedded'),
      SchemaProperty('mother', RealmPropertyType.object,
          optional: true, linkTarget: 'Embedded'),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}

class Embedded extends _Embedded
    with RealmEntity, RealmObjectBase, EmbeddedObject {
  Embedded(
    String name,
    int age,
  ) {
    RealmObjectBase.set(this, 'name', name);
    RealmObjectBase.set(this, 'age', age);
  }

  Embedded._();

  @override
  String get name => RealmObjectBase.get<String>(this, 'name') as String;
  @override
  set name(String value) => RealmObjectBase.set(this, 'name', value);

  @override
  int get age => RealmObjectBase.get<int>(this, 'age') as int;
  @override
  set age(int value) => RealmObjectBase.set(this, 'age', value);

  @override
  Stream<RealmObjectChanges<Embedded>> get changes =>
      RealmObjectBase.getChanges<Embedded>(this);

  @override
  Stream<RealmObjectChanges<Embedded>> changesFor([List<String>? keyPaths]) =>
      RealmObjectBase.getChangesFor<Embedded>(this, keyPaths);

  @override
  Embedded freeze() => RealmObjectBase.freezeObject<Embedded>(this);

  EJsonValue toEJson() {
    return <String, dynamic>{
      'name': name.toEJson(),
      'age': age.toEJson(),
    };
  }

  static EJsonValue _toEJson(Embedded value) => value.toEJson();
  static Embedded _fromEJson(EJsonValue ejson) {
    return switch (ejson) {
      {
        'name': EJsonValue name,
        'age': EJsonValue age,
      } =>
        Embedded(
          fromEJson(name),
          fromEJson(age),
        ),
      _ => raiseInvalidEJson(ejson),
    };
  }

  static final schema = () {
    RealmObjectBase.registerFactory(Embedded._);
    register(_toEJson, _fromEJson);
    return SchemaObject(ObjectType.embeddedObject, Embedded, 'Embedded', [
      SchemaProperty('name', RealmPropertyType.string),
      SchemaProperty('age', RealmPropertyType.int),
    ]);
  }();

  @override
  SchemaObject get objectSchema => RealmObjectBase.getSchema(this) ?? schema;
}
