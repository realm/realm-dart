// **************************************************************************
// RealmObjectGenerator
// **************************************************************************

class Original extends $Original with RealmEntity, RealmObject {
  static var _defaultsSet = false;

  Original({
    int primitiveProperty = 0,
    Original? objectProperty,
    Iterable<Original> listProperty = const [],
  }) {
    if (!_defaultsSet) {
      _defaultsSet = RealmObject.setDefaults<Original>({
        'remapped primitive': 0,
      });
    }
    RealmObject.set(this, 'remapped primitive', primitiveProperty);
    RealmObject.set(this, 'remapped object', objectProperty);
    RealmObject.set<RealmList<Original>>(
        this, 'remapped list', RealmList<Original>(listProperty));
  }

  Original._();

  @override
  int get primitiveProperty =>
      RealmObject.get<int>(this, 'remapped primitive') as int;
  @override
  set primitiveProperty(int value) =>
      RealmObject.set(this, 'remapped primitive', value);

  @override
  Original? get objectProperty =>
      RealmObject.get<Original>(this, 'remapped object') as Original?;
  @override
  set objectProperty(covariant Original? value) =>
      RealmObject.set(this, 'remapped object', value);

  @override
  RealmList<Original> get listProperty =>
      RealmObject.get<Original>(this, 'remapped list') as RealmList<Original>;
  @override
  set listProperty(covariant RealmList<Original> value) =>
      throw RealmUnsupportedSetError();

  @override
  Stream<RealmObjectChanges<Original>> get changes =>
      RealmObject.getChanges<Original>(this);

  @override
  Original freeze() => RealmObject.freezeObject<Original>(this);

  static SchemaObject get schema => _schema ??= _initSchema();
  static SchemaObject? _schema;
  static SchemaObject _initSchema() {
    RealmObject.registerFactory(Original._);
    return const SchemaObject(Original, 'another type', [
      SchemaProperty('remapped primitive', RealmPropertyType.int,
          mapTo: 'remapped primitive'),
      SchemaProperty('remapped object', RealmPropertyType.object,
          mapTo: 'remapped object', optional: true, linkTarget: 'another type'),
      SchemaProperty('remapped list', RealmPropertyType.object,
          mapTo: 'remapped list',
          linkTarget: 'another type',
          collectionType: RealmCollectionType.list),
    ]);
  }
}

